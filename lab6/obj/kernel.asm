
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 d0 12 00 	lgdtl  0x12d018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 d0 12 c0       	mov    $0xc012d000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 78 1f 1b c0       	mov    $0xc01b1f78,%edx
c0100035:	b8 d4 ed 1a c0       	mov    $0xc01aedd4,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d4 ed 1a c0 	movl   $0xc01aedd4,(%esp)
c0100051:	e8 eb c4 00 00       	call   c010c541 <memset>

    cons_init();                // init the console
c0100056:	e8 85 16 00 00       	call   c01016e0 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 e0 c6 10 c0 	movl   $0xc010c6e0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 fc c6 10 c0 	movl   $0xc010c6fc,(%esp)
c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>

    print_kerninfo();
c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 0f 56 00 00       	call   c0105693 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 35 20 00 00       	call   c01020be <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 93 21 00 00       	call   c0102221 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 eb 85 00 00       	call   c010867e <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 0b b3 00 00       	call   c010b3a3 <sched_init>
    proc_init();                // init process table
c0100098:	e8 7e ac 00 00       	call   c010ad1b <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 6f 17 00 00       	call   c0101811 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 ad 6c 00 00       	call   c0106d54 <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 ea 0d 00 00       	call   c0100e96 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 7b 1f 00 00       	call   c010202c <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 24 ae 00 00       	call   c010aeda <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 f0 0c 00 00       	call   c0100dc8 <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 01 c7 10 c0 	movl   $0xc010c701,(%esp)
c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 0f c7 10 c0 	movl   $0xc010c70f,(%esp)
c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 1d c7 10 c0 	movl   $0xc010c71d,(%esp)
c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 2b c7 10 c0 	movl   $0xc010c72b,(%esp)
c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 39 c7 10 c0 	movl   $0xc010c739,(%esp)
c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
    round ++;
c01001fd:	a1 e0 ed 1a c0       	mov    0xc01aede0,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 e0 ed 1a c0       	mov    %eax,0xc01aede0
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 48 c7 10 c0 	movl   $0xc010c748,(%esp)
c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 68 c7 10 c0 	movl   $0xc010c768,(%esp)
c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100259:	74 13                	je     c010026e <readline+0x1f>
        cprintf("%s", prompt);
c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100262:	c7 04 24 87 c7 10 c0 	movl   $0xc010c787,(%esp)
c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
    }
    int i = 0, c;
c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100281:	79 07                	jns    c010028a <readline+0x3b>
            return NULL;
c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
            cputchar(c);
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
            buf[i ++] = c;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b0:	88 90 00 ee 1a c0    	mov    %dl,-0x3fe51200(%eax)
c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
            cputchar(c);
c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c7:	89 04 24             	mov    %eax,(%esp)
c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
            i --;
c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002d9:	74 06                	je     c01002e1 <readline+0x92>
c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
            cputchar(c);
c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e4:	89 04 24             	mov    %eax,(%esp)
c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
            buf[i] = '\0';
c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ef:	05 00 ee 1a c0       	add    $0xc01aee00,%eax
c01002f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002f7:	b8 00 ee 1a c0       	mov    $0xc01aee00,%eax
c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
        }
    }
c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
}
c0100303:	c9                   	leave  
c0100304:	c3                   	ret    

c0100305 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100305:	55                   	push   %ebp
c0100306:	89 e5                	mov    %esp,%ebp
c0100308:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
c010030e:	89 04 24             	mov    %eax,(%esp)
c0100311:	e8 f6 13 00 00       	call   c010170c <cons_putc>
    (*cnt) ++;
c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100319:	8b 00                	mov    (%eax),%eax
c010031b:	8d 50 01             	lea    0x1(%eax),%edx
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 10                	mov    %edx,(%eax)
}
c0100323:	c9                   	leave  
c0100324:	c3                   	ret    

c0100325 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100325:	55                   	push   %ebp
c0100326:	89 e5                	mov    %esp,%ebp
c0100328:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
c010034e:	e8 2f b9 00 00       	call   c010bc82 <vprintfmt>
    return cnt;
c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100356:	c9                   	leave  
c0100357:	c3                   	ret    

c0100358 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
c010036e:	89 04 24             	mov    %eax,(%esp)
c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037c:	c9                   	leave  
c010037d:	c3                   	ret    

c010037e <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010037e:	55                   	push   %ebp
c010037f:	89 e5                	mov    %esp,%ebp
c0100381:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 7d 13 00 00       	call   c010170c <cons_putc>
}
c010038f:	c9                   	leave  
c0100390:	c3                   	ret    

c0100391 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100391:	55                   	push   %ebp
c0100392:	89 e5                	mov    %esp,%ebp
c0100394:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
        cputch(c, &cnt);
c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ab:	89 04 24             	mov    %eax,(%esp)
c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
c01003bc:	0f b6 00             	movzbl (%eax),%eax
c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
    return cnt;
c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003de:	c9                   	leave  
c01003df:	c3                   	ret    

c01003e0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003e0:	55                   	push   %ebp
c01003e1:	89 e5                	mov    %esp,%ebp
c01003e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003e6:	e8 5d 13 00 00       	call   c0101748 <cons_getc>
c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
        /* do nothing */;
    return c;
c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 00                	mov    (%eax),%eax
c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
c010040a:	8b 00                	mov    (%eax),%eax
c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100421:	01 d0                	add    %edx,%eax
c0100423:	89 c2                	mov    %eax,%edx
c0100425:	c1 ea 1f             	shr    $0x1f,%edx
c0100428:	01 d0                	add    %edx,%eax
c010042a:	d1 f8                	sar    %eax
c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
            m --;
c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 d0                	mov    %edx,%eax
c0100448:	01 c0                	add    %eax,%eax
c010044a:	01 d0                	add    %edx,%eax
c010044c:	c1 e0 02             	shl    $0x2,%eax
c010044f:	89 c2                	mov    %eax,%edx
c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
c0100454:	01 d0                	add    %edx,%eax
c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010045a:	0f b6 c0             	movzbl %al,%eax
c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
            l = true_m + 1;
c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010046d:	83 c0 01             	add    $0x1,%eax
c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010047f:	89 d0                	mov    %edx,%eax
c0100481:	01 c0                	add    %eax,%eax
c0100483:	01 d0                	add    %edx,%eax
c0100485:	c1 e0 02             	shl    $0x2,%eax
c0100488:	89 c2                	mov    %eax,%edx
c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
c010048d:	01 d0                	add    %edx,%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
            *region_left = m;
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a2:	83 c0 01             	add    $0x1,%eax
c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ad:	89 d0                	mov    %edx,%eax
c01004af:	01 c0                	add    %eax,%eax
c01004b1:	01 d0                	add    %edx,%eax
c01004b3:	c1 e0 02             	shl    $0x2,%eax
c01004b6:	89 c2                	mov    %eax,%edx
c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01004bb:	01 d0                	add    %edx,%eax
c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ce:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	83 e8 01             	sub    $0x1,%eax
c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e1:	89 10                	mov    %edx,(%eax)
            l = m;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 00                	mov    (%eax),%eax
c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
c010050a:	89 10                	mov    %edx,(%eax)
c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051f:	8b 00                	mov    (%eax),%eax
c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100529:	89 d0                	mov    %edx,%eax
c010052b:	01 c0                	add    %eax,%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	c1 e0 02             	shl    $0x2,%eax
c0100532:	89 c2                	mov    %eax,%edx
c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
c0100537:	01 d0                	add    %edx,%eax
c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010053d:	0f b6 c0             	movzbl %al,%eax
c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054b:	89 10                	mov    %edx,(%eax)
    }
}
c010054d:	c9                   	leave  
c010054e:	c3                   	ret    

c010054f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010054f:	55                   	push   %ebp
c0100550:	89 e5                	mov    %esp,%ebp
c0100552:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	c7 00 8c c7 10 c0    	movl   $0xc010c78c,(%eax)
    info->eip_line = 0;
c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056b:	c7 40 08 8c c7 10 c0 	movl   $0xc010c78c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100582:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100598:	c7 45 f4 a0 ef 10 c0 	movl   $0xc010efa0,-0xc(%ebp)
        stab_end = __STAB_END__;
c010059f:	c7 45 f0 04 45 12 c0 	movl   $0xc0124504,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005a6:	c7 45 ec 05 45 12 c0 	movl   $0xc0124505,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005ad:	c7 45 e8 c9 a9 12 c0 	movl   $0xc012a9c9,-0x18(%ebp)
c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c0:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01005c5:	85 c0                	test   %eax,%eax
c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
c01005c9:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
            return -1;
c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005ee:	00 
c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005f6:	00 
c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 e0 89 00 00       	call   c0108fe6 <user_mem_check>
c0100606:	85 c0                	test   %eax,%eax
c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
            return -1;
c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100617:	8b 00                	mov    (%eax),%eax
c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061f:	8b 40 04             	mov    0x4(%eax),%eax
c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100628:	8b 40 08             	mov    0x8(%eax),%eax
c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010063d:	29 c2                	sub    %eax,%edx
c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100649:	00 
c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100655:	89 04 24             	mov    %eax,(%esp)
c0100658:	e8 89 89 00 00       	call   c0108fe6 <user_mem_check>
c010065d:	85 c0                	test   %eax,%eax
c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
            return -1;
c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100671:	29 c2                	sub    %eax,%edx
c0100673:	89 d0                	mov    %edx,%eax
c0100675:	89 c2                	mov    %eax,%edx
c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100681:	00 
c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010068d:	89 04 24             	mov    %eax,(%esp)
c0100690:	e8 51 89 00 00       	call   c0108fe6 <user_mem_check>
c0100695:	85 c0                	test   %eax,%eax
c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
            return -1;
c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ae:	83 e8 01             	sub    $0x1,%eax
c01006b1:	0f b6 00             	movzbl (%eax),%eax
c01006b4:	84 c0                	test   %al,%al
c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
        return -1;
c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	29 c2                	sub    %eax,%edx
c01006d1:	89 d0                	mov    %edx,%eax
c01006d3:	c1 f8 02             	sar    $0x2,%eax
c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006dc:	83 e8 01             	sub    $0x1,%eax
c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f0:	00 
c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	89 04 24             	mov    %eax,(%esp)
c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
    if (lfile == 0)
c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010070d:	85 c0                	test   %eax,%eax
c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
        return -1;
c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100735:	00 
c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100747:	89 04 24             	mov    %eax,(%esp)
c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>

    if (lfun <= rfun) {
c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100755:	39 c2                	cmp    %eax,%edx
c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010075c:	89 c2                	mov    %eax,%edx
c010075e:	89 d0                	mov    %edx,%eax
c0100760:	01 c0                	add    %eax,%eax
c0100762:	01 d0                	add    %edx,%eax
c0100764:	c1 e0 02             	shl    $0x2,%eax
c0100767:	89 c2                	mov    %eax,%edx
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	01 d0                	add    %edx,%eax
c010076e:	8b 10                	mov    (%eax),%edx
c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100776:	29 c1                	sub    %eax,%ecx
c0100778:	89 c8                	mov    %ecx,%eax
c010077a:	39 c2                	cmp    %eax,%edx
c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100781:	89 c2                	mov    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	01 c0                	add    %eax,%eax
c0100787:	01 d0                	add    %edx,%eax
c0100789:	c1 e0 02             	shl    $0x2,%eax
c010078c:	89 c2                	mov    %eax,%edx
c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100791:	01 d0                	add    %edx,%eax
c0100793:	8b 10                	mov    (%eax),%edx
c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100798:	01 c2                	add    %eax,%edx
c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a3:	89 c2                	mov    %eax,%edx
c01007a5:	89 d0                	mov    %edx,%eax
c01007a7:	01 c0                	add    %eax,%eax
c01007a9:	01 d0                	add    %edx,%eax
c01007ab:	c1 e0 02             	shl    $0x2,%eax
c01007ae:	89 c2                	mov    %eax,%edx
c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b3:	01 d0                	add    %edx,%eax
c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007db:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f7:	00 
c01007f8:	89 04 24             	mov    %eax,(%esp)
c01007fb:	e8 b5 bb 00 00       	call   c010c3b5 <strfind>
c0100800:	89 c2                	mov    %eax,%edx
c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100805:	8b 40 08             	mov    0x8(%eax),%eax
c0100808:	29 c2                	sub    %eax,%edx
c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081e:	00 
c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100830:	89 04 24             	mov    %eax,(%esp)
c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
    if (lline <= rline) {
c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083e:	39 c2                	cmp    %eax,%edx
c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100845:	89 c2                	mov    %eax,%edx
c0100847:	89 d0                	mov    %edx,%eax
c0100849:	01 c0                	add    %eax,%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	c1 e0 02             	shl    $0x2,%eax
c0100850:	89 c2                	mov    %eax,%edx
c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100855:	01 d0                	add    %edx,%eax
c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010085b:	0f b7 d0             	movzwl %ax,%edx
c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100861:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100873:	83 e8 01             	sub    $0x1,%eax
c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010087f:	39 c2                	cmp    %eax,%edx
c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	89 d0                	mov    %edx,%eax
c010088a:	01 c0                	add    %eax,%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	c1 e0 02             	shl    $0x2,%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	01 d0                	add    %edx,%eax
c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010089c:	3c 84                	cmp    $0x84,%al
c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008a3:	89 c2                	mov    %eax,%edx
c01008a5:	89 d0                	mov    %edx,%eax
c01008a7:	01 c0                	add    %eax,%eax
c01008a9:	01 d0                	add    %edx,%eax
c01008ab:	c1 e0 02             	shl    $0x2,%eax
c01008ae:	89 c2                	mov    %eax,%edx
c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008b3:	01 d0                	add    %edx,%eax
c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b9:	3c 64                	cmp    $0x64,%al
c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008c0:	89 c2                	mov    %eax,%edx
c01008c2:	89 d0                	mov    %edx,%eax
c01008c4:	01 c0                	add    %eax,%eax
c01008c6:	01 d0                	add    %edx,%eax
c01008c8:	c1 e0 02             	shl    $0x2,%eax
c01008cb:	89 c2                	mov    %eax,%edx
c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d0:	01 d0                	add    %edx,%eax
c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
c01008d5:	85 c0                	test   %eax,%eax
c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008df:	39 c2                	cmp    %eax,%edx
c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008e6:	89 c2                	mov    %eax,%edx
c01008e8:	89 d0                	mov    %edx,%eax
c01008ea:	01 c0                	add    %eax,%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	c1 e0 02             	shl    $0x2,%eax
c01008f1:	89 c2                	mov    %eax,%edx
c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f6:	01 d0                	add    %edx,%eax
c01008f8:	8b 10                	mov    (%eax),%edx
c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100900:	29 c1                	sub    %eax,%ecx
c0100902:	89 c8                	mov    %ecx,%eax
c0100904:	39 c2                	cmp    %eax,%edx
c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090b:	89 c2                	mov    %eax,%edx
c010090d:	89 d0                	mov    %edx,%eax
c010090f:	01 c0                	add    %eax,%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	c1 e0 02             	shl    $0x2,%eax
c0100916:	89 c2                	mov    %eax,%edx
c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091b:	01 d0                	add    %edx,%eax
c010091d:	8b 10                	mov    (%eax),%edx
c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100922:	01 c2                	add    %eax,%edx
c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100927:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010092f:	39 c2                	cmp    %eax,%edx
c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100936:	83 c0 01             	add    $0x1,%eax
c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 14             	mov    0x14(%eax),%eax
c0100944:	8d 50 01             	lea    0x1(%eax),%edx
c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094a:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100950:	83 c0 01             	add    $0x1,%eax
c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c010095c:	39 c2                	cmp    %eax,%edx
c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100963:	89 c2                	mov    %eax,%edx
c0100965:	89 d0                	mov    %edx,%eax
c0100967:	01 c0                	add    %eax,%eax
c0100969:	01 d0                	add    %edx,%eax
c010096b:	c1 e0 02             	shl    $0x2,%eax
c010096e:	89 c2                	mov    %eax,%edx
c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100973:	01 d0                	add    %edx,%eax
c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100979:	3c a0                	cmp    $0xa0,%al
c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100982:	c9                   	leave  
c0100983:	c3                   	ret    

c0100984 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100984:	55                   	push   %ebp
c0100985:	89 e5                	mov    %esp,%ebp
c0100987:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c010098a:	c7 04 24 96 c7 10 c0 	movl   $0xc010c796,(%esp)
c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c010099d:	c0 
c010099e:	c7 04 24 af c7 10 c0 	movl   $0xc010c7af,(%esp)
c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009aa:	c7 44 24 04 ca c6 10 	movl   $0xc010c6ca,0x4(%esp)
c01009b1:	c0 
c01009b2:	c7 04 24 c7 c7 10 c0 	movl   $0xc010c7c7,(%esp)
c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009be:	c7 44 24 04 d4 ed 1a 	movl   $0xc01aedd4,0x4(%esp)
c01009c5:	c0 
c01009c6:	c7 04 24 df c7 10 c0 	movl   $0xc010c7df,(%esp)
c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d2:	c7 44 24 04 78 1f 1b 	movl   $0xc01b1f78,0x4(%esp)
c01009d9:	c0 
c01009da:	c7 04 24 f7 c7 10 c0 	movl   $0xc010c7f7,(%esp)
c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009e6:	b8 78 1f 1b c0       	mov    $0xc01b1f78,%eax
c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c01009f6:	29 c2                	sub    %eax,%edx
c01009f8:	89 d0                	mov    %edx,%eax
c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a00:	85 c0                	test   %eax,%eax
c0100a02:	0f 48 c2             	cmovs  %edx,%eax
c0100a05:	c1 f8 0a             	sar    $0xa,%eax
c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0c:	c7 04 24 10 c8 10 c0 	movl   $0xc010c810,(%esp)
c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
}
c0100a18:	c9                   	leave  
c0100a19:	c3                   	ret    

c0100a1a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1a:	55                   	push   %ebp
c0100a1b:	89 e5                	mov    %esp,%ebp
c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a2d:	89 04 24             	mov    %eax,(%esp)
c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
c0100a35:	85 c0                	test   %eax,%eax
c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a40:	c7 04 24 3a c8 10 c0 	movl   $0xc010c83a,(%esp)
c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 00             	movzbl (%eax),%eax
c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a6b:	01 ca                	add    %ecx,%edx
c0100a6d:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a84:	01 d0                	add    %edx,%eax
c0100a86:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a8f:	89 d1                	mov    %edx,%ecx
c0100a91:	29 c1                	sub    %eax,%ecx
c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aaf:	c7 04 24 56 c8 10 c0 	movl   $0xc010c856,(%esp)
c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100abb:	c9                   	leave  
c0100abc:	c3                   	ret    

c0100abd <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100abd:	55                   	push   %ebp
c0100abe:	89 e5                	mov    %esp,%ebp
c0100ac0:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100acc:	c9                   	leave  
c0100acd:	c3                   	ret    

c0100ace <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ace:	55                   	push   %ebp
c0100acf:	89 e5                	mov    %esp,%ebp
c0100ad1:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ad4:	89 e8                	mov    %ebp,%eax
c0100ad6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp(), eip = read_eip();
c0100adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100adf:	e8 d9 ff ff ff       	call   c0100abd <read_eip>
c0100ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	int i, j;
	for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100ae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100aee:	e9 88 00 00 00       	jmp    c0100b7b <print_stackframe+0xad>
	    cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b01:	c7 04 24 68 c8 10 c0 	movl   $0xc010c868,(%esp)
c0100b08:	e8 4b f8 ff ff       	call   c0100358 <cprintf>
	    uint32_t *args = (uint32_t *)ebp + 2;
c0100b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b10:	83 c0 08             	add    $0x8,%eax
c0100b13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	    for (j = 0; j < 4; j ++) {
c0100b16:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b1d:	eb 25                	jmp    c0100b44 <print_stackframe+0x76>
	        cprintf("0x%08x ", args[j]);
c0100b1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100b2c:	01 d0                	add    %edx,%eax
c0100b2e:	8b 00                	mov    (%eax),%eax
c0100b30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b34:	c7 04 24 84 c8 10 c0 	movl   $0xc010c884,(%esp)
c0100b3b:	e8 18 f8 ff ff       	call   c0100358 <cprintf>

	int i, j;
	for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
	    cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
	    uint32_t *args = (uint32_t *)ebp + 2;
	    for (j = 0; j < 4; j ++) {
c0100b40:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b44:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b48:	7e d5                	jle    c0100b1f <print_stackframe+0x51>
	        cprintf("0x%08x ", args[j]);
	    }
	    cprintf("\n");
c0100b4a:	c7 04 24 8c c8 10 c0 	movl   $0xc010c88c,(%esp)
c0100b51:	e8 02 f8 ff ff       	call   c0100358 <cprintf>
	    print_debuginfo(eip - 1);
c0100b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b59:	83 e8 01             	sub    $0x1,%eax
c0100b5c:	89 04 24             	mov    %eax,(%esp)
c0100b5f:	e8 b6 fe ff ff       	call   c0100a1a <print_debuginfo>
	    eip = ((uint32_t *)ebp)[1];
c0100b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b67:	83 c0 04             	add    $0x4,%eax
c0100b6a:	8b 00                	mov    (%eax),%eax
c0100b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    ebp = ((uint32_t *)ebp)[0];
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	8b 00                	mov    (%eax),%eax
c0100b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
	uint32_t ebp = read_ebp(), eip = read_eip();

	int i, j;
	for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100b77:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b7f:	74 0a                	je     c0100b8b <print_stackframe+0xbd>
c0100b81:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b85:	0f 8e 68 ff ff ff    	jle    c0100af3 <print_stackframe+0x25>
	    cprintf("\n");
	    print_debuginfo(eip - 1);
	    eip = ((uint32_t *)ebp)[1];
	    ebp = ((uint32_t *)ebp)[0];
	}
}
c0100b8b:	c9                   	leave  
c0100b8c:	c3                   	ret    

c0100b8d <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b8d:	55                   	push   %ebp
c0100b8e:	89 e5                	mov    %esp,%ebp
c0100b90:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b9a:	eb 0c                	jmp    c0100ba8 <parse+0x1b>
            *buf ++ = '\0';
c0100b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b9f:	8d 50 01             	lea    0x1(%eax),%edx
c0100ba2:	89 55 08             	mov    %edx,0x8(%ebp)
c0100ba5:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bab:	0f b6 00             	movzbl (%eax),%eax
c0100bae:	84 c0                	test   %al,%al
c0100bb0:	74 1d                	je     c0100bcf <parse+0x42>
c0100bb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb5:	0f b6 00             	movzbl (%eax),%eax
c0100bb8:	0f be c0             	movsbl %al,%eax
c0100bbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bbf:	c7 04 24 10 c9 10 c0 	movl   $0xc010c910,(%esp)
c0100bc6:	e8 b7 b7 00 00       	call   c010c382 <strchr>
c0100bcb:	85 c0                	test   %eax,%eax
c0100bcd:	75 cd                	jne    c0100b9c <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd2:	0f b6 00             	movzbl (%eax),%eax
c0100bd5:	84 c0                	test   %al,%al
c0100bd7:	75 02                	jne    c0100bdb <parse+0x4e>
            break;
c0100bd9:	eb 67                	jmp    c0100c42 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bdb:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bdf:	75 14                	jne    c0100bf5 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100be1:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100be8:	00 
c0100be9:	c7 04 24 15 c9 10 c0 	movl   $0xc010c915,(%esp)
c0100bf0:	e8 63 f7 ff ff       	call   c0100358 <cprintf>
        }
        argv[argc ++] = buf;
c0100bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf8:	8d 50 01             	lea    0x1(%eax),%edx
c0100bfb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100bfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c08:	01 c2                	add    %eax,%edx
c0100c0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c0d:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c0f:	eb 04                	jmp    c0100c15 <parse+0x88>
            buf ++;
c0100c11:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c18:	0f b6 00             	movzbl (%eax),%eax
c0100c1b:	84 c0                	test   %al,%al
c0100c1d:	74 1d                	je     c0100c3c <parse+0xaf>
c0100c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c22:	0f b6 00             	movzbl (%eax),%eax
c0100c25:	0f be c0             	movsbl %al,%eax
c0100c28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c2c:	c7 04 24 10 c9 10 c0 	movl   $0xc010c910,(%esp)
c0100c33:	e8 4a b7 00 00       	call   c010c382 <strchr>
c0100c38:	85 c0                	test   %eax,%eax
c0100c3a:	74 d5                	je     c0100c11 <parse+0x84>
            buf ++;
        }
    }
c0100c3c:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3d:	e9 66 ff ff ff       	jmp    c0100ba8 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c45:	c9                   	leave  
c0100c46:	c3                   	ret    

c0100c47 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c47:	55                   	push   %ebp
c0100c48:	89 e5                	mov    %esp,%ebp
c0100c4a:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c57:	89 04 24             	mov    %eax,(%esp)
c0100c5a:	e8 2e ff ff ff       	call   c0100b8d <parse>
c0100c5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c66:	75 0a                	jne    c0100c72 <runcmd+0x2b>
        return 0;
c0100c68:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c6d:	e9 85 00 00 00       	jmp    c0100cf7 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c79:	eb 5c                	jmp    c0100cd7 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c7b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c81:	89 d0                	mov    %edx,%eax
c0100c83:	01 c0                	add    %eax,%eax
c0100c85:	01 d0                	add    %edx,%eax
c0100c87:	c1 e0 02             	shl    $0x2,%eax
c0100c8a:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100c8f:	8b 00                	mov    (%eax),%eax
c0100c91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c95:	89 04 24             	mov    %eax,(%esp)
c0100c98:	e8 46 b6 00 00       	call   c010c2e3 <strcmp>
c0100c9d:	85 c0                	test   %eax,%eax
c0100c9f:	75 32                	jne    c0100cd3 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100ca1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ca4:	89 d0                	mov    %edx,%eax
c0100ca6:	01 c0                	add    %eax,%eax
c0100ca8:	01 d0                	add    %edx,%eax
c0100caa:	c1 e0 02             	shl    $0x2,%eax
c0100cad:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100cb2:	8b 40 08             	mov    0x8(%eax),%eax
c0100cb5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cb8:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cbb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cbe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cc2:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cc5:	83 c2 04             	add    $0x4,%edx
c0100cc8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100ccc:	89 0c 24             	mov    %ecx,(%esp)
c0100ccf:	ff d0                	call   *%eax
c0100cd1:	eb 24                	jmp    c0100cf7 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cd3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cda:	83 f8 02             	cmp    $0x2,%eax
c0100cdd:	76 9c                	jbe    c0100c7b <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cdf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100ce2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ce6:	c7 04 24 33 c9 10 c0 	movl   $0xc010c933,(%esp)
c0100ced:	e8 66 f6 ff ff       	call   c0100358 <cprintf>
    return 0;
c0100cf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cf7:	c9                   	leave  
c0100cf8:	c3                   	ret    

c0100cf9 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cf9:	55                   	push   %ebp
c0100cfa:	89 e5                	mov    %esp,%ebp
c0100cfc:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100cff:	c7 04 24 4c c9 10 c0 	movl   $0xc010c94c,(%esp)
c0100d06:	e8 4d f6 ff ff       	call   c0100358 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d0b:	c7 04 24 74 c9 10 c0 	movl   $0xc010c974,(%esp)
c0100d12:	e8 41 f6 ff ff       	call   c0100358 <cprintf>

    if (tf != NULL) {
c0100d17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d1b:	74 0b                	je     c0100d28 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d20:	89 04 24             	mov    %eax,(%esp)
c0100d23:	e8 ae 16 00 00       	call   c01023d6 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d28:	c7 04 24 99 c9 10 c0 	movl   $0xc010c999,(%esp)
c0100d2f:	e8 1b f5 ff ff       	call   c010024f <readline>
c0100d34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d3b:	74 18                	je     c0100d55 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d47:	89 04 24             	mov    %eax,(%esp)
c0100d4a:	e8 f8 fe ff ff       	call   c0100c47 <runcmd>
c0100d4f:	85 c0                	test   %eax,%eax
c0100d51:	79 02                	jns    c0100d55 <kmonitor+0x5c>
                break;
c0100d53:	eb 02                	jmp    c0100d57 <kmonitor+0x5e>
            }
        }
    }
c0100d55:	eb d1                	jmp    c0100d28 <kmonitor+0x2f>
}
c0100d57:	c9                   	leave  
c0100d58:	c3                   	ret    

c0100d59 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d59:	55                   	push   %ebp
c0100d5a:	89 e5                	mov    %esp,%ebp
c0100d5c:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d66:	eb 3f                	jmp    c0100da7 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6b:	89 d0                	mov    %edx,%eax
c0100d6d:	01 c0                	add    %eax,%eax
c0100d6f:	01 d0                	add    %edx,%eax
c0100d71:	c1 e0 02             	shl    $0x2,%eax
c0100d74:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100d79:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d7f:	89 d0                	mov    %edx,%eax
c0100d81:	01 c0                	add    %eax,%eax
c0100d83:	01 d0                	add    %edx,%eax
c0100d85:	c1 e0 02             	shl    $0x2,%eax
c0100d88:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100d8d:	8b 00                	mov    (%eax),%eax
c0100d8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d93:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d97:	c7 04 24 9d c9 10 c0 	movl   $0xc010c99d,(%esp)
c0100d9e:	e8 b5 f5 ff ff       	call   c0100358 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100da3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100daa:	83 f8 02             	cmp    $0x2,%eax
c0100dad:	76 b9                	jbe    c0100d68 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100daf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100db4:	c9                   	leave  
c0100db5:	c3                   	ret    

c0100db6 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100db6:	55                   	push   %ebp
c0100db7:	89 e5                	mov    %esp,%ebp
c0100db9:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dbc:	e8 c3 fb ff ff       	call   c0100984 <print_kerninfo>
    return 0;
c0100dc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc6:	c9                   	leave  
c0100dc7:	c3                   	ret    

c0100dc8 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dc8:	55                   	push   %ebp
c0100dc9:	89 e5                	mov    %esp,%ebp
c0100dcb:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100dce:	e8 fb fc ff ff       	call   c0100ace <print_stackframe>
    return 0;
c0100dd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd8:	c9                   	leave  
c0100dd9:	c3                   	ret    

c0100dda <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dda:	55                   	push   %ebp
c0100ddb:	89 e5                	mov    %esp,%ebp
c0100ddd:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100de0:	a1 00 f2 1a c0       	mov    0xc01af200,%eax
c0100de5:	85 c0                	test   %eax,%eax
c0100de7:	74 02                	je     c0100deb <__panic+0x11>
        goto panic_dead;
c0100de9:	eb 48                	jmp    c0100e33 <__panic+0x59>
    }
    is_panic = 1;
c0100deb:	c7 05 00 f2 1a c0 01 	movl   $0x1,0xc01af200
c0100df2:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100df5:	8d 45 14             	lea    0x14(%ebp),%eax
c0100df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100dfb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100dfe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e02:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e09:	c7 04 24 a6 c9 10 c0 	movl   $0xc010c9a6,(%esp)
c0100e10:	e8 43 f5 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e1f:	89 04 24             	mov    %eax,(%esp)
c0100e22:	e8 fe f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e27:	c7 04 24 c2 c9 10 c0 	movl   $0xc010c9c2,(%esp)
c0100e2e:	e8 25 f5 ff ff       	call   c0100358 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100e33:	e8 fa 11 00 00       	call   c0102032 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e38:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e3f:	e8 b5 fe ff ff       	call   c0100cf9 <kmonitor>
    }
c0100e44:	eb f2                	jmp    c0100e38 <__panic+0x5e>

c0100e46 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e46:	55                   	push   %ebp
c0100e47:	89 e5                	mov    %esp,%ebp
c0100e49:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e4c:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e55:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e59:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e60:	c7 04 24 c4 c9 10 c0 	movl   $0xc010c9c4,(%esp)
c0100e67:	e8 ec f4 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e73:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e76:	89 04 24             	mov    %eax,(%esp)
c0100e79:	e8 a7 f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e7e:	c7 04 24 c2 c9 10 c0 	movl   $0xc010c9c2,(%esp)
c0100e85:	e8 ce f4 ff ff       	call   c0100358 <cprintf>
    va_end(ap);
}
c0100e8a:	c9                   	leave  
c0100e8b:	c3                   	ret    

c0100e8c <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e8c:	55                   	push   %ebp
c0100e8d:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e8f:	a1 00 f2 1a c0       	mov    0xc01af200,%eax
}
c0100e94:	5d                   	pop    %ebp
c0100e95:	c3                   	ret    

c0100e96 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e96:	55                   	push   %ebp
c0100e97:	89 e5                	mov    %esp,%ebp
c0100e99:	83 ec 28             	sub    $0x28,%esp
c0100e9c:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100ea2:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ea6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100eaa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100eae:	ee                   	out    %al,(%dx)
c0100eaf:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100eb5:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100eb9:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ebd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ec1:	ee                   	out    %al,(%dx)
c0100ec2:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ec8:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ecc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ed0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ed4:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ed5:	c7 05 78 1e 1b c0 00 	movl   $0x0,0xc01b1e78
c0100edc:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100edf:	c7 04 24 e2 c9 10 c0 	movl   $0xc010c9e2,(%esp)
c0100ee6:	e8 6d f4 ff ff       	call   c0100358 <cprintf>
    pic_enable(IRQ_TIMER);
c0100eeb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100ef2:	e8 99 11 00 00       	call   c0102090 <pic_enable>
}
c0100ef7:	c9                   	leave  
c0100ef8:	c3                   	ret    

c0100ef9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ef9:	55                   	push   %ebp
c0100efa:	89 e5                	mov    %esp,%ebp
c0100efc:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100eff:	9c                   	pushf  
c0100f00:	58                   	pop    %eax
c0100f01:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f07:	25 00 02 00 00       	and    $0x200,%eax
c0100f0c:	85 c0                	test   %eax,%eax
c0100f0e:	74 0c                	je     c0100f1c <__intr_save+0x23>
        intr_disable();
c0100f10:	e8 1d 11 00 00       	call   c0102032 <intr_disable>
        return 1;
c0100f15:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f1a:	eb 05                	jmp    c0100f21 <__intr_save+0x28>
    }
    return 0;
c0100f1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f21:	c9                   	leave  
c0100f22:	c3                   	ret    

c0100f23 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f23:	55                   	push   %ebp
c0100f24:	89 e5                	mov    %esp,%ebp
c0100f26:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f2d:	74 05                	je     c0100f34 <__intr_restore+0x11>
        intr_enable();
c0100f2f:	e8 f8 10 00 00       	call   c010202c <intr_enable>
    }
}
c0100f34:	c9                   	leave  
c0100f35:	c3                   	ret    

c0100f36 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f36:	55                   	push   %ebp
c0100f37:	89 e5                	mov    %esp,%ebp
c0100f39:	83 ec 10             	sub    $0x10,%esp
c0100f3c:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f42:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f46:	89 c2                	mov    %eax,%edx
c0100f48:	ec                   	in     (%dx),%al
c0100f49:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f4c:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f52:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f56:	89 c2                	mov    %eax,%edx
c0100f58:	ec                   	in     (%dx),%al
c0100f59:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f5c:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f62:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f66:	89 c2                	mov    %eax,%edx
c0100f68:	ec                   	in     (%dx),%al
c0100f69:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f6c:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f72:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f76:	89 c2                	mov    %eax,%edx
c0100f78:	ec                   	in     (%dx),%al
c0100f79:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f7c:	c9                   	leave  
c0100f7d:	c3                   	ret    

c0100f7e <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f7e:	55                   	push   %ebp
c0100f7f:	89 e5                	mov    %esp,%ebp
c0100f81:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f84:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f8e:	0f b7 00             	movzwl (%eax),%eax
c0100f91:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100f95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f98:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fa0:	0f b7 00             	movzwl (%eax),%eax
c0100fa3:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fa7:	74 12                	je     c0100fbb <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fa9:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fb0:	66 c7 05 26 f2 1a c0 	movw   $0x3b4,0xc01af226
c0100fb7:	b4 03 
c0100fb9:	eb 13                	jmp    c0100fce <cga_init+0x50>
    } else {
        *cp = was;
c0100fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fbe:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fc2:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fc5:	66 c7 05 26 f2 1a c0 	movw   $0x3d4,0xc01af226
c0100fcc:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fce:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0100fd5:	0f b7 c0             	movzwl %ax,%eax
c0100fd8:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0100fdc:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fe0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fe4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fe8:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fe9:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0100ff0:	83 c0 01             	add    $0x1,%eax
c0100ff3:	0f b7 c0             	movzwl %ax,%eax
c0100ff6:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100ffa:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0100ffe:	89 c2                	mov    %eax,%edx
c0101000:	ec                   	in     (%dx),%al
c0101001:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101004:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101008:	0f b6 c0             	movzbl %al,%eax
c010100b:	c1 e0 08             	shl    $0x8,%eax
c010100e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101011:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0101018:	0f b7 c0             	movzwl %ax,%eax
c010101b:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010101f:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101023:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101027:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010102b:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010102c:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0101033:	83 c0 01             	add    $0x1,%eax
c0101036:	0f b7 c0             	movzwl %ax,%eax
c0101039:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103d:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101041:	89 c2                	mov    %eax,%edx
c0101043:	ec                   	in     (%dx),%al
c0101044:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101047:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010104b:	0f b6 c0             	movzbl %al,%eax
c010104e:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101051:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101054:	a3 20 f2 1a c0       	mov    %eax,0xc01af220
    crt_pos = pos;
c0101059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010105c:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
}
c0101062:	c9                   	leave  
c0101063:	c3                   	ret    

c0101064 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101064:	55                   	push   %ebp
c0101065:	89 e5                	mov    %esp,%ebp
c0101067:	83 ec 48             	sub    $0x48,%esp
c010106a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101070:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101074:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101078:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010107c:	ee                   	out    %al,(%dx)
c010107d:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0101083:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101087:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010108b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010108f:	ee                   	out    %al,(%dx)
c0101090:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0101096:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c010109a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010109e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010a2:	ee                   	out    %al,(%dx)
c01010a3:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010a9:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010ad:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010b1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010b5:	ee                   	out    %al,(%dx)
c01010b6:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010bc:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010c0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010c4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010c8:	ee                   	out    %al,(%dx)
c01010c9:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010cf:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010d3:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010d7:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01010db:	ee                   	out    %al,(%dx)
c01010dc:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010e2:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01010e6:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010ea:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010ee:	ee                   	out    %al,(%dx)
c01010ef:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f5:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01010f9:	89 c2                	mov    %eax,%edx
c01010fb:	ec                   	in     (%dx),%al
c01010fc:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01010ff:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101103:	3c ff                	cmp    $0xff,%al
c0101105:	0f 95 c0             	setne  %al
c0101108:	0f b6 c0             	movzbl %al,%eax
c010110b:	a3 28 f2 1a c0       	mov    %eax,0xc01af228
c0101110:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101116:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c010111a:	89 c2                	mov    %eax,%edx
c010111c:	ec                   	in     (%dx),%al
c010111d:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101120:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101126:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c010112a:	89 c2                	mov    %eax,%edx
c010112c:	ec                   	in     (%dx),%al
c010112d:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101130:	a1 28 f2 1a c0       	mov    0xc01af228,%eax
c0101135:	85 c0                	test   %eax,%eax
c0101137:	74 0c                	je     c0101145 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101139:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101140:	e8 4b 0f 00 00       	call   c0102090 <pic_enable>
    }
}
c0101145:	c9                   	leave  
c0101146:	c3                   	ret    

c0101147 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101147:	55                   	push   %ebp
c0101148:	89 e5                	mov    %esp,%ebp
c010114a:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010114d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101154:	eb 09                	jmp    c010115f <lpt_putc_sub+0x18>
        delay();
c0101156:	e8 db fd ff ff       	call   c0100f36 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010115b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010115f:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101165:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101169:	89 c2                	mov    %eax,%edx
c010116b:	ec                   	in     (%dx),%al
c010116c:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010116f:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101173:	84 c0                	test   %al,%al
c0101175:	78 09                	js     c0101180 <lpt_putc_sub+0x39>
c0101177:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010117e:	7e d6                	jle    c0101156 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101180:	8b 45 08             	mov    0x8(%ebp),%eax
c0101183:	0f b6 c0             	movzbl %al,%eax
c0101186:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c010118c:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010118f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101193:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101197:	ee                   	out    %al,(%dx)
c0101198:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c010119e:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01011a2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011a6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011aa:	ee                   	out    %al,(%dx)
c01011ab:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011b1:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011b5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011b9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011bd:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011be:	c9                   	leave  
c01011bf:	c3                   	ret    

c01011c0 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011c0:	55                   	push   %ebp
c01011c1:	89 e5                	mov    %esp,%ebp
c01011c3:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011c6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011ca:	74 0d                	je     c01011d9 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01011cf:	89 04 24             	mov    %eax,(%esp)
c01011d2:	e8 70 ff ff ff       	call   c0101147 <lpt_putc_sub>
c01011d7:	eb 24                	jmp    c01011fd <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01011d9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011e0:	e8 62 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub(' ');
c01011e5:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01011ec:	e8 56 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub('\b');
c01011f1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011f8:	e8 4a ff ff ff       	call   c0101147 <lpt_putc_sub>
    }
}
c01011fd:	c9                   	leave  
c01011fe:	c3                   	ret    

c01011ff <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01011ff:	55                   	push   %ebp
c0101200:	89 e5                	mov    %esp,%ebp
c0101202:	53                   	push   %ebx
c0101203:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101206:	8b 45 08             	mov    0x8(%ebp),%eax
c0101209:	b0 00                	mov    $0x0,%al
c010120b:	85 c0                	test   %eax,%eax
c010120d:	75 07                	jne    c0101216 <cga_putc+0x17>
        c |= 0x0700;
c010120f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101216:	8b 45 08             	mov    0x8(%ebp),%eax
c0101219:	0f b6 c0             	movzbl %al,%eax
c010121c:	83 f8 0a             	cmp    $0xa,%eax
c010121f:	74 4c                	je     c010126d <cga_putc+0x6e>
c0101221:	83 f8 0d             	cmp    $0xd,%eax
c0101224:	74 57                	je     c010127d <cga_putc+0x7e>
c0101226:	83 f8 08             	cmp    $0x8,%eax
c0101229:	0f 85 88 00 00 00    	jne    c01012b7 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c010122f:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101236:	66 85 c0             	test   %ax,%ax
c0101239:	74 30                	je     c010126b <cga_putc+0x6c>
            crt_pos --;
c010123b:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101242:	83 e8 01             	sub    $0x1,%eax
c0101245:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c010124b:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c0101250:	0f b7 15 24 f2 1a c0 	movzwl 0xc01af224,%edx
c0101257:	0f b7 d2             	movzwl %dx,%edx
c010125a:	01 d2                	add    %edx,%edx
c010125c:	01 c2                	add    %eax,%edx
c010125e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101261:	b0 00                	mov    $0x0,%al
c0101263:	83 c8 20             	or     $0x20,%eax
c0101266:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101269:	eb 72                	jmp    c01012dd <cga_putc+0xde>
c010126b:	eb 70                	jmp    c01012dd <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c010126d:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101274:	83 c0 50             	add    $0x50,%eax
c0101277:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c010127d:	0f b7 1d 24 f2 1a c0 	movzwl 0xc01af224,%ebx
c0101284:	0f b7 0d 24 f2 1a c0 	movzwl 0xc01af224,%ecx
c010128b:	0f b7 c1             	movzwl %cx,%eax
c010128e:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101294:	c1 e8 10             	shr    $0x10,%eax
c0101297:	89 c2                	mov    %eax,%edx
c0101299:	66 c1 ea 06          	shr    $0x6,%dx
c010129d:	89 d0                	mov    %edx,%eax
c010129f:	c1 e0 02             	shl    $0x2,%eax
c01012a2:	01 d0                	add    %edx,%eax
c01012a4:	c1 e0 04             	shl    $0x4,%eax
c01012a7:	29 c1                	sub    %eax,%ecx
c01012a9:	89 ca                	mov    %ecx,%edx
c01012ab:	89 d8                	mov    %ebx,%eax
c01012ad:	29 d0                	sub    %edx,%eax
c01012af:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
        break;
c01012b5:	eb 26                	jmp    c01012dd <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012b7:	8b 0d 20 f2 1a c0    	mov    0xc01af220,%ecx
c01012bd:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c01012c4:	8d 50 01             	lea    0x1(%eax),%edx
c01012c7:	66 89 15 24 f2 1a c0 	mov    %dx,0xc01af224
c01012ce:	0f b7 c0             	movzwl %ax,%eax
c01012d1:	01 c0                	add    %eax,%eax
c01012d3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d9:	66 89 02             	mov    %ax,(%edx)
        break;
c01012dc:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01012dd:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c01012e4:	66 3d cf 07          	cmp    $0x7cf,%ax
c01012e8:	76 5b                	jbe    c0101345 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01012ea:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c01012ef:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01012f5:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c01012fa:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101301:	00 
c0101302:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101306:	89 04 24             	mov    %eax,(%esp)
c0101309:	e8 72 b2 00 00       	call   c010c580 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010130e:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101315:	eb 15                	jmp    c010132c <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101317:	a1 20 f2 1a c0       	mov    0xc01af220,%eax
c010131c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010131f:	01 d2                	add    %edx,%edx
c0101321:	01 d0                	add    %edx,%eax
c0101323:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101328:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010132c:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101333:	7e e2                	jle    c0101317 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101335:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c010133c:	83 e8 50             	sub    $0x50,%eax
c010133f:	66 a3 24 f2 1a c0    	mov    %ax,0xc01af224
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101345:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c010134c:	0f b7 c0             	movzwl %ax,%eax
c010134f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101353:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101357:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010135b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010135f:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101360:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c0101367:	66 c1 e8 08          	shr    $0x8,%ax
c010136b:	0f b6 c0             	movzbl %al,%eax
c010136e:	0f b7 15 26 f2 1a c0 	movzwl 0xc01af226,%edx
c0101375:	83 c2 01             	add    $0x1,%edx
c0101378:	0f b7 d2             	movzwl %dx,%edx
c010137b:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010137f:	88 45 ed             	mov    %al,-0x13(%ebp)
c0101382:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101386:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010138a:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c010138b:	0f b7 05 26 f2 1a c0 	movzwl 0xc01af226,%eax
c0101392:	0f b7 c0             	movzwl %ax,%eax
c0101395:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101399:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c010139d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013a1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013a5:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01013a6:	0f b7 05 24 f2 1a c0 	movzwl 0xc01af224,%eax
c01013ad:	0f b6 c0             	movzbl %al,%eax
c01013b0:	0f b7 15 26 f2 1a c0 	movzwl 0xc01af226,%edx
c01013b7:	83 c2 01             	add    $0x1,%edx
c01013ba:	0f b7 d2             	movzwl %dx,%edx
c01013bd:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013c1:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013c4:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013c8:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013cc:	ee                   	out    %al,(%dx)
}
c01013cd:	83 c4 34             	add    $0x34,%esp
c01013d0:	5b                   	pop    %ebx
c01013d1:	5d                   	pop    %ebp
c01013d2:	c3                   	ret    

c01013d3 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013d3:	55                   	push   %ebp
c01013d4:	89 e5                	mov    %esp,%ebp
c01013d6:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01013e0:	eb 09                	jmp    c01013eb <serial_putc_sub+0x18>
        delay();
c01013e2:	e8 4f fb ff ff       	call   c0100f36 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013e7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01013eb:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013f1:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01013f5:	89 c2                	mov    %eax,%edx
c01013f7:	ec                   	in     (%dx),%al
c01013f8:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01013fb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01013ff:	0f b6 c0             	movzbl %al,%eax
c0101402:	83 e0 20             	and    $0x20,%eax
c0101405:	85 c0                	test   %eax,%eax
c0101407:	75 09                	jne    c0101412 <serial_putc_sub+0x3f>
c0101409:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101410:	7e d0                	jle    c01013e2 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101412:	8b 45 08             	mov    0x8(%ebp),%eax
c0101415:	0f b6 c0             	movzbl %al,%eax
c0101418:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010141e:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101421:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101425:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101429:	ee                   	out    %al,(%dx)
}
c010142a:	c9                   	leave  
c010142b:	c3                   	ret    

c010142c <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010142c:	55                   	push   %ebp
c010142d:	89 e5                	mov    %esp,%ebp
c010142f:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101432:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101436:	74 0d                	je     c0101445 <serial_putc+0x19>
        serial_putc_sub(c);
c0101438:	8b 45 08             	mov    0x8(%ebp),%eax
c010143b:	89 04 24             	mov    %eax,(%esp)
c010143e:	e8 90 ff ff ff       	call   c01013d3 <serial_putc_sub>
c0101443:	eb 24                	jmp    c0101469 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101445:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010144c:	e8 82 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub(' ');
c0101451:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101458:	e8 76 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub('\b');
c010145d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101464:	e8 6a ff ff ff       	call   c01013d3 <serial_putc_sub>
    }
}
c0101469:	c9                   	leave  
c010146a:	c3                   	ret    

c010146b <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c010146b:	55                   	push   %ebp
c010146c:	89 e5                	mov    %esp,%ebp
c010146e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101471:	eb 33                	jmp    c01014a6 <cons_intr+0x3b>
        if (c != 0) {
c0101473:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101477:	74 2d                	je     c01014a6 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101479:	a1 44 f4 1a c0       	mov    0xc01af444,%eax
c010147e:	8d 50 01             	lea    0x1(%eax),%edx
c0101481:	89 15 44 f4 1a c0    	mov    %edx,0xc01af444
c0101487:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010148a:	88 90 40 f2 1a c0    	mov    %dl,-0x3fe50dc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101490:	a1 44 f4 1a c0       	mov    0xc01af444,%eax
c0101495:	3d 00 02 00 00       	cmp    $0x200,%eax
c010149a:	75 0a                	jne    c01014a6 <cons_intr+0x3b>
                cons.wpos = 0;
c010149c:	c7 05 44 f4 1a c0 00 	movl   $0x0,0xc01af444
c01014a3:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01014a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a9:	ff d0                	call   *%eax
c01014ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014ae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014b2:	75 bf                	jne    c0101473 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014b4:	c9                   	leave  
c01014b5:	c3                   	ret    

c01014b6 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014b6:	55                   	push   %ebp
c01014b7:	89 e5                	mov    %esp,%ebp
c01014b9:	83 ec 10             	sub    $0x10,%esp
c01014bc:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014c2:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014c6:	89 c2                	mov    %eax,%edx
c01014c8:	ec                   	in     (%dx),%al
c01014c9:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014cc:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014d0:	0f b6 c0             	movzbl %al,%eax
c01014d3:	83 e0 01             	and    $0x1,%eax
c01014d6:	85 c0                	test   %eax,%eax
c01014d8:	75 07                	jne    c01014e1 <serial_proc_data+0x2b>
        return -1;
c01014da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01014df:	eb 2a                	jmp    c010150b <serial_proc_data+0x55>
c01014e1:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01014eb:	89 c2                	mov    %eax,%edx
c01014ed:	ec                   	in     (%dx),%al
c01014ee:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01014f1:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01014f5:	0f b6 c0             	movzbl %al,%eax
c01014f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01014fb:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01014ff:	75 07                	jne    c0101508 <serial_proc_data+0x52>
        c = '\b';
c0101501:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101508:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010150b:	c9                   	leave  
c010150c:	c3                   	ret    

c010150d <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010150d:	55                   	push   %ebp
c010150e:	89 e5                	mov    %esp,%ebp
c0101510:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101513:	a1 28 f2 1a c0       	mov    0xc01af228,%eax
c0101518:	85 c0                	test   %eax,%eax
c010151a:	74 0c                	je     c0101528 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010151c:	c7 04 24 b6 14 10 c0 	movl   $0xc01014b6,(%esp)
c0101523:	e8 43 ff ff ff       	call   c010146b <cons_intr>
    }
}
c0101528:	c9                   	leave  
c0101529:	c3                   	ret    

c010152a <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010152a:	55                   	push   %ebp
c010152b:	89 e5                	mov    %esp,%ebp
c010152d:	83 ec 38             	sub    $0x38,%esp
c0101530:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101536:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010153a:	89 c2                	mov    %eax,%edx
c010153c:	ec                   	in     (%dx),%al
c010153d:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101540:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101544:	0f b6 c0             	movzbl %al,%eax
c0101547:	83 e0 01             	and    $0x1,%eax
c010154a:	85 c0                	test   %eax,%eax
c010154c:	75 0a                	jne    c0101558 <kbd_proc_data+0x2e>
        return -1;
c010154e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101553:	e9 59 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
c0101558:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010155e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101562:	89 c2                	mov    %eax,%edx
c0101564:	ec                   	in     (%dx),%al
c0101565:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101568:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c010156c:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c010156f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101573:	75 17                	jne    c010158c <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101575:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c010157a:	83 c8 40             	or     $0x40,%eax
c010157d:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
        return 0;
c0101582:	b8 00 00 00 00       	mov    $0x0,%eax
c0101587:	e9 25 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c010158c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101590:	84 c0                	test   %al,%al
c0101592:	79 47                	jns    c01015db <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101594:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c0101599:	83 e0 40             	and    $0x40,%eax
c010159c:	85 c0                	test   %eax,%eax
c010159e:	75 09                	jne    c01015a9 <kbd_proc_data+0x7f>
c01015a0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015a4:	83 e0 7f             	and    $0x7f,%eax
c01015a7:	eb 04                	jmp    c01015ad <kbd_proc_data+0x83>
c01015a9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015ad:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015b0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015b4:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c01015bb:	83 c8 40             	or     $0x40,%eax
c01015be:	0f b6 c0             	movzbl %al,%eax
c01015c1:	f7 d0                	not    %eax
c01015c3:	89 c2                	mov    %eax,%edx
c01015c5:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c01015ca:	21 d0                	and    %edx,%eax
c01015cc:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
        return 0;
c01015d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01015d6:	e9 d6 00 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01015db:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c01015e0:	83 e0 40             	and    $0x40,%eax
c01015e3:	85 c0                	test   %eax,%eax
c01015e5:	74 11                	je     c01015f8 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01015e7:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01015eb:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c01015f0:	83 e0 bf             	and    $0xffffffbf,%eax
c01015f3:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
    }

    shift |= shiftcode[data];
c01015f8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015fc:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c0101603:	0f b6 d0             	movzbl %al,%edx
c0101606:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c010160b:	09 d0                	or     %edx,%eax
c010160d:	a3 48 f4 1a c0       	mov    %eax,0xc01af448
    shift ^= togglecode[data];
c0101612:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101616:	0f b6 80 60 d1 12 c0 	movzbl -0x3fed2ea0(%eax),%eax
c010161d:	0f b6 d0             	movzbl %al,%edx
c0101620:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c0101625:	31 d0                	xor    %edx,%eax
c0101627:	a3 48 f4 1a c0       	mov    %eax,0xc01af448

    c = charcode[shift & (CTL | SHIFT)][data];
c010162c:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c0101631:	83 e0 03             	and    $0x3,%eax
c0101634:	8b 14 85 60 d5 12 c0 	mov    -0x3fed2aa0(,%eax,4),%edx
c010163b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010163f:	01 d0                	add    %edx,%eax
c0101641:	0f b6 00             	movzbl (%eax),%eax
c0101644:	0f b6 c0             	movzbl %al,%eax
c0101647:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c010164a:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c010164f:	83 e0 08             	and    $0x8,%eax
c0101652:	85 c0                	test   %eax,%eax
c0101654:	74 22                	je     c0101678 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101656:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c010165a:	7e 0c                	jle    c0101668 <kbd_proc_data+0x13e>
c010165c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101660:	7f 06                	jg     c0101668 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101662:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101666:	eb 10                	jmp    c0101678 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101668:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c010166c:	7e 0a                	jle    c0101678 <kbd_proc_data+0x14e>
c010166e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101672:	7f 04                	jg     c0101678 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101674:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101678:	a1 48 f4 1a c0       	mov    0xc01af448,%eax
c010167d:	f7 d0                	not    %eax
c010167f:	83 e0 06             	and    $0x6,%eax
c0101682:	85 c0                	test   %eax,%eax
c0101684:	75 28                	jne    c01016ae <kbd_proc_data+0x184>
c0101686:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c010168d:	75 1f                	jne    c01016ae <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c010168f:	c7 04 24 fd c9 10 c0 	movl   $0xc010c9fd,(%esp)
c0101696:	e8 bd ec ff ff       	call   c0100358 <cprintf>
c010169b:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01016a1:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016a5:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016a9:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016ad:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016b1:	c9                   	leave  
c01016b2:	c3                   	ret    

c01016b3 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016b3:	55                   	push   %ebp
c01016b4:	89 e5                	mov    %esp,%ebp
c01016b6:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016b9:	c7 04 24 2a 15 10 c0 	movl   $0xc010152a,(%esp)
c01016c0:	e8 a6 fd ff ff       	call   c010146b <cons_intr>
}
c01016c5:	c9                   	leave  
c01016c6:	c3                   	ret    

c01016c7 <kbd_init>:

static void
kbd_init(void) {
c01016c7:	55                   	push   %ebp
c01016c8:	89 e5                	mov    %esp,%ebp
c01016ca:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016cd:	e8 e1 ff ff ff       	call   c01016b3 <kbd_intr>
    pic_enable(IRQ_KBD);
c01016d2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01016d9:	e8 b2 09 00 00       	call   c0102090 <pic_enable>
}
c01016de:	c9                   	leave  
c01016df:	c3                   	ret    

c01016e0 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01016e0:	55                   	push   %ebp
c01016e1:	89 e5                	mov    %esp,%ebp
c01016e3:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01016e6:	e8 93 f8 ff ff       	call   c0100f7e <cga_init>
    serial_init();
c01016eb:	e8 74 f9 ff ff       	call   c0101064 <serial_init>
    kbd_init();
c01016f0:	e8 d2 ff ff ff       	call   c01016c7 <kbd_init>
    if (!serial_exists) {
c01016f5:	a1 28 f2 1a c0       	mov    0xc01af228,%eax
c01016fa:	85 c0                	test   %eax,%eax
c01016fc:	75 0c                	jne    c010170a <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01016fe:	c7 04 24 09 ca 10 c0 	movl   $0xc010ca09,(%esp)
c0101705:	e8 4e ec ff ff       	call   c0100358 <cprintf>
    }
}
c010170a:	c9                   	leave  
c010170b:	c3                   	ret    

c010170c <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010170c:	55                   	push   %ebp
c010170d:	89 e5                	mov    %esp,%ebp
c010170f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101712:	e8 e2 f7 ff ff       	call   c0100ef9 <__intr_save>
c0101717:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010171a:	8b 45 08             	mov    0x8(%ebp),%eax
c010171d:	89 04 24             	mov    %eax,(%esp)
c0101720:	e8 9b fa ff ff       	call   c01011c0 <lpt_putc>
        cga_putc(c);
c0101725:	8b 45 08             	mov    0x8(%ebp),%eax
c0101728:	89 04 24             	mov    %eax,(%esp)
c010172b:	e8 cf fa ff ff       	call   c01011ff <cga_putc>
        serial_putc(c);
c0101730:	8b 45 08             	mov    0x8(%ebp),%eax
c0101733:	89 04 24             	mov    %eax,(%esp)
c0101736:	e8 f1 fc ff ff       	call   c010142c <serial_putc>
    }
    local_intr_restore(intr_flag);
c010173b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010173e:	89 04 24             	mov    %eax,(%esp)
c0101741:	e8 dd f7 ff ff       	call   c0100f23 <__intr_restore>
}
c0101746:	c9                   	leave  
c0101747:	c3                   	ret    

c0101748 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101748:	55                   	push   %ebp
c0101749:	89 e5                	mov    %esp,%ebp
c010174b:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c010174e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101755:	e8 9f f7 ff ff       	call   c0100ef9 <__intr_save>
c010175a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c010175d:	e8 ab fd ff ff       	call   c010150d <serial_intr>
        kbd_intr();
c0101762:	e8 4c ff ff ff       	call   c01016b3 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101767:	8b 15 40 f4 1a c0    	mov    0xc01af440,%edx
c010176d:	a1 44 f4 1a c0       	mov    0xc01af444,%eax
c0101772:	39 c2                	cmp    %eax,%edx
c0101774:	74 31                	je     c01017a7 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101776:	a1 40 f4 1a c0       	mov    0xc01af440,%eax
c010177b:	8d 50 01             	lea    0x1(%eax),%edx
c010177e:	89 15 40 f4 1a c0    	mov    %edx,0xc01af440
c0101784:	0f b6 80 40 f2 1a c0 	movzbl -0x3fe50dc0(%eax),%eax
c010178b:	0f b6 c0             	movzbl %al,%eax
c010178e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101791:	a1 40 f4 1a c0       	mov    0xc01af440,%eax
c0101796:	3d 00 02 00 00       	cmp    $0x200,%eax
c010179b:	75 0a                	jne    c01017a7 <cons_getc+0x5f>
                cons.rpos = 0;
c010179d:	c7 05 40 f4 1a c0 00 	movl   $0x0,0xc01af440
c01017a4:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017aa:	89 04 24             	mov    %eax,(%esp)
c01017ad:	e8 71 f7 ff ff       	call   c0100f23 <__intr_restore>
    return c;
c01017b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017b5:	c9                   	leave  
c01017b6:	c3                   	ret    

c01017b7 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017b7:	55                   	push   %ebp
c01017b8:	89 e5                	mov    %esp,%ebp
c01017ba:	83 ec 14             	sub    $0x14,%esp
c01017bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01017c0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017c4:	90                   	nop
c01017c5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017c9:	83 c0 07             	add    $0x7,%eax
c01017cc:	0f b7 c0             	movzwl %ax,%eax
c01017cf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017d3:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017d7:	89 c2                	mov    %eax,%edx
c01017d9:	ec                   	in     (%dx),%al
c01017da:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01017dd:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01017e1:	0f b6 c0             	movzbl %al,%eax
c01017e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01017e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ea:	25 80 00 00 00       	and    $0x80,%eax
c01017ef:	85 c0                	test   %eax,%eax
c01017f1:	75 d2                	jne    c01017c5 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01017f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01017f7:	74 11                	je     c010180a <ide_wait_ready+0x53>
c01017f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017fc:	83 e0 21             	and    $0x21,%eax
c01017ff:	85 c0                	test   %eax,%eax
c0101801:	74 07                	je     c010180a <ide_wait_ready+0x53>
        return -1;
c0101803:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101808:	eb 05                	jmp    c010180f <ide_wait_ready+0x58>
    }
    return 0;
c010180a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010180f:	c9                   	leave  
c0101810:	c3                   	ret    

c0101811 <ide_init>:

void
ide_init(void) {
c0101811:	55                   	push   %ebp
c0101812:	89 e5                	mov    %esp,%ebp
c0101814:	57                   	push   %edi
c0101815:	53                   	push   %ebx
c0101816:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c010181c:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101822:	e9 d6 02 00 00       	jmp    c0101afd <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101827:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010182b:	c1 e0 03             	shl    $0x3,%eax
c010182e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101835:	29 c2                	sub    %eax,%edx
c0101837:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c010183d:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101840:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101844:	66 d1 e8             	shr    %ax
c0101847:	0f b7 c0             	movzwl %ax,%eax
c010184a:	0f b7 04 85 28 ca 10 	movzwl -0x3fef35d8(,%eax,4),%eax
c0101851:	c0 
c0101852:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101856:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010185a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101861:	00 
c0101862:	89 04 24             	mov    %eax,(%esp)
c0101865:	e8 4d ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c010186a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010186e:	83 e0 01             	and    $0x1,%eax
c0101871:	c1 e0 04             	shl    $0x4,%eax
c0101874:	83 c8 e0             	or     $0xffffffe0,%eax
c0101877:	0f b6 c0             	movzbl %al,%eax
c010187a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010187e:	83 c2 06             	add    $0x6,%edx
c0101881:	0f b7 d2             	movzwl %dx,%edx
c0101884:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101888:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010188b:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010188f:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101893:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101894:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101898:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010189f:	00 
c01018a0:	89 04 24             	mov    %eax,(%esp)
c01018a3:	e8 0f ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018a8:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ac:	83 c0 07             	add    $0x7,%eax
c01018af:	0f b7 c0             	movzwl %ax,%eax
c01018b2:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018b6:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018ba:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018be:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018c3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018ce:	00 
c01018cf:	89 04 24             	mov    %eax,(%esp)
c01018d2:	e8 e0 fe ff ff       	call   c01017b7 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018d7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018db:	83 c0 07             	add    $0x7,%eax
c01018de:	0f b7 c0             	movzwl %ax,%eax
c01018e1:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018e5:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01018e9:	89 c2                	mov    %eax,%edx
c01018eb:	ec                   	in     (%dx),%al
c01018ec:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01018ef:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01018f3:	84 c0                	test   %al,%al
c01018f5:	0f 84 f7 01 00 00    	je     c0101af2 <ide_init+0x2e1>
c01018fb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ff:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101906:	00 
c0101907:	89 04 24             	mov    %eax,(%esp)
c010190a:	e8 a8 fe ff ff       	call   c01017b7 <ide_wait_ready>
c010190f:	85 c0                	test   %eax,%eax
c0101911:	0f 85 db 01 00 00    	jne    c0101af2 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101917:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010191b:	c1 e0 03             	shl    $0x3,%eax
c010191e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101925:	29 c2                	sub    %eax,%edx
c0101927:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c010192d:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101930:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101934:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101937:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010193d:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101940:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101947:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010194a:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010194d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101950:	89 cb                	mov    %ecx,%ebx
c0101952:	89 df                	mov    %ebx,%edi
c0101954:	89 c1                	mov    %eax,%ecx
c0101956:	fc                   	cld    
c0101957:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101959:	89 c8                	mov    %ecx,%eax
c010195b:	89 fb                	mov    %edi,%ebx
c010195d:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101960:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101963:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101969:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010196c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010196f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101975:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101978:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010197b:	25 00 00 00 04       	and    $0x4000000,%eax
c0101980:	85 c0                	test   %eax,%eax
c0101982:	74 0e                	je     c0101992 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101984:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101987:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010198d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101990:	eb 09                	jmp    c010199b <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101992:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101995:	8b 40 78             	mov    0x78(%eax),%eax
c0101998:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010199b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010199f:	c1 e0 03             	shl    $0x3,%eax
c01019a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019a9:	29 c2                	sub    %eax,%edx
c01019ab:	81 c2 60 f4 1a c0    	add    $0xc01af460,%edx
c01019b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019b4:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019b7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019bb:	c1 e0 03             	shl    $0x3,%eax
c01019be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019c5:	29 c2                	sub    %eax,%edx
c01019c7:	81 c2 60 f4 1a c0    	add    $0xc01af460,%edx
c01019cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019d0:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019d6:	83 c0 62             	add    $0x62,%eax
c01019d9:	0f b7 00             	movzwl (%eax),%eax
c01019dc:	0f b7 c0             	movzwl %ax,%eax
c01019df:	25 00 02 00 00       	and    $0x200,%eax
c01019e4:	85 c0                	test   %eax,%eax
c01019e6:	75 24                	jne    c0101a0c <ide_init+0x1fb>
c01019e8:	c7 44 24 0c 30 ca 10 	movl   $0xc010ca30,0xc(%esp)
c01019ef:	c0 
c01019f0:	c7 44 24 08 73 ca 10 	movl   $0xc010ca73,0x8(%esp)
c01019f7:	c0 
c01019f8:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01019ff:	00 
c0101a00:	c7 04 24 88 ca 10 c0 	movl   $0xc010ca88,(%esp)
c0101a07:	e8 ce f3 ff ff       	call   c0100dda <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a0c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a10:	c1 e0 03             	shl    $0x3,%eax
c0101a13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1a:	29 c2                	sub    %eax,%edx
c0101a1c:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101a22:	83 c0 0c             	add    $0xc,%eax
c0101a25:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a2b:	83 c0 36             	add    $0x36,%eax
c0101a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a31:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a3f:	eb 34                	jmp    c0101a75 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a44:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a47:	01 c2                	add    %eax,%edx
c0101a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a4c:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a4f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a52:	01 c8                	add    %ecx,%eax
c0101a54:	0f b6 00             	movzbl (%eax),%eax
c0101a57:	88 02                	mov    %al,(%edx)
c0101a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a5c:	8d 50 01             	lea    0x1(%eax),%edx
c0101a5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a62:	01 c2                	add    %eax,%edx
c0101a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a67:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a6a:	01 c8                	add    %ecx,%eax
c0101a6c:	0f b6 00             	movzbl (%eax),%eax
c0101a6f:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a71:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a78:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101a7b:	72 c4                	jb     c0101a41 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a80:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a83:	01 d0                	add    %edx,%eax
c0101a85:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101a88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a8b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101a8e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101a91:	85 c0                	test   %eax,%eax
c0101a93:	74 0f                	je     c0101aa4 <ide_init+0x293>
c0101a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a98:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a9b:	01 d0                	add    %edx,%eax
c0101a9d:	0f b6 00             	movzbl (%eax),%eax
c0101aa0:	3c 20                	cmp    $0x20,%al
c0101aa2:	74 d9                	je     c0101a7d <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101aa4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aa8:	c1 e0 03             	shl    $0x3,%eax
c0101aab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ab2:	29 c2                	sub    %eax,%edx
c0101ab4:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101aba:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101abd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ac1:	c1 e0 03             	shl    $0x3,%eax
c0101ac4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101acb:	29 c2                	sub    %eax,%edx
c0101acd:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101ad3:	8b 50 08             	mov    0x8(%eax),%edx
c0101ad6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ada:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101ade:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101ae2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ae6:	c7 04 24 9a ca 10 c0 	movl   $0xc010ca9a,(%esp)
c0101aed:	e8 66 e8 ff ff       	call   c0100358 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101af2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101af6:	83 c0 01             	add    $0x1,%eax
c0101af9:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101afd:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101b02:	0f 86 1f fd ff ff    	jbe    c0101827 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b08:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b0f:	e8 7c 05 00 00       	call   c0102090 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b14:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b1b:	e8 70 05 00 00       	call   c0102090 <pic_enable>
}
c0101b20:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b26:	5b                   	pop    %ebx
c0101b27:	5f                   	pop    %edi
c0101b28:	5d                   	pop    %ebp
c0101b29:	c3                   	ret    

c0101b2a <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b2a:	55                   	push   %ebp
c0101b2b:	89 e5                	mov    %esp,%ebp
c0101b2d:	83 ec 04             	sub    $0x4,%esp
c0101b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b33:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b37:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b3c:	77 24                	ja     c0101b62 <ide_device_valid+0x38>
c0101b3e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b42:	c1 e0 03             	shl    $0x3,%eax
c0101b45:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b4c:	29 c2                	sub    %eax,%edx
c0101b4e:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101b54:	0f b6 00             	movzbl (%eax),%eax
c0101b57:	84 c0                	test   %al,%al
c0101b59:	74 07                	je     c0101b62 <ide_device_valid+0x38>
c0101b5b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b60:	eb 05                	jmp    c0101b67 <ide_device_valid+0x3d>
c0101b62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b67:	c9                   	leave  
c0101b68:	c3                   	ret    

c0101b69 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b69:	55                   	push   %ebp
c0101b6a:	89 e5                	mov    %esp,%ebp
c0101b6c:	83 ec 08             	sub    $0x8,%esp
c0101b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b72:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b76:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b7a:	89 04 24             	mov    %eax,(%esp)
c0101b7d:	e8 a8 ff ff ff       	call   c0101b2a <ide_device_valid>
c0101b82:	85 c0                	test   %eax,%eax
c0101b84:	74 1b                	je     c0101ba1 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101b86:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b8a:	c1 e0 03             	shl    $0x3,%eax
c0101b8d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b94:	29 c2                	sub    %eax,%edx
c0101b96:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101b9c:	8b 40 08             	mov    0x8(%eax),%eax
c0101b9f:	eb 05                	jmp    c0101ba6 <ide_device_size+0x3d>
    }
    return 0;
c0101ba1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101ba6:	c9                   	leave  
c0101ba7:	c3                   	ret    

c0101ba8 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ba8:	55                   	push   %ebp
c0101ba9:	89 e5                	mov    %esp,%ebp
c0101bab:	57                   	push   %edi
c0101bac:	53                   	push   %ebx
c0101bad:	83 ec 50             	sub    $0x50,%esp
c0101bb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bb3:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bb7:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101bbe:	77 24                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc0:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bc5:	77 1d                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bcb:	c1 e0 03             	shl    $0x3,%eax
c0101bce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bd5:	29 c2                	sub    %eax,%edx
c0101bd7:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101bdd:	0f b6 00             	movzbl (%eax),%eax
c0101be0:	84 c0                	test   %al,%al
c0101be2:	75 24                	jne    c0101c08 <ide_read_secs+0x60>
c0101be4:	c7 44 24 0c b8 ca 10 	movl   $0xc010cab8,0xc(%esp)
c0101beb:	c0 
c0101bec:	c7 44 24 08 73 ca 10 	movl   $0xc010ca73,0x8(%esp)
c0101bf3:	c0 
c0101bf4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101bfb:	00 
c0101bfc:	c7 04 24 88 ca 10 c0 	movl   $0xc010ca88,(%esp)
c0101c03:	e8 d2 f1 ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c08:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c0f:	77 0f                	ja     c0101c20 <ide_read_secs+0x78>
c0101c11:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c14:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c17:	01 d0                	add    %edx,%eax
c0101c19:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c1e:	76 24                	jbe    c0101c44 <ide_read_secs+0x9c>
c0101c20:	c7 44 24 0c e0 ca 10 	movl   $0xc010cae0,0xc(%esp)
c0101c27:	c0 
c0101c28:	c7 44 24 08 73 ca 10 	movl   $0xc010ca73,0x8(%esp)
c0101c2f:	c0 
c0101c30:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c37:	00 
c0101c38:	c7 04 24 88 ca 10 c0 	movl   $0xc010ca88,(%esp)
c0101c3f:	e8 96 f1 ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c44:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c48:	66 d1 e8             	shr    %ax
c0101c4b:	0f b7 c0             	movzwl %ax,%eax
c0101c4e:	0f b7 04 85 28 ca 10 	movzwl -0x3fef35d8(,%eax,4),%eax
c0101c55:	c0 
c0101c56:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c5a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c5e:	66 d1 e8             	shr    %ax
c0101c61:	0f b7 c0             	movzwl %ax,%eax
c0101c64:	0f b7 04 85 2a ca 10 	movzwl -0x3fef35d6(,%eax,4),%eax
c0101c6b:	c0 
c0101c6c:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c70:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101c7b:	00 
c0101c7c:	89 04 24             	mov    %eax,(%esp)
c0101c7f:	e8 33 fb ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101c84:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101c88:	83 c0 02             	add    $0x2,%eax
c0101c8b:	0f b7 c0             	movzwl %ax,%eax
c0101c8e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101c92:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c96:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101c9a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101c9e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101c9f:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ca2:	0f b6 c0             	movzbl %al,%eax
c0101ca5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ca9:	83 c2 02             	add    $0x2,%edx
c0101cac:	0f b7 d2             	movzwl %dx,%edx
c0101caf:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cb3:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101cb6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101cba:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101cbe:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cc2:	0f b6 c0             	movzbl %al,%eax
c0101cc5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cc9:	83 c2 03             	add    $0x3,%edx
c0101ccc:	0f b7 d2             	movzwl %dx,%edx
c0101ccf:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101cd3:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101cd6:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101cda:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101cde:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ce2:	c1 e8 08             	shr    $0x8,%eax
c0101ce5:	0f b6 c0             	movzbl %al,%eax
c0101ce8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cec:	83 c2 04             	add    $0x4,%edx
c0101cef:	0f b7 d2             	movzwl %dx,%edx
c0101cf2:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101cf6:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101cf9:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101cfd:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d01:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d05:	c1 e8 10             	shr    $0x10,%eax
c0101d08:	0f b6 c0             	movzbl %al,%eax
c0101d0b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d0f:	83 c2 05             	add    $0x5,%edx
c0101d12:	0f b7 d2             	movzwl %dx,%edx
c0101d15:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d19:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d1c:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d20:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d24:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d25:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d29:	83 e0 01             	and    $0x1,%eax
c0101d2c:	c1 e0 04             	shl    $0x4,%eax
c0101d2f:	89 c2                	mov    %eax,%edx
c0101d31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d34:	c1 e8 18             	shr    $0x18,%eax
c0101d37:	83 e0 0f             	and    $0xf,%eax
c0101d3a:	09 d0                	or     %edx,%eax
c0101d3c:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d3f:	0f b6 c0             	movzbl %al,%eax
c0101d42:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d46:	83 c2 06             	add    $0x6,%edx
c0101d49:	0f b7 d2             	movzwl %dx,%edx
c0101d4c:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d50:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d53:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d57:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d5b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d5c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d60:	83 c0 07             	add    $0x7,%eax
c0101d63:	0f b7 c0             	movzwl %ax,%eax
c0101d66:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d6a:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d6e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d72:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d76:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101d7e:	eb 5a                	jmp    c0101dda <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101d80:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d84:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d8b:	00 
c0101d8c:	89 04 24             	mov    %eax,(%esp)
c0101d8f:	e8 23 fa ff ff       	call   c01017b7 <ide_wait_ready>
c0101d94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101d97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d9b:	74 02                	je     c0101d9f <ide_read_secs+0x1f7>
            goto out;
c0101d9d:	eb 41                	jmp    c0101de0 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101d9f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101da3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101da6:	8b 45 10             	mov    0x10(%ebp),%eax
c0101da9:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dac:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101db3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101db6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101db9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101dbc:	89 cb                	mov    %ecx,%ebx
c0101dbe:	89 df                	mov    %ebx,%edi
c0101dc0:	89 c1                	mov    %eax,%ecx
c0101dc2:	fc                   	cld    
c0101dc3:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dc5:	89 c8                	mov    %ecx,%eax
c0101dc7:	89 fb                	mov    %edi,%ebx
c0101dc9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101dcc:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101dcf:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101dd3:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101dda:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101dde:	75 a0                	jne    c0101d80 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101de3:	83 c4 50             	add    $0x50,%esp
c0101de6:	5b                   	pop    %ebx
c0101de7:	5f                   	pop    %edi
c0101de8:	5d                   	pop    %ebp
c0101de9:	c3                   	ret    

c0101dea <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101dea:	55                   	push   %ebp
c0101deb:	89 e5                	mov    %esp,%ebp
c0101ded:	56                   	push   %esi
c0101dee:	53                   	push   %ebx
c0101def:	83 ec 50             	sub    $0x50,%esp
c0101df2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101df5:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101df9:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101e00:	77 24                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e02:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e07:	77 1d                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e09:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e0d:	c1 e0 03             	shl    $0x3,%eax
c0101e10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e17:	29 c2                	sub    %eax,%edx
c0101e19:	8d 82 60 f4 1a c0    	lea    -0x3fe50ba0(%edx),%eax
c0101e1f:	0f b6 00             	movzbl (%eax),%eax
c0101e22:	84 c0                	test   %al,%al
c0101e24:	75 24                	jne    c0101e4a <ide_write_secs+0x60>
c0101e26:	c7 44 24 0c b8 ca 10 	movl   $0xc010cab8,0xc(%esp)
c0101e2d:	c0 
c0101e2e:	c7 44 24 08 73 ca 10 	movl   $0xc010ca73,0x8(%esp)
c0101e35:	c0 
c0101e36:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e3d:	00 
c0101e3e:	c7 04 24 88 ca 10 c0 	movl   $0xc010ca88,(%esp)
c0101e45:	e8 90 ef ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e4a:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e51:	77 0f                	ja     c0101e62 <ide_write_secs+0x78>
c0101e53:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e56:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e59:	01 d0                	add    %edx,%eax
c0101e5b:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e60:	76 24                	jbe    c0101e86 <ide_write_secs+0x9c>
c0101e62:	c7 44 24 0c e0 ca 10 	movl   $0xc010cae0,0xc(%esp)
c0101e69:	c0 
c0101e6a:	c7 44 24 08 73 ca 10 	movl   $0xc010ca73,0x8(%esp)
c0101e71:	c0 
c0101e72:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101e79:	00 
c0101e7a:	c7 04 24 88 ca 10 c0 	movl   $0xc010ca88,(%esp)
c0101e81:	e8 54 ef ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101e86:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e8a:	66 d1 e8             	shr    %ax
c0101e8d:	0f b7 c0             	movzwl %ax,%eax
c0101e90:	0f b7 04 85 28 ca 10 	movzwl -0x3fef35d8(,%eax,4),%eax
c0101e97:	c0 
c0101e98:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101e9c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ea0:	66 d1 e8             	shr    %ax
c0101ea3:	0f b7 c0             	movzwl %ax,%eax
c0101ea6:	0f b7 04 85 2a ca 10 	movzwl -0x3fef35d6(,%eax,4),%eax
c0101ead:	c0 
c0101eae:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101eb2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101eb6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ebd:	00 
c0101ebe:	89 04 24             	mov    %eax,(%esp)
c0101ec1:	e8 f1 f8 ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101ec6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101eca:	83 c0 02             	add    $0x2,%eax
c0101ecd:	0f b7 c0             	movzwl %ax,%eax
c0101ed0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ed4:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ed8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101edc:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ee0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101ee1:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ee4:	0f b6 c0             	movzbl %al,%eax
c0101ee7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101eeb:	83 c2 02             	add    $0x2,%edx
c0101eee:	0f b7 d2             	movzwl %dx,%edx
c0101ef1:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101ef5:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ef8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101efc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101f00:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101f01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f04:	0f b6 c0             	movzbl %al,%eax
c0101f07:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f0b:	83 c2 03             	add    $0x3,%edx
c0101f0e:	0f b7 d2             	movzwl %dx,%edx
c0101f11:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f15:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f18:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f1c:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f20:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f24:	c1 e8 08             	shr    $0x8,%eax
c0101f27:	0f b6 c0             	movzbl %al,%eax
c0101f2a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f2e:	83 c2 04             	add    $0x4,%edx
c0101f31:	0f b7 d2             	movzwl %dx,%edx
c0101f34:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f38:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f3b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f3f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f43:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f47:	c1 e8 10             	shr    $0x10,%eax
c0101f4a:	0f b6 c0             	movzbl %al,%eax
c0101f4d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f51:	83 c2 05             	add    $0x5,%edx
c0101f54:	0f b7 d2             	movzwl %dx,%edx
c0101f57:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f5b:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f5e:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f62:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f66:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f67:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f6b:	83 e0 01             	and    $0x1,%eax
c0101f6e:	c1 e0 04             	shl    $0x4,%eax
c0101f71:	89 c2                	mov    %eax,%edx
c0101f73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f76:	c1 e8 18             	shr    $0x18,%eax
c0101f79:	83 e0 0f             	and    $0xf,%eax
c0101f7c:	09 d0                	or     %edx,%eax
c0101f7e:	83 c8 e0             	or     $0xffffffe0,%eax
c0101f81:	0f b6 c0             	movzbl %al,%eax
c0101f84:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f88:	83 c2 06             	add    $0x6,%edx
c0101f8b:	0f b7 d2             	movzwl %dx,%edx
c0101f8e:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f92:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101f95:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101f99:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101f9d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101f9e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fa2:	83 c0 07             	add    $0x7,%eax
c0101fa5:	0f b7 c0             	movzwl %ax,%eax
c0101fa8:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fac:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101fb0:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fb4:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fb8:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fc0:	eb 5a                	jmp    c010201c <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fc2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fc6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101fcd:	00 
c0101fce:	89 04 24             	mov    %eax,(%esp)
c0101fd1:	e8 e1 f7 ff ff       	call   c01017b7 <ide_wait_ready>
c0101fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fdd:	74 02                	je     c0101fe1 <ide_write_secs+0x1f7>
            goto out;
c0101fdf:	eb 41                	jmp    c0102022 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101fe1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fe5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101fe8:	8b 45 10             	mov    0x10(%ebp),%eax
c0101feb:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101fee:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101ff5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ff8:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ffb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ffe:	89 cb                	mov    %ecx,%ebx
c0102000:	89 de                	mov    %ebx,%esi
c0102002:	89 c1                	mov    %eax,%ecx
c0102004:	fc                   	cld    
c0102005:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102007:	89 c8                	mov    %ecx,%eax
c0102009:	89 f3                	mov    %esi,%ebx
c010200b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010200e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102011:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102015:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010201c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102020:	75 a0                	jne    c0101fc2 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102022:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102025:	83 c4 50             	add    $0x50,%esp
c0102028:	5b                   	pop    %ebx
c0102029:	5e                   	pop    %esi
c010202a:	5d                   	pop    %ebp
c010202b:	c3                   	ret    

c010202c <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010202c:	55                   	push   %ebp
c010202d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010202f:	fb                   	sti    
    sti();
}
c0102030:	5d                   	pop    %ebp
c0102031:	c3                   	ret    

c0102032 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102032:	55                   	push   %ebp
c0102033:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102035:	fa                   	cli    
    cli();
}
c0102036:	5d                   	pop    %ebp
c0102037:	c3                   	ret    

c0102038 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102038:	55                   	push   %ebp
c0102039:	89 e5                	mov    %esp,%ebp
c010203b:	83 ec 14             	sub    $0x14,%esp
c010203e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102041:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102045:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102049:	66 a3 70 d5 12 c0    	mov    %ax,0xc012d570
    if (did_init) {
c010204f:	a1 40 f5 1a c0       	mov    0xc01af540,%eax
c0102054:	85 c0                	test   %eax,%eax
c0102056:	74 36                	je     c010208e <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102058:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010205c:	0f b6 c0             	movzbl %al,%eax
c010205f:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102065:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102068:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010206c:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102070:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102071:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102075:	66 c1 e8 08          	shr    $0x8,%ax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102082:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102085:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102089:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010208d:	ee                   	out    %al,(%dx)
    }
}
c010208e:	c9                   	leave  
c010208f:	c3                   	ret    

c0102090 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102090:	55                   	push   %ebp
c0102091:	89 e5                	mov    %esp,%ebp
c0102093:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0102096:	8b 45 08             	mov    0x8(%ebp),%eax
c0102099:	ba 01 00 00 00       	mov    $0x1,%edx
c010209e:	89 c1                	mov    %eax,%ecx
c01020a0:	d3 e2                	shl    %cl,%edx
c01020a2:	89 d0                	mov    %edx,%eax
c01020a4:	f7 d0                	not    %eax
c01020a6:	89 c2                	mov    %eax,%edx
c01020a8:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c01020af:	21 d0                	and    %edx,%eax
c01020b1:	0f b7 c0             	movzwl %ax,%eax
c01020b4:	89 04 24             	mov    %eax,(%esp)
c01020b7:	e8 7c ff ff ff       	call   c0102038 <pic_setmask>
}
c01020bc:	c9                   	leave  
c01020bd:	c3                   	ret    

c01020be <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020be:	55                   	push   %ebp
c01020bf:	89 e5                	mov    %esp,%ebp
c01020c1:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020c4:	c7 05 40 f5 1a c0 01 	movl   $0x1,0xc01af540
c01020cb:	00 00 00 
c01020ce:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020d4:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020d8:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020dc:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020e0:	ee                   	out    %al,(%dx)
c01020e1:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020e7:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01020eb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020ef:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020f3:	ee                   	out    %al,(%dx)
c01020f4:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01020fa:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01020fe:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102102:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102106:	ee                   	out    %al,(%dx)
c0102107:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010210d:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102111:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102115:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102119:	ee                   	out    %al,(%dx)
c010211a:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102120:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102124:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102128:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010212c:	ee                   	out    %al,(%dx)
c010212d:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102133:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102137:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010213b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010213f:	ee                   	out    %al,(%dx)
c0102140:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102146:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c010214a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010214e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102152:	ee                   	out    %al,(%dx)
c0102153:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102159:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010215d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102161:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102165:	ee                   	out    %al,(%dx)
c0102166:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010216c:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102170:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102174:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102178:	ee                   	out    %al,(%dx)
c0102179:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010217f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102183:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102187:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010218b:	ee                   	out    %al,(%dx)
c010218c:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102192:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102196:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010219a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010219e:	ee                   	out    %al,(%dx)
c010219f:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01021a5:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021a9:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021ad:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021b1:	ee                   	out    %al,(%dx)
c01021b2:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021b8:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021bc:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021c0:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021c4:	ee                   	out    %al,(%dx)
c01021c5:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021cb:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021cf:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021d3:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021d7:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021d8:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c01021df:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021e3:	74 12                	je     c01021f7 <pic_init+0x139>
        pic_setmask(irq_mask);
c01021e5:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c01021ec:	0f b7 c0             	movzwl %ax,%eax
c01021ef:	89 04 24             	mov    %eax,(%esp)
c01021f2:	e8 41 fe ff ff       	call   c0102038 <pic_setmask>
    }
}
c01021f7:	c9                   	leave  
c01021f8:	c3                   	ret    

c01021f9 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021f9:	55                   	push   %ebp
c01021fa:	89 e5                	mov    %esp,%ebp
c01021fc:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021ff:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102206:	00 
c0102207:	c7 04 24 20 cb 10 c0 	movl   $0xc010cb20,(%esp)
c010220e:	e8 45 e1 ff ff       	call   c0100358 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0102213:	c7 04 24 2a cb 10 c0 	movl   $0xc010cb2a,(%esp)
c010221a:	e8 39 e1 ff ff       	call   c0100358 <cprintf>
//    panic("EOT: kernel seems ok.");
#endif
}
c010221f:	c9                   	leave  
c0102220:	c3                   	ret    

c0102221 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102221:	55                   	push   %ebp
c0102222:	89 e5                	mov    %esp,%ebp
c0102224:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 2013011296 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
	int i;
	for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102227:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010222e:	e9 c3 00 00 00       	jmp    c01022f6 <idt_init+0xd5>
	    SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102233:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102236:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c010223d:	89 c2                	mov    %eax,%edx
c010223f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102242:	66 89 14 c5 60 f5 1a 	mov    %dx,-0x3fe50aa0(,%eax,8)
c0102249:	c0 
c010224a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010224d:	66 c7 04 c5 62 f5 1a 	movw   $0x8,-0x3fe50a9e(,%eax,8)
c0102254:	c0 08 00 
c0102257:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010225a:	0f b6 14 c5 64 f5 1a 	movzbl -0x3fe50a9c(,%eax,8),%edx
c0102261:	c0 
c0102262:	83 e2 e0             	and    $0xffffffe0,%edx
c0102265:	88 14 c5 64 f5 1a c0 	mov    %dl,-0x3fe50a9c(,%eax,8)
c010226c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010226f:	0f b6 14 c5 64 f5 1a 	movzbl -0x3fe50a9c(,%eax,8),%edx
c0102276:	c0 
c0102277:	83 e2 1f             	and    $0x1f,%edx
c010227a:	88 14 c5 64 f5 1a c0 	mov    %dl,-0x3fe50a9c(,%eax,8)
c0102281:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102284:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c010228b:	c0 
c010228c:	83 e2 f0             	and    $0xfffffff0,%edx
c010228f:	83 ca 0e             	or     $0xe,%edx
c0102292:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c0102299:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229c:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c01022a3:	c0 
c01022a4:	83 e2 ef             	and    $0xffffffef,%edx
c01022a7:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c01022ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b1:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c01022b8:	c0 
c01022b9:	83 e2 9f             	and    $0xffffff9f,%edx
c01022bc:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c01022c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c6:	0f b6 14 c5 65 f5 1a 	movzbl -0x3fe50a9b(,%eax,8),%edx
c01022cd:	c0 
c01022ce:	83 ca 80             	or     $0xffffff80,%edx
c01022d1:	88 14 c5 65 f5 1a c0 	mov    %dl,-0x3fe50a9b(,%eax,8)
c01022d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022db:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c01022e2:	c1 e8 10             	shr    $0x10,%eax
c01022e5:	89 c2                	mov    %eax,%edx
c01022e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022ea:	66 89 14 c5 66 f5 1a 	mov    %dx,-0x3fe50a9a(,%eax,8)
c01022f1:	c0 
     /* LAB5 2013011296 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
	extern uintptr_t __vectors[];
	int i;
	for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01022f2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f9:	3d ff 00 00 00       	cmp    $0xff,%eax
c01022fe:	0f 86 2f ff ff ff    	jbe    c0102233 <idt_init+0x12>
	    SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
	}
	SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102304:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c0102309:	66 a3 60 f9 1a c0    	mov    %ax,0xc01af960
c010230f:	66 c7 05 62 f9 1a c0 	movw   $0x8,0xc01af962
c0102316:	08 00 
c0102318:	0f b6 05 64 f9 1a c0 	movzbl 0xc01af964,%eax
c010231f:	83 e0 e0             	and    $0xffffffe0,%eax
c0102322:	a2 64 f9 1a c0       	mov    %al,0xc01af964
c0102327:	0f b6 05 64 f9 1a c0 	movzbl 0xc01af964,%eax
c010232e:	83 e0 1f             	and    $0x1f,%eax
c0102331:	a2 64 f9 1a c0       	mov    %al,0xc01af964
c0102336:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c010233d:	83 c8 0f             	or     $0xf,%eax
c0102340:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c0102345:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c010234c:	83 e0 ef             	and    $0xffffffef,%eax
c010234f:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c0102354:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c010235b:	83 c8 60             	or     $0x60,%eax
c010235e:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c0102363:	0f b6 05 65 f9 1a c0 	movzbl 0xc01af965,%eax
c010236a:	83 c8 80             	or     $0xffffff80,%eax
c010236d:	a2 65 f9 1a c0       	mov    %al,0xc01af965
c0102372:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c0102377:	c1 e8 10             	shr    $0x10,%eax
c010237a:	66 a3 66 f9 1a c0    	mov    %ax,0xc01af966
c0102380:	c7 45 f8 80 d5 12 c0 	movl   $0xc012d580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102387:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010238a:	0f 01 18             	lidtl  (%eax)
	lidt(&idt_pd);
}
c010238d:	c9                   	leave  
c010238e:	c3                   	ret    

c010238f <trapname>:

static const char *
trapname(int trapno) {
c010238f:	55                   	push   %ebp
c0102390:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102392:	8b 45 08             	mov    0x8(%ebp),%eax
c0102395:	83 f8 13             	cmp    $0x13,%eax
c0102398:	77 0c                	ja     c01023a6 <trapname+0x17>
        return excnames[trapno];
c010239a:	8b 45 08             	mov    0x8(%ebp),%eax
c010239d:	8b 04 85 c0 cf 10 c0 	mov    -0x3fef3040(,%eax,4),%eax
c01023a4:	eb 18                	jmp    c01023be <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023a6:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023aa:	7e 0d                	jle    c01023b9 <trapname+0x2a>
c01023ac:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023b0:	7f 07                	jg     c01023b9 <trapname+0x2a>
        return "Hardware Interrupt";
c01023b2:	b8 38 cb 10 c0       	mov    $0xc010cb38,%eax
c01023b7:	eb 05                	jmp    c01023be <trapname+0x2f>
    }
    return "(unknown trap)";
c01023b9:	b8 4b cb 10 c0       	mov    $0xc010cb4b,%eax
}
c01023be:	5d                   	pop    %ebp
c01023bf:	c3                   	ret    

c01023c0 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01023c0:	55                   	push   %ebp
c01023c1:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01023c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01023c6:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01023ca:	66 83 f8 08          	cmp    $0x8,%ax
c01023ce:	0f 94 c0             	sete   %al
c01023d1:	0f b6 c0             	movzbl %al,%eax
}
c01023d4:	5d                   	pop    %ebp
c01023d5:	c3                   	ret    

c01023d6 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01023d6:	55                   	push   %ebp
c01023d7:	89 e5                	mov    %esp,%ebp
c01023d9:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01023dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01023df:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023e3:	c7 04 24 8c cb 10 c0 	movl   $0xc010cb8c,(%esp)
c01023ea:	e8 69 df ff ff       	call   c0100358 <cprintf>
    print_regs(&tf->tf_regs);
c01023ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f2:	89 04 24             	mov    %eax,(%esp)
c01023f5:	e8 a1 01 00 00       	call   c010259b <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01023fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01023fd:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102401:	0f b7 c0             	movzwl %ax,%eax
c0102404:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102408:	c7 04 24 9d cb 10 c0 	movl   $0xc010cb9d,(%esp)
c010240f:	e8 44 df ff ff       	call   c0100358 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102414:	8b 45 08             	mov    0x8(%ebp),%eax
c0102417:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010241b:	0f b7 c0             	movzwl %ax,%eax
c010241e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102422:	c7 04 24 b0 cb 10 c0 	movl   $0xc010cbb0,(%esp)
c0102429:	e8 2a df ff ff       	call   c0100358 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010242e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102431:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102435:	0f b7 c0             	movzwl %ax,%eax
c0102438:	89 44 24 04          	mov    %eax,0x4(%esp)
c010243c:	c7 04 24 c3 cb 10 c0 	movl   $0xc010cbc3,(%esp)
c0102443:	e8 10 df ff ff       	call   c0100358 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102448:	8b 45 08             	mov    0x8(%ebp),%eax
c010244b:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010244f:	0f b7 c0             	movzwl %ax,%eax
c0102452:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102456:	c7 04 24 d6 cb 10 c0 	movl   $0xc010cbd6,(%esp)
c010245d:	e8 f6 de ff ff       	call   c0100358 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102462:	8b 45 08             	mov    0x8(%ebp),%eax
c0102465:	8b 40 30             	mov    0x30(%eax),%eax
c0102468:	89 04 24             	mov    %eax,(%esp)
c010246b:	e8 1f ff ff ff       	call   c010238f <trapname>
c0102470:	8b 55 08             	mov    0x8(%ebp),%edx
c0102473:	8b 52 30             	mov    0x30(%edx),%edx
c0102476:	89 44 24 08          	mov    %eax,0x8(%esp)
c010247a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010247e:	c7 04 24 e9 cb 10 c0 	movl   $0xc010cbe9,(%esp)
c0102485:	e8 ce de ff ff       	call   c0100358 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010248a:	8b 45 08             	mov    0x8(%ebp),%eax
c010248d:	8b 40 34             	mov    0x34(%eax),%eax
c0102490:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102494:	c7 04 24 fb cb 10 c0 	movl   $0xc010cbfb,(%esp)
c010249b:	e8 b8 de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a3:	8b 40 38             	mov    0x38(%eax),%eax
c01024a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024aa:	c7 04 24 0a cc 10 c0 	movl   $0xc010cc0a,(%esp)
c01024b1:	e8 a2 de ff ff       	call   c0100358 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b9:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024bd:	0f b7 c0             	movzwl %ax,%eax
c01024c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024c4:	c7 04 24 19 cc 10 c0 	movl   $0xc010cc19,(%esp)
c01024cb:	e8 88 de ff ff       	call   c0100358 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01024d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d3:	8b 40 40             	mov    0x40(%eax),%eax
c01024d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024da:	c7 04 24 2c cc 10 c0 	movl   $0xc010cc2c,(%esp)
c01024e1:	e8 72 de ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01024e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01024ed:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01024f4:	eb 3e                	jmp    c0102534 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01024f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f9:	8b 50 40             	mov    0x40(%eax),%edx
c01024fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024ff:	21 d0                	and    %edx,%eax
c0102501:	85 c0                	test   %eax,%eax
c0102503:	74 28                	je     c010252d <print_trapframe+0x157>
c0102505:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102508:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c010250f:	85 c0                	test   %eax,%eax
c0102511:	74 1a                	je     c010252d <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102513:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102516:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c010251d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102521:	c7 04 24 3b cc 10 c0 	movl   $0xc010cc3b,(%esp)
c0102528:	e8 2b de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010252d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102531:	d1 65 f0             	shll   -0x10(%ebp)
c0102534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102537:	83 f8 17             	cmp    $0x17,%eax
c010253a:	76 ba                	jbe    c01024f6 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010253c:	8b 45 08             	mov    0x8(%ebp),%eax
c010253f:	8b 40 40             	mov    0x40(%eax),%eax
c0102542:	25 00 30 00 00       	and    $0x3000,%eax
c0102547:	c1 e8 0c             	shr    $0xc,%eax
c010254a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010254e:	c7 04 24 3f cc 10 c0 	movl   $0xc010cc3f,(%esp)
c0102555:	e8 fe dd ff ff       	call   c0100358 <cprintf>

    if (!trap_in_kernel(tf)) {
c010255a:	8b 45 08             	mov    0x8(%ebp),%eax
c010255d:	89 04 24             	mov    %eax,(%esp)
c0102560:	e8 5b fe ff ff       	call   c01023c0 <trap_in_kernel>
c0102565:	85 c0                	test   %eax,%eax
c0102567:	75 30                	jne    c0102599 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102569:	8b 45 08             	mov    0x8(%ebp),%eax
c010256c:	8b 40 44             	mov    0x44(%eax),%eax
c010256f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102573:	c7 04 24 48 cc 10 c0 	movl   $0xc010cc48,(%esp)
c010257a:	e8 d9 dd ff ff       	call   c0100358 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010257f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102582:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102586:	0f b7 c0             	movzwl %ax,%eax
c0102589:	89 44 24 04          	mov    %eax,0x4(%esp)
c010258d:	c7 04 24 57 cc 10 c0 	movl   $0xc010cc57,(%esp)
c0102594:	e8 bf dd ff ff       	call   c0100358 <cprintf>
    }
}
c0102599:	c9                   	leave  
c010259a:	c3                   	ret    

c010259b <print_regs>:

void
print_regs(struct pushregs *regs) {
c010259b:	55                   	push   %ebp
c010259c:	89 e5                	mov    %esp,%ebp
c010259e:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a4:	8b 00                	mov    (%eax),%eax
c01025a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025aa:	c7 04 24 6a cc 10 c0 	movl   $0xc010cc6a,(%esp)
c01025b1:	e8 a2 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b9:	8b 40 04             	mov    0x4(%eax),%eax
c01025bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c0:	c7 04 24 79 cc 10 c0 	movl   $0xc010cc79,(%esp)
c01025c7:	e8 8c dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01025cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01025cf:	8b 40 08             	mov    0x8(%eax),%eax
c01025d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d6:	c7 04 24 88 cc 10 c0 	movl   $0xc010cc88,(%esp)
c01025dd:	e8 76 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01025e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01025e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ec:	c7 04 24 97 cc 10 c0 	movl   $0xc010cc97,(%esp)
c01025f3:	e8 60 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01025f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01025fb:	8b 40 10             	mov    0x10(%eax),%eax
c01025fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102602:	c7 04 24 a6 cc 10 c0 	movl   $0xc010cca6,(%esp)
c0102609:	e8 4a dd ff ff       	call   c0100358 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c010260e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102611:	8b 40 14             	mov    0x14(%eax),%eax
c0102614:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102618:	c7 04 24 b5 cc 10 c0 	movl   $0xc010ccb5,(%esp)
c010261f:	e8 34 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102624:	8b 45 08             	mov    0x8(%ebp),%eax
c0102627:	8b 40 18             	mov    0x18(%eax),%eax
c010262a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010262e:	c7 04 24 c4 cc 10 c0 	movl   $0xc010ccc4,(%esp)
c0102635:	e8 1e dd ff ff       	call   c0100358 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010263a:	8b 45 08             	mov    0x8(%ebp),%eax
c010263d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102640:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102644:	c7 04 24 d3 cc 10 c0 	movl   $0xc010ccd3,(%esp)
c010264b:	e8 08 dd ff ff       	call   c0100358 <cprintf>
}
c0102650:	c9                   	leave  
c0102651:	c3                   	ret    

c0102652 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102652:	55                   	push   %ebp
c0102653:	89 e5                	mov    %esp,%ebp
c0102655:	53                   	push   %ebx
c0102656:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102659:	8b 45 08             	mov    0x8(%ebp),%eax
c010265c:	8b 40 34             	mov    0x34(%eax),%eax
c010265f:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102662:	85 c0                	test   %eax,%eax
c0102664:	74 07                	je     c010266d <print_pgfault+0x1b>
c0102666:	b9 e2 cc 10 c0       	mov    $0xc010cce2,%ecx
c010266b:	eb 05                	jmp    c0102672 <print_pgfault+0x20>
c010266d:	b9 f3 cc 10 c0       	mov    $0xc010ccf3,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102672:	8b 45 08             	mov    0x8(%ebp),%eax
c0102675:	8b 40 34             	mov    0x34(%eax),%eax
c0102678:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010267b:	85 c0                	test   %eax,%eax
c010267d:	74 07                	je     c0102686 <print_pgfault+0x34>
c010267f:	ba 57 00 00 00       	mov    $0x57,%edx
c0102684:	eb 05                	jmp    c010268b <print_pgfault+0x39>
c0102686:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010268b:	8b 45 08             	mov    0x8(%ebp),%eax
c010268e:	8b 40 34             	mov    0x34(%eax),%eax
c0102691:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102694:	85 c0                	test   %eax,%eax
c0102696:	74 07                	je     c010269f <print_pgfault+0x4d>
c0102698:	b8 55 00 00 00       	mov    $0x55,%eax
c010269d:	eb 05                	jmp    c01026a4 <print_pgfault+0x52>
c010269f:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01026a4:	0f 20 d3             	mov    %cr2,%ebx
c01026a7:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01026aa:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01026ad:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01026b1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01026b5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026b9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01026bd:	c7 04 24 04 cd 10 c0 	movl   $0xc010cd04,(%esp)
c01026c4:	e8 8f dc ff ff       	call   c0100358 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01026c9:	83 c4 34             	add    $0x34,%esp
c01026cc:	5b                   	pop    %ebx
c01026cd:	5d                   	pop    %ebp
c01026ce:	c3                   	ret    

c01026cf <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01026cf:	55                   	push   %ebp
c01026d0:	89 e5                	mov    %esp,%ebp
c01026d2:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01026d5:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c01026da:	85 c0                	test   %eax,%eax
c01026dc:	74 0b                	je     c01026e9 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01026de:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e1:	89 04 24             	mov    %eax,(%esp)
c01026e4:	e8 69 ff ff ff       	call   c0102652 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01026e9:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c01026ee:	85 c0                	test   %eax,%eax
c01026f0:	74 3d                	je     c010272f <pgfault_handler+0x60>
        assert(current == idleproc);
c01026f2:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c01026f8:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c01026fd:	39 c2                	cmp    %eax,%edx
c01026ff:	74 24                	je     c0102725 <pgfault_handler+0x56>
c0102701:	c7 44 24 0c 27 cd 10 	movl   $0xc010cd27,0xc(%esp)
c0102708:	c0 
c0102709:	c7 44 24 08 3b cd 10 	movl   $0xc010cd3b,0x8(%esp)
c0102710:	c0 
c0102711:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102718:	00 
c0102719:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c0102720:	e8 b5 e6 ff ff       	call   c0100dda <__panic>
        mm = check_mm_struct;
c0102725:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c010272a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010272d:	eb 46                	jmp    c0102775 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c010272f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102734:	85 c0                	test   %eax,%eax
c0102736:	75 32                	jne    c010276a <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102738:	8b 45 08             	mov    0x8(%ebp),%eax
c010273b:	89 04 24             	mov    %eax,(%esp)
c010273e:	e8 93 fc ff ff       	call   c01023d6 <print_trapframe>
            print_pgfault(tf);
c0102743:	8b 45 08             	mov    0x8(%ebp),%eax
c0102746:	89 04 24             	mov    %eax,(%esp)
c0102749:	e8 04 ff ff ff       	call   c0102652 <print_pgfault>
            panic("unhandled page fault.\n");
c010274e:	c7 44 24 08 61 cd 10 	movl   $0xc010cd61,0x8(%esp)
c0102755:	c0 
c0102756:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c010275d:	00 
c010275e:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c0102765:	e8 70 e6 ff ff       	call   c0100dda <__panic>
        }
        mm = current->mm;
c010276a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010276f:	8b 40 18             	mov    0x18(%eax),%eax
c0102772:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102775:	0f 20 d0             	mov    %cr2,%eax
c0102778:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010277b:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010277e:	89 c2                	mov    %eax,%edx
c0102780:	8b 45 08             	mov    0x8(%ebp),%eax
c0102783:	8b 40 34             	mov    0x34(%eax),%eax
c0102786:	89 54 24 08          	mov    %edx,0x8(%esp)
c010278a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010278e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102791:	89 04 24             	mov    %eax,(%esp)
c0102794:	e8 f6 65 00 00       	call   c0108d8f <do_pgfault>
}
c0102799:	c9                   	leave  
c010279a:	c3                   	ret    

c010279b <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c010279b:	55                   	push   %ebp
c010279c:	89 e5                	mov    %esp,%ebp
c010279e:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01027a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01027a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ab:	8b 40 30             	mov    0x30(%eax),%eax
c01027ae:	83 f8 2f             	cmp    $0x2f,%eax
c01027b1:	77 38                	ja     c01027eb <trap_dispatch+0x50>
c01027b3:	83 f8 2e             	cmp    $0x2e,%eax
c01027b6:	0f 83 07 02 00 00    	jae    c01029c3 <trap_dispatch+0x228>
c01027bc:	83 f8 20             	cmp    $0x20,%eax
c01027bf:	0f 84 07 01 00 00    	je     c01028cc <trap_dispatch+0x131>
c01027c5:	83 f8 20             	cmp    $0x20,%eax
c01027c8:	77 0a                	ja     c01027d4 <trap_dispatch+0x39>
c01027ca:	83 f8 0e             	cmp    $0xe,%eax
c01027cd:	74 3e                	je     c010280d <trap_dispatch+0x72>
c01027cf:	e9 a7 01 00 00       	jmp    c010297b <trap_dispatch+0x1e0>
c01027d4:	83 f8 21             	cmp    $0x21,%eax
c01027d7:	0f 84 5c 01 00 00    	je     c0102939 <trap_dispatch+0x19e>
c01027dd:	83 f8 24             	cmp    $0x24,%eax
c01027e0:	0f 84 2a 01 00 00    	je     c0102910 <trap_dispatch+0x175>
c01027e6:	e9 90 01 00 00       	jmp    c010297b <trap_dispatch+0x1e0>
c01027eb:	83 f8 78             	cmp    $0x78,%eax
c01027ee:	0f 82 87 01 00 00    	jb     c010297b <trap_dispatch+0x1e0>
c01027f4:	83 f8 79             	cmp    $0x79,%eax
c01027f7:	0f 86 62 01 00 00    	jbe    c010295f <trap_dispatch+0x1c4>
c01027fd:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102802:	0f 84 ba 00 00 00    	je     c01028c2 <trap_dispatch+0x127>
c0102808:	e9 6e 01 00 00       	jmp    c010297b <trap_dispatch+0x1e0>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010280d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102810:	89 04 24             	mov    %eax,(%esp)
c0102813:	e8 b7 fe ff ff       	call   c01026cf <pgfault_handler>
c0102818:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010281b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010281f:	0f 84 98 00 00 00    	je     c01028bd <trap_dispatch+0x122>
            print_trapframe(tf);
c0102825:	8b 45 08             	mov    0x8(%ebp),%eax
c0102828:	89 04 24             	mov    %eax,(%esp)
c010282b:	e8 a6 fb ff ff       	call   c01023d6 <print_trapframe>
            if (current == NULL) {
c0102830:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102835:	85 c0                	test   %eax,%eax
c0102837:	75 23                	jne    c010285c <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102839:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010283c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102840:	c7 44 24 08 78 cd 10 	movl   $0xc010cd78,0x8(%esp)
c0102847:	c0 
c0102848:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010284f:	00 
c0102850:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c0102857:	e8 7e e5 ff ff       	call   c0100dda <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c010285c:	8b 45 08             	mov    0x8(%ebp),%eax
c010285f:	89 04 24             	mov    %eax,(%esp)
c0102862:	e8 59 fb ff ff       	call   c01023c0 <trap_in_kernel>
c0102867:	85 c0                	test   %eax,%eax
c0102869:	74 23                	je     c010288e <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010286b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010286e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102872:	c7 44 24 08 98 cd 10 	movl   $0xc010cd98,0x8(%esp)
c0102879:	c0 
c010287a:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0102881:	00 
c0102882:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c0102889:	e8 4c e5 ff ff       	call   c0100dda <__panic>
                }
                cprintf("killed by kernel.\n");
c010288e:	c7 04 24 c6 cd 10 c0 	movl   $0xc010cdc6,(%esp)
c0102895:	e8 be da ff ff       	call   c0100358 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c010289a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010289d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028a1:	c7 44 24 08 dc cd 10 	movl   $0xc010cddc,0x8(%esp)
c01028a8:	c0 
c01028a9:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01028b0:	00 
c01028b1:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c01028b8:	e8 1d e5 ff ff       	call   c0100dda <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01028bd:	e9 02 01 00 00       	jmp    c01029c4 <trap_dispatch+0x229>
    case T_SYSCALL:
        syscall();
c01028c2:	e8 05 91 00 00       	call   c010b9cc <syscall>
        break;
c01028c7:	e9 f8 00 00 00       	jmp    c01029c4 <trap_dispatch+0x229>
        /* LAB6 2013011296 */
        /* you should upate you lab5 code
         * IMPORTANT FUNCTIONS:
	     * sched_class_proc_tick
         */
    	ticks ++;
c01028cc:	a1 78 1e 1b c0       	mov    0xc01b1e78,%eax
c01028d1:	83 c0 01             	add    $0x1,%eax
c01028d4:	a3 78 1e 1b c0       	mov    %eax,0xc01b1e78
        assert(current != NULL);
c01028d9:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01028de:	85 c0                	test   %eax,%eax
c01028e0:	75 24                	jne    c0102906 <trap_dispatch+0x16b>
c01028e2:	c7 44 24 0c 05 ce 10 	movl   $0xc010ce05,0xc(%esp)
c01028e9:	c0 
c01028ea:	c7 44 24 08 3b cd 10 	movl   $0xc010cd3b,0x8(%esp)
c01028f1:	c0 
c01028f2:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c01028f9:	00 
c01028fa:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c0102901:	e8 d4 e4 ff ff       	call   c0100dda <__panic>
        run_timer_list();
c0102906:	e8 2b 8e 00 00       	call   c010b736 <run_timer_list>
        break;
c010290b:	e9 b4 00 00 00       	jmp    c01029c4 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102910:	e8 33 ee ff ff       	call   c0101748 <cons_getc>
c0102915:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0102918:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c010291c:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102920:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102924:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102928:	c7 04 24 15 ce 10 c0 	movl   $0xc010ce15,(%esp)
c010292f:	e8 24 da ff ff       	call   c0100358 <cprintf>
        break;
c0102934:	e9 8b 00 00 00       	jmp    c01029c4 <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102939:	e8 0a ee ff ff       	call   c0101748 <cons_getc>
c010293e:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102941:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102945:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102949:	89 54 24 08          	mov    %edx,0x8(%esp)
c010294d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102951:	c7 04 24 27 ce 10 c0 	movl   $0xc010ce27,(%esp)
c0102958:	e8 fb d9 ff ff       	call   c0100358 <cprintf>
        break;
c010295d:	eb 65                	jmp    c01029c4 <trap_dispatch+0x229>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c010295f:	c7 44 24 08 36 ce 10 	movl   $0xc010ce36,0x8(%esp)
c0102966:	c0 
c0102967:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
c010296e:	00 
c010296f:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c0102976:	e8 5f e4 ff ff       	call   c0100dda <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c010297b:	8b 45 08             	mov    0x8(%ebp),%eax
c010297e:	89 04 24             	mov    %eax,(%esp)
c0102981:	e8 50 fa ff ff       	call   c01023d6 <print_trapframe>
        if (current != NULL) {
c0102986:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010298b:	85 c0                	test   %eax,%eax
c010298d:	74 18                	je     c01029a7 <trap_dispatch+0x20c>
            cprintf("unhandled trap.\n");
c010298f:	c7 04 24 46 ce 10 c0 	movl   $0xc010ce46,(%esp)
c0102996:	e8 bd d9 ff ff       	call   c0100358 <cprintf>
            do_exit(-E_KILLED);
c010299b:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029a2:	e8 e1 75 00 00       	call   c0109f88 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029a7:	c7 44 24 08 57 ce 10 	movl   $0xc010ce57,0x8(%esp)
c01029ae:	c0 
c01029af:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c01029b6:	00 
c01029b7:	c7 04 24 50 cd 10 c0 	movl   $0xc010cd50,(%esp)
c01029be:	e8 17 e4 ff ff       	call   c0100dda <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c01029c3:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c01029c4:	c9                   	leave  
c01029c5:	c3                   	ret    

c01029c6 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c01029c6:	55                   	push   %ebp
c01029c7:	89 e5                	mov    %esp,%ebp
c01029c9:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c01029cc:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01029d1:	85 c0                	test   %eax,%eax
c01029d3:	75 0d                	jne    c01029e2 <trap+0x1c>
        trap_dispatch(tf);
c01029d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01029d8:	89 04 24             	mov    %eax,(%esp)
c01029db:	e8 bb fd ff ff       	call   c010279b <trap_dispatch>
c01029e0:	eb 6c                	jmp    c0102a4e <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c01029e2:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01029e7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01029ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c01029ed:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01029f2:	8b 55 08             	mov    0x8(%ebp),%edx
c01029f5:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c01029f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01029fb:	89 04 24             	mov    %eax,(%esp)
c01029fe:	e8 bd f9 ff ff       	call   c01023c0 <trap_in_kernel>
c0102a03:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a06:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a09:	89 04 24             	mov    %eax,(%esp)
c0102a0c:	e8 8a fd ff ff       	call   c010279b <trap_dispatch>
    
        current->tf = otf;
c0102a11:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a19:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a20:	75 2c                	jne    c0102a4e <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102a22:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102a27:	8b 40 44             	mov    0x44(%eax),%eax
c0102a2a:	83 e0 01             	and    $0x1,%eax
c0102a2d:	85 c0                	test   %eax,%eax
c0102a2f:	74 0c                	je     c0102a3d <trap+0x77>
                do_exit(-E_KILLED);
c0102a31:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a38:	e8 4b 75 00 00       	call   c0109f88 <do_exit>
            }
            if (current->need_resched) {
c0102a3d:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0102a42:	8b 40 10             	mov    0x10(%eax),%eax
c0102a45:	85 c0                	test   %eax,%eax
c0102a47:	74 05                	je     c0102a4e <trap+0x88>
                schedule();
c0102a49:	e8 5b 8a 00 00       	call   c010b4a9 <schedule>
            }
        }
    }
}
c0102a4e:	c9                   	leave  
c0102a4f:	c3                   	ret    

c0102a50 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a50:	1e                   	push   %ds
    pushl %es
c0102a51:	06                   	push   %es
    pushl %fs
c0102a52:	0f a0                	push   %fs
    pushl %gs
c0102a54:	0f a8                	push   %gs
    pushal
c0102a56:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102a57:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102a5c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102a5e:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102a60:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102a61:	e8 60 ff ff ff       	call   c01029c6 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102a66:	5c                   	pop    %esp

c0102a67 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102a67:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102a68:	0f a9                	pop    %gs
    popl %fs
c0102a6a:	0f a1                	pop    %fs
    popl %es
c0102a6c:	07                   	pop    %es
    popl %ds
c0102a6d:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102a6e:	83 c4 08             	add    $0x8,%esp
    iret
c0102a71:	cf                   	iret   

c0102a72 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102a72:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102a76:	e9 ec ff ff ff       	jmp    c0102a67 <__trapret>

c0102a7b <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a7b:	6a 00                	push   $0x0
  pushl $0
c0102a7d:	6a 00                	push   $0x0
  jmp __alltraps
c0102a7f:	e9 cc ff ff ff       	jmp    c0102a50 <__alltraps>

c0102a84 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a84:	6a 00                	push   $0x0
  pushl $1
c0102a86:	6a 01                	push   $0x1
  jmp __alltraps
c0102a88:	e9 c3 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102a8d <vector2>:
.globl vector2
vector2:
  pushl $0
c0102a8d:	6a 00                	push   $0x0
  pushl $2
c0102a8f:	6a 02                	push   $0x2
  jmp __alltraps
c0102a91:	e9 ba ff ff ff       	jmp    c0102a50 <__alltraps>

c0102a96 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102a96:	6a 00                	push   $0x0
  pushl $3
c0102a98:	6a 03                	push   $0x3
  jmp __alltraps
c0102a9a:	e9 b1 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102a9f <vector4>:
.globl vector4
vector4:
  pushl $0
c0102a9f:	6a 00                	push   $0x0
  pushl $4
c0102aa1:	6a 04                	push   $0x4
  jmp __alltraps
c0102aa3:	e9 a8 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102aa8 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102aa8:	6a 00                	push   $0x0
  pushl $5
c0102aaa:	6a 05                	push   $0x5
  jmp __alltraps
c0102aac:	e9 9f ff ff ff       	jmp    c0102a50 <__alltraps>

c0102ab1 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102ab1:	6a 00                	push   $0x0
  pushl $6
c0102ab3:	6a 06                	push   $0x6
  jmp __alltraps
c0102ab5:	e9 96 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102aba <vector7>:
.globl vector7
vector7:
  pushl $0
c0102aba:	6a 00                	push   $0x0
  pushl $7
c0102abc:	6a 07                	push   $0x7
  jmp __alltraps
c0102abe:	e9 8d ff ff ff       	jmp    c0102a50 <__alltraps>

c0102ac3 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102ac3:	6a 08                	push   $0x8
  jmp __alltraps
c0102ac5:	e9 86 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102aca <vector9>:
.globl vector9
vector9:
  pushl $9
c0102aca:	6a 09                	push   $0x9
  jmp __alltraps
c0102acc:	e9 7f ff ff ff       	jmp    c0102a50 <__alltraps>

c0102ad1 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102ad1:	6a 0a                	push   $0xa
  jmp __alltraps
c0102ad3:	e9 78 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102ad8 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102ad8:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ada:	e9 71 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102adf <vector12>:
.globl vector12
vector12:
  pushl $12
c0102adf:	6a 0c                	push   $0xc
  jmp __alltraps
c0102ae1:	e9 6a ff ff ff       	jmp    c0102a50 <__alltraps>

c0102ae6 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102ae6:	6a 0d                	push   $0xd
  jmp __alltraps
c0102ae8:	e9 63 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102aed <vector14>:
.globl vector14
vector14:
  pushl $14
c0102aed:	6a 0e                	push   $0xe
  jmp __alltraps
c0102aef:	e9 5c ff ff ff       	jmp    c0102a50 <__alltraps>

c0102af4 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102af4:	6a 00                	push   $0x0
  pushl $15
c0102af6:	6a 0f                	push   $0xf
  jmp __alltraps
c0102af8:	e9 53 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102afd <vector16>:
.globl vector16
vector16:
  pushl $0
c0102afd:	6a 00                	push   $0x0
  pushl $16
c0102aff:	6a 10                	push   $0x10
  jmp __alltraps
c0102b01:	e9 4a ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b06 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b06:	6a 11                	push   $0x11
  jmp __alltraps
c0102b08:	e9 43 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b0d <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b0d:	6a 00                	push   $0x0
  pushl $18
c0102b0f:	6a 12                	push   $0x12
  jmp __alltraps
c0102b11:	e9 3a ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b16 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b16:	6a 00                	push   $0x0
  pushl $19
c0102b18:	6a 13                	push   $0x13
  jmp __alltraps
c0102b1a:	e9 31 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b1f <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b1f:	6a 00                	push   $0x0
  pushl $20
c0102b21:	6a 14                	push   $0x14
  jmp __alltraps
c0102b23:	e9 28 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b28 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b28:	6a 00                	push   $0x0
  pushl $21
c0102b2a:	6a 15                	push   $0x15
  jmp __alltraps
c0102b2c:	e9 1f ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b31 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b31:	6a 00                	push   $0x0
  pushl $22
c0102b33:	6a 16                	push   $0x16
  jmp __alltraps
c0102b35:	e9 16 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b3a <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b3a:	6a 00                	push   $0x0
  pushl $23
c0102b3c:	6a 17                	push   $0x17
  jmp __alltraps
c0102b3e:	e9 0d ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b43 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b43:	6a 00                	push   $0x0
  pushl $24
c0102b45:	6a 18                	push   $0x18
  jmp __alltraps
c0102b47:	e9 04 ff ff ff       	jmp    c0102a50 <__alltraps>

c0102b4c <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b4c:	6a 00                	push   $0x0
  pushl $25
c0102b4e:	6a 19                	push   $0x19
  jmp __alltraps
c0102b50:	e9 fb fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b55 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b55:	6a 00                	push   $0x0
  pushl $26
c0102b57:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b59:	e9 f2 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b5e <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b5e:	6a 00                	push   $0x0
  pushl $27
c0102b60:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b62:	e9 e9 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b67 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102b67:	6a 00                	push   $0x0
  pushl $28
c0102b69:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102b6b:	e9 e0 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b70 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102b70:	6a 00                	push   $0x0
  pushl $29
c0102b72:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b74:	e9 d7 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b79 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b79:	6a 00                	push   $0x0
  pushl $30
c0102b7b:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b7d:	e9 ce fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b82 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b82:	6a 00                	push   $0x0
  pushl $31
c0102b84:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102b86:	e9 c5 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b8b <vector32>:
.globl vector32
vector32:
  pushl $0
c0102b8b:	6a 00                	push   $0x0
  pushl $32
c0102b8d:	6a 20                	push   $0x20
  jmp __alltraps
c0102b8f:	e9 bc fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b94 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102b94:	6a 00                	push   $0x0
  pushl $33
c0102b96:	6a 21                	push   $0x21
  jmp __alltraps
c0102b98:	e9 b3 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102b9d <vector34>:
.globl vector34
vector34:
  pushl $0
c0102b9d:	6a 00                	push   $0x0
  pushl $34
c0102b9f:	6a 22                	push   $0x22
  jmp __alltraps
c0102ba1:	e9 aa fe ff ff       	jmp    c0102a50 <__alltraps>

c0102ba6 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102ba6:	6a 00                	push   $0x0
  pushl $35
c0102ba8:	6a 23                	push   $0x23
  jmp __alltraps
c0102baa:	e9 a1 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102baf <vector36>:
.globl vector36
vector36:
  pushl $0
c0102baf:	6a 00                	push   $0x0
  pushl $36
c0102bb1:	6a 24                	push   $0x24
  jmp __alltraps
c0102bb3:	e9 98 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102bb8 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bb8:	6a 00                	push   $0x0
  pushl $37
c0102bba:	6a 25                	push   $0x25
  jmp __alltraps
c0102bbc:	e9 8f fe ff ff       	jmp    c0102a50 <__alltraps>

c0102bc1 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102bc1:	6a 00                	push   $0x0
  pushl $38
c0102bc3:	6a 26                	push   $0x26
  jmp __alltraps
c0102bc5:	e9 86 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102bca <vector39>:
.globl vector39
vector39:
  pushl $0
c0102bca:	6a 00                	push   $0x0
  pushl $39
c0102bcc:	6a 27                	push   $0x27
  jmp __alltraps
c0102bce:	e9 7d fe ff ff       	jmp    c0102a50 <__alltraps>

c0102bd3 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102bd3:	6a 00                	push   $0x0
  pushl $40
c0102bd5:	6a 28                	push   $0x28
  jmp __alltraps
c0102bd7:	e9 74 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102bdc <vector41>:
.globl vector41
vector41:
  pushl $0
c0102bdc:	6a 00                	push   $0x0
  pushl $41
c0102bde:	6a 29                	push   $0x29
  jmp __alltraps
c0102be0:	e9 6b fe ff ff       	jmp    c0102a50 <__alltraps>

c0102be5 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102be5:	6a 00                	push   $0x0
  pushl $42
c0102be7:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102be9:	e9 62 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102bee <vector43>:
.globl vector43
vector43:
  pushl $0
c0102bee:	6a 00                	push   $0x0
  pushl $43
c0102bf0:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102bf2:	e9 59 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102bf7 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102bf7:	6a 00                	push   $0x0
  pushl $44
c0102bf9:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102bfb:	e9 50 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c00 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c00:	6a 00                	push   $0x0
  pushl $45
c0102c02:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c04:	e9 47 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c09 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c09:	6a 00                	push   $0x0
  pushl $46
c0102c0b:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c0d:	e9 3e fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c12 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c12:	6a 00                	push   $0x0
  pushl $47
c0102c14:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c16:	e9 35 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c1b <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c1b:	6a 00                	push   $0x0
  pushl $48
c0102c1d:	6a 30                	push   $0x30
  jmp __alltraps
c0102c1f:	e9 2c fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c24 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c24:	6a 00                	push   $0x0
  pushl $49
c0102c26:	6a 31                	push   $0x31
  jmp __alltraps
c0102c28:	e9 23 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c2d <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c2d:	6a 00                	push   $0x0
  pushl $50
c0102c2f:	6a 32                	push   $0x32
  jmp __alltraps
c0102c31:	e9 1a fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c36 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c36:	6a 00                	push   $0x0
  pushl $51
c0102c38:	6a 33                	push   $0x33
  jmp __alltraps
c0102c3a:	e9 11 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c3f <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c3f:	6a 00                	push   $0x0
  pushl $52
c0102c41:	6a 34                	push   $0x34
  jmp __alltraps
c0102c43:	e9 08 fe ff ff       	jmp    c0102a50 <__alltraps>

c0102c48 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c48:	6a 00                	push   $0x0
  pushl $53
c0102c4a:	6a 35                	push   $0x35
  jmp __alltraps
c0102c4c:	e9 ff fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c51 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c51:	6a 00                	push   $0x0
  pushl $54
c0102c53:	6a 36                	push   $0x36
  jmp __alltraps
c0102c55:	e9 f6 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c5a <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c5a:	6a 00                	push   $0x0
  pushl $55
c0102c5c:	6a 37                	push   $0x37
  jmp __alltraps
c0102c5e:	e9 ed fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c63 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c63:	6a 00                	push   $0x0
  pushl $56
c0102c65:	6a 38                	push   $0x38
  jmp __alltraps
c0102c67:	e9 e4 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c6c <vector57>:
.globl vector57
vector57:
  pushl $0
c0102c6c:	6a 00                	push   $0x0
  pushl $57
c0102c6e:	6a 39                	push   $0x39
  jmp __alltraps
c0102c70:	e9 db fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c75 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c75:	6a 00                	push   $0x0
  pushl $58
c0102c77:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c79:	e9 d2 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c7e <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c7e:	6a 00                	push   $0x0
  pushl $59
c0102c80:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c82:	e9 c9 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c87 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102c87:	6a 00                	push   $0x0
  pushl $60
c0102c89:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102c8b:	e9 c0 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c90 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102c90:	6a 00                	push   $0x0
  pushl $61
c0102c92:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102c94:	e9 b7 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102c99 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102c99:	6a 00                	push   $0x0
  pushl $62
c0102c9b:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102c9d:	e9 ae fd ff ff       	jmp    c0102a50 <__alltraps>

c0102ca2 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102ca2:	6a 00                	push   $0x0
  pushl $63
c0102ca4:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102ca6:	e9 a5 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cab <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cab:	6a 00                	push   $0x0
  pushl $64
c0102cad:	6a 40                	push   $0x40
  jmp __alltraps
c0102caf:	e9 9c fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cb4 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cb4:	6a 00                	push   $0x0
  pushl $65
c0102cb6:	6a 41                	push   $0x41
  jmp __alltraps
c0102cb8:	e9 93 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cbd <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cbd:	6a 00                	push   $0x0
  pushl $66
c0102cbf:	6a 42                	push   $0x42
  jmp __alltraps
c0102cc1:	e9 8a fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cc6 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102cc6:	6a 00                	push   $0x0
  pushl $67
c0102cc8:	6a 43                	push   $0x43
  jmp __alltraps
c0102cca:	e9 81 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102ccf <vector68>:
.globl vector68
vector68:
  pushl $0
c0102ccf:	6a 00                	push   $0x0
  pushl $68
c0102cd1:	6a 44                	push   $0x44
  jmp __alltraps
c0102cd3:	e9 78 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cd8 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102cd8:	6a 00                	push   $0x0
  pushl $69
c0102cda:	6a 45                	push   $0x45
  jmp __alltraps
c0102cdc:	e9 6f fd ff ff       	jmp    c0102a50 <__alltraps>

c0102ce1 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102ce1:	6a 00                	push   $0x0
  pushl $70
c0102ce3:	6a 46                	push   $0x46
  jmp __alltraps
c0102ce5:	e9 66 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cea <vector71>:
.globl vector71
vector71:
  pushl $0
c0102cea:	6a 00                	push   $0x0
  pushl $71
c0102cec:	6a 47                	push   $0x47
  jmp __alltraps
c0102cee:	e9 5d fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cf3 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102cf3:	6a 00                	push   $0x0
  pushl $72
c0102cf5:	6a 48                	push   $0x48
  jmp __alltraps
c0102cf7:	e9 54 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102cfc <vector73>:
.globl vector73
vector73:
  pushl $0
c0102cfc:	6a 00                	push   $0x0
  pushl $73
c0102cfe:	6a 49                	push   $0x49
  jmp __alltraps
c0102d00:	e9 4b fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d05 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d05:	6a 00                	push   $0x0
  pushl $74
c0102d07:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d09:	e9 42 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d0e <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d0e:	6a 00                	push   $0x0
  pushl $75
c0102d10:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d12:	e9 39 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d17 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d17:	6a 00                	push   $0x0
  pushl $76
c0102d19:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d1b:	e9 30 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d20 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d20:	6a 00                	push   $0x0
  pushl $77
c0102d22:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d24:	e9 27 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d29 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d29:	6a 00                	push   $0x0
  pushl $78
c0102d2b:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d2d:	e9 1e fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d32 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d32:	6a 00                	push   $0x0
  pushl $79
c0102d34:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d36:	e9 15 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d3b <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d3b:	6a 00                	push   $0x0
  pushl $80
c0102d3d:	6a 50                	push   $0x50
  jmp __alltraps
c0102d3f:	e9 0c fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d44 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d44:	6a 00                	push   $0x0
  pushl $81
c0102d46:	6a 51                	push   $0x51
  jmp __alltraps
c0102d48:	e9 03 fd ff ff       	jmp    c0102a50 <__alltraps>

c0102d4d <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d4d:	6a 00                	push   $0x0
  pushl $82
c0102d4f:	6a 52                	push   $0x52
  jmp __alltraps
c0102d51:	e9 fa fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d56 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d56:	6a 00                	push   $0x0
  pushl $83
c0102d58:	6a 53                	push   $0x53
  jmp __alltraps
c0102d5a:	e9 f1 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d5f <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d5f:	6a 00                	push   $0x0
  pushl $84
c0102d61:	6a 54                	push   $0x54
  jmp __alltraps
c0102d63:	e9 e8 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d68 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102d68:	6a 00                	push   $0x0
  pushl $85
c0102d6a:	6a 55                	push   $0x55
  jmp __alltraps
c0102d6c:	e9 df fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d71 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d71:	6a 00                	push   $0x0
  pushl $86
c0102d73:	6a 56                	push   $0x56
  jmp __alltraps
c0102d75:	e9 d6 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d7a <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d7a:	6a 00                	push   $0x0
  pushl $87
c0102d7c:	6a 57                	push   $0x57
  jmp __alltraps
c0102d7e:	e9 cd fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d83 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d83:	6a 00                	push   $0x0
  pushl $88
c0102d85:	6a 58                	push   $0x58
  jmp __alltraps
c0102d87:	e9 c4 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d8c <vector89>:
.globl vector89
vector89:
  pushl $0
c0102d8c:	6a 00                	push   $0x0
  pushl $89
c0102d8e:	6a 59                	push   $0x59
  jmp __alltraps
c0102d90:	e9 bb fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d95 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102d95:	6a 00                	push   $0x0
  pushl $90
c0102d97:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102d99:	e9 b2 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102d9e <vector91>:
.globl vector91
vector91:
  pushl $0
c0102d9e:	6a 00                	push   $0x0
  pushl $91
c0102da0:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102da2:	e9 a9 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102da7 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102da7:	6a 00                	push   $0x0
  pushl $92
c0102da9:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102dab:	e9 a0 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102db0 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102db0:	6a 00                	push   $0x0
  pushl $93
c0102db2:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102db4:	e9 97 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102db9 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102db9:	6a 00                	push   $0x0
  pushl $94
c0102dbb:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102dbd:	e9 8e fc ff ff       	jmp    c0102a50 <__alltraps>

c0102dc2 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102dc2:	6a 00                	push   $0x0
  pushl $95
c0102dc4:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102dc6:	e9 85 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102dcb <vector96>:
.globl vector96
vector96:
  pushl $0
c0102dcb:	6a 00                	push   $0x0
  pushl $96
c0102dcd:	6a 60                	push   $0x60
  jmp __alltraps
c0102dcf:	e9 7c fc ff ff       	jmp    c0102a50 <__alltraps>

c0102dd4 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102dd4:	6a 00                	push   $0x0
  pushl $97
c0102dd6:	6a 61                	push   $0x61
  jmp __alltraps
c0102dd8:	e9 73 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102ddd <vector98>:
.globl vector98
vector98:
  pushl $0
c0102ddd:	6a 00                	push   $0x0
  pushl $98
c0102ddf:	6a 62                	push   $0x62
  jmp __alltraps
c0102de1:	e9 6a fc ff ff       	jmp    c0102a50 <__alltraps>

c0102de6 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102de6:	6a 00                	push   $0x0
  pushl $99
c0102de8:	6a 63                	push   $0x63
  jmp __alltraps
c0102dea:	e9 61 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102def <vector100>:
.globl vector100
vector100:
  pushl $0
c0102def:	6a 00                	push   $0x0
  pushl $100
c0102df1:	6a 64                	push   $0x64
  jmp __alltraps
c0102df3:	e9 58 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102df8 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102df8:	6a 00                	push   $0x0
  pushl $101
c0102dfa:	6a 65                	push   $0x65
  jmp __alltraps
c0102dfc:	e9 4f fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e01 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e01:	6a 00                	push   $0x0
  pushl $102
c0102e03:	6a 66                	push   $0x66
  jmp __alltraps
c0102e05:	e9 46 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e0a <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e0a:	6a 00                	push   $0x0
  pushl $103
c0102e0c:	6a 67                	push   $0x67
  jmp __alltraps
c0102e0e:	e9 3d fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e13 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e13:	6a 00                	push   $0x0
  pushl $104
c0102e15:	6a 68                	push   $0x68
  jmp __alltraps
c0102e17:	e9 34 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e1c <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e1c:	6a 00                	push   $0x0
  pushl $105
c0102e1e:	6a 69                	push   $0x69
  jmp __alltraps
c0102e20:	e9 2b fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e25 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e25:	6a 00                	push   $0x0
  pushl $106
c0102e27:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e29:	e9 22 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e2e <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e2e:	6a 00                	push   $0x0
  pushl $107
c0102e30:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e32:	e9 19 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e37 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e37:	6a 00                	push   $0x0
  pushl $108
c0102e39:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e3b:	e9 10 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e40 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e40:	6a 00                	push   $0x0
  pushl $109
c0102e42:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e44:	e9 07 fc ff ff       	jmp    c0102a50 <__alltraps>

c0102e49 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e49:	6a 00                	push   $0x0
  pushl $110
c0102e4b:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e4d:	e9 fe fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e52 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e52:	6a 00                	push   $0x0
  pushl $111
c0102e54:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e56:	e9 f5 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e5b <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e5b:	6a 00                	push   $0x0
  pushl $112
c0102e5d:	6a 70                	push   $0x70
  jmp __alltraps
c0102e5f:	e9 ec fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e64 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102e64:	6a 00                	push   $0x0
  pushl $113
c0102e66:	6a 71                	push   $0x71
  jmp __alltraps
c0102e68:	e9 e3 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e6d <vector114>:
.globl vector114
vector114:
  pushl $0
c0102e6d:	6a 00                	push   $0x0
  pushl $114
c0102e6f:	6a 72                	push   $0x72
  jmp __alltraps
c0102e71:	e9 da fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e76 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e76:	6a 00                	push   $0x0
  pushl $115
c0102e78:	6a 73                	push   $0x73
  jmp __alltraps
c0102e7a:	e9 d1 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e7f <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e7f:	6a 00                	push   $0x0
  pushl $116
c0102e81:	6a 74                	push   $0x74
  jmp __alltraps
c0102e83:	e9 c8 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e88 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102e88:	6a 00                	push   $0x0
  pushl $117
c0102e8a:	6a 75                	push   $0x75
  jmp __alltraps
c0102e8c:	e9 bf fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e91 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102e91:	6a 00                	push   $0x0
  pushl $118
c0102e93:	6a 76                	push   $0x76
  jmp __alltraps
c0102e95:	e9 b6 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102e9a <vector119>:
.globl vector119
vector119:
  pushl $0
c0102e9a:	6a 00                	push   $0x0
  pushl $119
c0102e9c:	6a 77                	push   $0x77
  jmp __alltraps
c0102e9e:	e9 ad fb ff ff       	jmp    c0102a50 <__alltraps>

c0102ea3 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102ea3:	6a 00                	push   $0x0
  pushl $120
c0102ea5:	6a 78                	push   $0x78
  jmp __alltraps
c0102ea7:	e9 a4 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102eac <vector121>:
.globl vector121
vector121:
  pushl $0
c0102eac:	6a 00                	push   $0x0
  pushl $121
c0102eae:	6a 79                	push   $0x79
  jmp __alltraps
c0102eb0:	e9 9b fb ff ff       	jmp    c0102a50 <__alltraps>

c0102eb5 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102eb5:	6a 00                	push   $0x0
  pushl $122
c0102eb7:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102eb9:	e9 92 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102ebe <vector123>:
.globl vector123
vector123:
  pushl $0
c0102ebe:	6a 00                	push   $0x0
  pushl $123
c0102ec0:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102ec2:	e9 89 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102ec7 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102ec7:	6a 00                	push   $0x0
  pushl $124
c0102ec9:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102ecb:	e9 80 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102ed0 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102ed0:	6a 00                	push   $0x0
  pushl $125
c0102ed2:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102ed4:	e9 77 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102ed9 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102ed9:	6a 00                	push   $0x0
  pushl $126
c0102edb:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102edd:	e9 6e fb ff ff       	jmp    c0102a50 <__alltraps>

c0102ee2 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102ee2:	6a 00                	push   $0x0
  pushl $127
c0102ee4:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102ee6:	e9 65 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102eeb <vector128>:
.globl vector128
vector128:
  pushl $0
c0102eeb:	6a 00                	push   $0x0
  pushl $128
c0102eed:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102ef2:	e9 59 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102ef7 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102ef7:	6a 00                	push   $0x0
  pushl $129
c0102ef9:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102efe:	e9 4d fb ff ff       	jmp    c0102a50 <__alltraps>

c0102f03 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f03:	6a 00                	push   $0x0
  pushl $130
c0102f05:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f0a:	e9 41 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102f0f <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f0f:	6a 00                	push   $0x0
  pushl $131
c0102f11:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f16:	e9 35 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102f1b <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f1b:	6a 00                	push   $0x0
  pushl $132
c0102f1d:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f22:	e9 29 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102f27 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f27:	6a 00                	push   $0x0
  pushl $133
c0102f29:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f2e:	e9 1d fb ff ff       	jmp    c0102a50 <__alltraps>

c0102f33 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f33:	6a 00                	push   $0x0
  pushl $134
c0102f35:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f3a:	e9 11 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102f3f <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f3f:	6a 00                	push   $0x0
  pushl $135
c0102f41:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f46:	e9 05 fb ff ff       	jmp    c0102a50 <__alltraps>

c0102f4b <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f4b:	6a 00                	push   $0x0
  pushl $136
c0102f4d:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f52:	e9 f9 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102f57 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f57:	6a 00                	push   $0x0
  pushl $137
c0102f59:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f5e:	e9 ed fa ff ff       	jmp    c0102a50 <__alltraps>

c0102f63 <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f63:	6a 00                	push   $0x0
  pushl $138
c0102f65:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102f6a:	e9 e1 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102f6f <vector139>:
.globl vector139
vector139:
  pushl $0
c0102f6f:	6a 00                	push   $0x0
  pushl $139
c0102f71:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f76:	e9 d5 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102f7b <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f7b:	6a 00                	push   $0x0
  pushl $140
c0102f7d:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f82:	e9 c9 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102f87 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102f87:	6a 00                	push   $0x0
  pushl $141
c0102f89:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102f8e:	e9 bd fa ff ff       	jmp    c0102a50 <__alltraps>

c0102f93 <vector142>:
.globl vector142
vector142:
  pushl $0
c0102f93:	6a 00                	push   $0x0
  pushl $142
c0102f95:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102f9a:	e9 b1 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102f9f <vector143>:
.globl vector143
vector143:
  pushl $0
c0102f9f:	6a 00                	push   $0x0
  pushl $143
c0102fa1:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fa6:	e9 a5 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102fab <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fab:	6a 00                	push   $0x0
  pushl $144
c0102fad:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102fb2:	e9 99 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102fb7 <vector145>:
.globl vector145
vector145:
  pushl $0
c0102fb7:	6a 00                	push   $0x0
  pushl $145
c0102fb9:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102fbe:	e9 8d fa ff ff       	jmp    c0102a50 <__alltraps>

c0102fc3 <vector146>:
.globl vector146
vector146:
  pushl $0
c0102fc3:	6a 00                	push   $0x0
  pushl $146
c0102fc5:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102fca:	e9 81 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102fcf <vector147>:
.globl vector147
vector147:
  pushl $0
c0102fcf:	6a 00                	push   $0x0
  pushl $147
c0102fd1:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102fd6:	e9 75 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102fdb <vector148>:
.globl vector148
vector148:
  pushl $0
c0102fdb:	6a 00                	push   $0x0
  pushl $148
c0102fdd:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102fe2:	e9 69 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102fe7 <vector149>:
.globl vector149
vector149:
  pushl $0
c0102fe7:	6a 00                	push   $0x0
  pushl $149
c0102fe9:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0102fee:	e9 5d fa ff ff       	jmp    c0102a50 <__alltraps>

c0102ff3 <vector150>:
.globl vector150
vector150:
  pushl $0
c0102ff3:	6a 00                	push   $0x0
  pushl $150
c0102ff5:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0102ffa:	e9 51 fa ff ff       	jmp    c0102a50 <__alltraps>

c0102fff <vector151>:
.globl vector151
vector151:
  pushl $0
c0102fff:	6a 00                	push   $0x0
  pushl $151
c0103001:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0103006:	e9 45 fa ff ff       	jmp    c0102a50 <__alltraps>

c010300b <vector152>:
.globl vector152
vector152:
  pushl $0
c010300b:	6a 00                	push   $0x0
  pushl $152
c010300d:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0103012:	e9 39 fa ff ff       	jmp    c0102a50 <__alltraps>

c0103017 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103017:	6a 00                	push   $0x0
  pushl $153
c0103019:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c010301e:	e9 2d fa ff ff       	jmp    c0102a50 <__alltraps>

c0103023 <vector154>:
.globl vector154
vector154:
  pushl $0
c0103023:	6a 00                	push   $0x0
  pushl $154
c0103025:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c010302a:	e9 21 fa ff ff       	jmp    c0102a50 <__alltraps>

c010302f <vector155>:
.globl vector155
vector155:
  pushl $0
c010302f:	6a 00                	push   $0x0
  pushl $155
c0103031:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103036:	e9 15 fa ff ff       	jmp    c0102a50 <__alltraps>

c010303b <vector156>:
.globl vector156
vector156:
  pushl $0
c010303b:	6a 00                	push   $0x0
  pushl $156
c010303d:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103042:	e9 09 fa ff ff       	jmp    c0102a50 <__alltraps>

c0103047 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103047:	6a 00                	push   $0x0
  pushl $157
c0103049:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c010304e:	e9 fd f9 ff ff       	jmp    c0102a50 <__alltraps>

c0103053 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103053:	6a 00                	push   $0x0
  pushl $158
c0103055:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010305a:	e9 f1 f9 ff ff       	jmp    c0102a50 <__alltraps>

c010305f <vector159>:
.globl vector159
vector159:
  pushl $0
c010305f:	6a 00                	push   $0x0
  pushl $159
c0103061:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103066:	e9 e5 f9 ff ff       	jmp    c0102a50 <__alltraps>

c010306b <vector160>:
.globl vector160
vector160:
  pushl $0
c010306b:	6a 00                	push   $0x0
  pushl $160
c010306d:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103072:	e9 d9 f9 ff ff       	jmp    c0102a50 <__alltraps>

c0103077 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103077:	6a 00                	push   $0x0
  pushl $161
c0103079:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010307e:	e9 cd f9 ff ff       	jmp    c0102a50 <__alltraps>

c0103083 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103083:	6a 00                	push   $0x0
  pushl $162
c0103085:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010308a:	e9 c1 f9 ff ff       	jmp    c0102a50 <__alltraps>

c010308f <vector163>:
.globl vector163
vector163:
  pushl $0
c010308f:	6a 00                	push   $0x0
  pushl $163
c0103091:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103096:	e9 b5 f9 ff ff       	jmp    c0102a50 <__alltraps>

c010309b <vector164>:
.globl vector164
vector164:
  pushl $0
c010309b:	6a 00                	push   $0x0
  pushl $164
c010309d:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030a2:	e9 a9 f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030a7 <vector165>:
.globl vector165
vector165:
  pushl $0
c01030a7:	6a 00                	push   $0x0
  pushl $165
c01030a9:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030ae:	e9 9d f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030b3 <vector166>:
.globl vector166
vector166:
  pushl $0
c01030b3:	6a 00                	push   $0x0
  pushl $166
c01030b5:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030ba:	e9 91 f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030bf <vector167>:
.globl vector167
vector167:
  pushl $0
c01030bf:	6a 00                	push   $0x0
  pushl $167
c01030c1:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01030c6:	e9 85 f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030cb <vector168>:
.globl vector168
vector168:
  pushl $0
c01030cb:	6a 00                	push   $0x0
  pushl $168
c01030cd:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01030d2:	e9 79 f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030d7 <vector169>:
.globl vector169
vector169:
  pushl $0
c01030d7:	6a 00                	push   $0x0
  pushl $169
c01030d9:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01030de:	e9 6d f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030e3 <vector170>:
.globl vector170
vector170:
  pushl $0
c01030e3:	6a 00                	push   $0x0
  pushl $170
c01030e5:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01030ea:	e9 61 f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030ef <vector171>:
.globl vector171
vector171:
  pushl $0
c01030ef:	6a 00                	push   $0x0
  pushl $171
c01030f1:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01030f6:	e9 55 f9 ff ff       	jmp    c0102a50 <__alltraps>

c01030fb <vector172>:
.globl vector172
vector172:
  pushl $0
c01030fb:	6a 00                	push   $0x0
  pushl $172
c01030fd:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0103102:	e9 49 f9 ff ff       	jmp    c0102a50 <__alltraps>

c0103107 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103107:	6a 00                	push   $0x0
  pushl $173
c0103109:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c010310e:	e9 3d f9 ff ff       	jmp    c0102a50 <__alltraps>

c0103113 <vector174>:
.globl vector174
vector174:
  pushl $0
c0103113:	6a 00                	push   $0x0
  pushl $174
c0103115:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c010311a:	e9 31 f9 ff ff       	jmp    c0102a50 <__alltraps>

c010311f <vector175>:
.globl vector175
vector175:
  pushl $0
c010311f:	6a 00                	push   $0x0
  pushl $175
c0103121:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103126:	e9 25 f9 ff ff       	jmp    c0102a50 <__alltraps>

c010312b <vector176>:
.globl vector176
vector176:
  pushl $0
c010312b:	6a 00                	push   $0x0
  pushl $176
c010312d:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103132:	e9 19 f9 ff ff       	jmp    c0102a50 <__alltraps>

c0103137 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103137:	6a 00                	push   $0x0
  pushl $177
c0103139:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c010313e:	e9 0d f9 ff ff       	jmp    c0102a50 <__alltraps>

c0103143 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103143:	6a 00                	push   $0x0
  pushl $178
c0103145:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c010314a:	e9 01 f9 ff ff       	jmp    c0102a50 <__alltraps>

c010314f <vector179>:
.globl vector179
vector179:
  pushl $0
c010314f:	6a 00                	push   $0x0
  pushl $179
c0103151:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103156:	e9 f5 f8 ff ff       	jmp    c0102a50 <__alltraps>

c010315b <vector180>:
.globl vector180
vector180:
  pushl $0
c010315b:	6a 00                	push   $0x0
  pushl $180
c010315d:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103162:	e9 e9 f8 ff ff       	jmp    c0102a50 <__alltraps>

c0103167 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103167:	6a 00                	push   $0x0
  pushl $181
c0103169:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010316e:	e9 dd f8 ff ff       	jmp    c0102a50 <__alltraps>

c0103173 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103173:	6a 00                	push   $0x0
  pushl $182
c0103175:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010317a:	e9 d1 f8 ff ff       	jmp    c0102a50 <__alltraps>

c010317f <vector183>:
.globl vector183
vector183:
  pushl $0
c010317f:	6a 00                	push   $0x0
  pushl $183
c0103181:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103186:	e9 c5 f8 ff ff       	jmp    c0102a50 <__alltraps>

c010318b <vector184>:
.globl vector184
vector184:
  pushl $0
c010318b:	6a 00                	push   $0x0
  pushl $184
c010318d:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103192:	e9 b9 f8 ff ff       	jmp    c0102a50 <__alltraps>

c0103197 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103197:	6a 00                	push   $0x0
  pushl $185
c0103199:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010319e:	e9 ad f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031a3 <vector186>:
.globl vector186
vector186:
  pushl $0
c01031a3:	6a 00                	push   $0x0
  pushl $186
c01031a5:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031aa:	e9 a1 f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031af <vector187>:
.globl vector187
vector187:
  pushl $0
c01031af:	6a 00                	push   $0x0
  pushl $187
c01031b1:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031b6:	e9 95 f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031bb <vector188>:
.globl vector188
vector188:
  pushl $0
c01031bb:	6a 00                	push   $0x0
  pushl $188
c01031bd:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01031c2:	e9 89 f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031c7 <vector189>:
.globl vector189
vector189:
  pushl $0
c01031c7:	6a 00                	push   $0x0
  pushl $189
c01031c9:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01031ce:	e9 7d f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031d3 <vector190>:
.globl vector190
vector190:
  pushl $0
c01031d3:	6a 00                	push   $0x0
  pushl $190
c01031d5:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01031da:	e9 71 f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031df <vector191>:
.globl vector191
vector191:
  pushl $0
c01031df:	6a 00                	push   $0x0
  pushl $191
c01031e1:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01031e6:	e9 65 f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031eb <vector192>:
.globl vector192
vector192:
  pushl $0
c01031eb:	6a 00                	push   $0x0
  pushl $192
c01031ed:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01031f2:	e9 59 f8 ff ff       	jmp    c0102a50 <__alltraps>

c01031f7 <vector193>:
.globl vector193
vector193:
  pushl $0
c01031f7:	6a 00                	push   $0x0
  pushl $193
c01031f9:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01031fe:	e9 4d f8 ff ff       	jmp    c0102a50 <__alltraps>

c0103203 <vector194>:
.globl vector194
vector194:
  pushl $0
c0103203:	6a 00                	push   $0x0
  pushl $194
c0103205:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c010320a:	e9 41 f8 ff ff       	jmp    c0102a50 <__alltraps>

c010320f <vector195>:
.globl vector195
vector195:
  pushl $0
c010320f:	6a 00                	push   $0x0
  pushl $195
c0103211:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103216:	e9 35 f8 ff ff       	jmp    c0102a50 <__alltraps>

c010321b <vector196>:
.globl vector196
vector196:
  pushl $0
c010321b:	6a 00                	push   $0x0
  pushl $196
c010321d:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0103222:	e9 29 f8 ff ff       	jmp    c0102a50 <__alltraps>

c0103227 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103227:	6a 00                	push   $0x0
  pushl $197
c0103229:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c010322e:	e9 1d f8 ff ff       	jmp    c0102a50 <__alltraps>

c0103233 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103233:	6a 00                	push   $0x0
  pushl $198
c0103235:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c010323a:	e9 11 f8 ff ff       	jmp    c0102a50 <__alltraps>

c010323f <vector199>:
.globl vector199
vector199:
  pushl $0
c010323f:	6a 00                	push   $0x0
  pushl $199
c0103241:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103246:	e9 05 f8 ff ff       	jmp    c0102a50 <__alltraps>

c010324b <vector200>:
.globl vector200
vector200:
  pushl $0
c010324b:	6a 00                	push   $0x0
  pushl $200
c010324d:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103252:	e9 f9 f7 ff ff       	jmp    c0102a50 <__alltraps>

c0103257 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103257:	6a 00                	push   $0x0
  pushl $201
c0103259:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010325e:	e9 ed f7 ff ff       	jmp    c0102a50 <__alltraps>

c0103263 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103263:	6a 00                	push   $0x0
  pushl $202
c0103265:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010326a:	e9 e1 f7 ff ff       	jmp    c0102a50 <__alltraps>

c010326f <vector203>:
.globl vector203
vector203:
  pushl $0
c010326f:	6a 00                	push   $0x0
  pushl $203
c0103271:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103276:	e9 d5 f7 ff ff       	jmp    c0102a50 <__alltraps>

c010327b <vector204>:
.globl vector204
vector204:
  pushl $0
c010327b:	6a 00                	push   $0x0
  pushl $204
c010327d:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103282:	e9 c9 f7 ff ff       	jmp    c0102a50 <__alltraps>

c0103287 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103287:	6a 00                	push   $0x0
  pushl $205
c0103289:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010328e:	e9 bd f7 ff ff       	jmp    c0102a50 <__alltraps>

c0103293 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103293:	6a 00                	push   $0x0
  pushl $206
c0103295:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010329a:	e9 b1 f7 ff ff       	jmp    c0102a50 <__alltraps>

c010329f <vector207>:
.globl vector207
vector207:
  pushl $0
c010329f:	6a 00                	push   $0x0
  pushl $207
c01032a1:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032a6:	e9 a5 f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032ab <vector208>:
.globl vector208
vector208:
  pushl $0
c01032ab:	6a 00                	push   $0x0
  pushl $208
c01032ad:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032b2:	e9 99 f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032b7 <vector209>:
.globl vector209
vector209:
  pushl $0
c01032b7:	6a 00                	push   $0x0
  pushl $209
c01032b9:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032be:	e9 8d f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032c3 <vector210>:
.globl vector210
vector210:
  pushl $0
c01032c3:	6a 00                	push   $0x0
  pushl $210
c01032c5:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01032ca:	e9 81 f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032cf <vector211>:
.globl vector211
vector211:
  pushl $0
c01032cf:	6a 00                	push   $0x0
  pushl $211
c01032d1:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01032d6:	e9 75 f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032db <vector212>:
.globl vector212
vector212:
  pushl $0
c01032db:	6a 00                	push   $0x0
  pushl $212
c01032dd:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01032e2:	e9 69 f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032e7 <vector213>:
.globl vector213
vector213:
  pushl $0
c01032e7:	6a 00                	push   $0x0
  pushl $213
c01032e9:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01032ee:	e9 5d f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032f3 <vector214>:
.globl vector214
vector214:
  pushl $0
c01032f3:	6a 00                	push   $0x0
  pushl $214
c01032f5:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01032fa:	e9 51 f7 ff ff       	jmp    c0102a50 <__alltraps>

c01032ff <vector215>:
.globl vector215
vector215:
  pushl $0
c01032ff:	6a 00                	push   $0x0
  pushl $215
c0103301:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103306:	e9 45 f7 ff ff       	jmp    c0102a50 <__alltraps>

c010330b <vector216>:
.globl vector216
vector216:
  pushl $0
c010330b:	6a 00                	push   $0x0
  pushl $216
c010330d:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0103312:	e9 39 f7 ff ff       	jmp    c0102a50 <__alltraps>

c0103317 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103317:	6a 00                	push   $0x0
  pushl $217
c0103319:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c010331e:	e9 2d f7 ff ff       	jmp    c0102a50 <__alltraps>

c0103323 <vector218>:
.globl vector218
vector218:
  pushl $0
c0103323:	6a 00                	push   $0x0
  pushl $218
c0103325:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c010332a:	e9 21 f7 ff ff       	jmp    c0102a50 <__alltraps>

c010332f <vector219>:
.globl vector219
vector219:
  pushl $0
c010332f:	6a 00                	push   $0x0
  pushl $219
c0103331:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103336:	e9 15 f7 ff ff       	jmp    c0102a50 <__alltraps>

c010333b <vector220>:
.globl vector220
vector220:
  pushl $0
c010333b:	6a 00                	push   $0x0
  pushl $220
c010333d:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103342:	e9 09 f7 ff ff       	jmp    c0102a50 <__alltraps>

c0103347 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103347:	6a 00                	push   $0x0
  pushl $221
c0103349:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010334e:	e9 fd f6 ff ff       	jmp    c0102a50 <__alltraps>

c0103353 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103353:	6a 00                	push   $0x0
  pushl $222
c0103355:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010335a:	e9 f1 f6 ff ff       	jmp    c0102a50 <__alltraps>

c010335f <vector223>:
.globl vector223
vector223:
  pushl $0
c010335f:	6a 00                	push   $0x0
  pushl $223
c0103361:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103366:	e9 e5 f6 ff ff       	jmp    c0102a50 <__alltraps>

c010336b <vector224>:
.globl vector224
vector224:
  pushl $0
c010336b:	6a 00                	push   $0x0
  pushl $224
c010336d:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103372:	e9 d9 f6 ff ff       	jmp    c0102a50 <__alltraps>

c0103377 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103377:	6a 00                	push   $0x0
  pushl $225
c0103379:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010337e:	e9 cd f6 ff ff       	jmp    c0102a50 <__alltraps>

c0103383 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103383:	6a 00                	push   $0x0
  pushl $226
c0103385:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010338a:	e9 c1 f6 ff ff       	jmp    c0102a50 <__alltraps>

c010338f <vector227>:
.globl vector227
vector227:
  pushl $0
c010338f:	6a 00                	push   $0x0
  pushl $227
c0103391:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103396:	e9 b5 f6 ff ff       	jmp    c0102a50 <__alltraps>

c010339b <vector228>:
.globl vector228
vector228:
  pushl $0
c010339b:	6a 00                	push   $0x0
  pushl $228
c010339d:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033a2:	e9 a9 f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033a7 <vector229>:
.globl vector229
vector229:
  pushl $0
c01033a7:	6a 00                	push   $0x0
  pushl $229
c01033a9:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033ae:	e9 9d f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033b3 <vector230>:
.globl vector230
vector230:
  pushl $0
c01033b3:	6a 00                	push   $0x0
  pushl $230
c01033b5:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033ba:	e9 91 f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033bf <vector231>:
.globl vector231
vector231:
  pushl $0
c01033bf:	6a 00                	push   $0x0
  pushl $231
c01033c1:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01033c6:	e9 85 f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033cb <vector232>:
.globl vector232
vector232:
  pushl $0
c01033cb:	6a 00                	push   $0x0
  pushl $232
c01033cd:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01033d2:	e9 79 f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033d7 <vector233>:
.globl vector233
vector233:
  pushl $0
c01033d7:	6a 00                	push   $0x0
  pushl $233
c01033d9:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01033de:	e9 6d f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033e3 <vector234>:
.globl vector234
vector234:
  pushl $0
c01033e3:	6a 00                	push   $0x0
  pushl $234
c01033e5:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01033ea:	e9 61 f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033ef <vector235>:
.globl vector235
vector235:
  pushl $0
c01033ef:	6a 00                	push   $0x0
  pushl $235
c01033f1:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01033f6:	e9 55 f6 ff ff       	jmp    c0102a50 <__alltraps>

c01033fb <vector236>:
.globl vector236
vector236:
  pushl $0
c01033fb:	6a 00                	push   $0x0
  pushl $236
c01033fd:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0103402:	e9 49 f6 ff ff       	jmp    c0102a50 <__alltraps>

c0103407 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103407:	6a 00                	push   $0x0
  pushl $237
c0103409:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c010340e:	e9 3d f6 ff ff       	jmp    c0102a50 <__alltraps>

c0103413 <vector238>:
.globl vector238
vector238:
  pushl $0
c0103413:	6a 00                	push   $0x0
  pushl $238
c0103415:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c010341a:	e9 31 f6 ff ff       	jmp    c0102a50 <__alltraps>

c010341f <vector239>:
.globl vector239
vector239:
  pushl $0
c010341f:	6a 00                	push   $0x0
  pushl $239
c0103421:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103426:	e9 25 f6 ff ff       	jmp    c0102a50 <__alltraps>

c010342b <vector240>:
.globl vector240
vector240:
  pushl $0
c010342b:	6a 00                	push   $0x0
  pushl $240
c010342d:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103432:	e9 19 f6 ff ff       	jmp    c0102a50 <__alltraps>

c0103437 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103437:	6a 00                	push   $0x0
  pushl $241
c0103439:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c010343e:	e9 0d f6 ff ff       	jmp    c0102a50 <__alltraps>

c0103443 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103443:	6a 00                	push   $0x0
  pushl $242
c0103445:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c010344a:	e9 01 f6 ff ff       	jmp    c0102a50 <__alltraps>

c010344f <vector243>:
.globl vector243
vector243:
  pushl $0
c010344f:	6a 00                	push   $0x0
  pushl $243
c0103451:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103456:	e9 f5 f5 ff ff       	jmp    c0102a50 <__alltraps>

c010345b <vector244>:
.globl vector244
vector244:
  pushl $0
c010345b:	6a 00                	push   $0x0
  pushl $244
c010345d:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103462:	e9 e9 f5 ff ff       	jmp    c0102a50 <__alltraps>

c0103467 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103467:	6a 00                	push   $0x0
  pushl $245
c0103469:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010346e:	e9 dd f5 ff ff       	jmp    c0102a50 <__alltraps>

c0103473 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103473:	6a 00                	push   $0x0
  pushl $246
c0103475:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010347a:	e9 d1 f5 ff ff       	jmp    c0102a50 <__alltraps>

c010347f <vector247>:
.globl vector247
vector247:
  pushl $0
c010347f:	6a 00                	push   $0x0
  pushl $247
c0103481:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103486:	e9 c5 f5 ff ff       	jmp    c0102a50 <__alltraps>

c010348b <vector248>:
.globl vector248
vector248:
  pushl $0
c010348b:	6a 00                	push   $0x0
  pushl $248
c010348d:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103492:	e9 b9 f5 ff ff       	jmp    c0102a50 <__alltraps>

c0103497 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103497:	6a 00                	push   $0x0
  pushl $249
c0103499:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010349e:	e9 ad f5 ff ff       	jmp    c0102a50 <__alltraps>

c01034a3 <vector250>:
.globl vector250
vector250:
  pushl $0
c01034a3:	6a 00                	push   $0x0
  pushl $250
c01034a5:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034aa:	e9 a1 f5 ff ff       	jmp    c0102a50 <__alltraps>

c01034af <vector251>:
.globl vector251
vector251:
  pushl $0
c01034af:	6a 00                	push   $0x0
  pushl $251
c01034b1:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034b6:	e9 95 f5 ff ff       	jmp    c0102a50 <__alltraps>

c01034bb <vector252>:
.globl vector252
vector252:
  pushl $0
c01034bb:	6a 00                	push   $0x0
  pushl $252
c01034bd:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01034c2:	e9 89 f5 ff ff       	jmp    c0102a50 <__alltraps>

c01034c7 <vector253>:
.globl vector253
vector253:
  pushl $0
c01034c7:	6a 00                	push   $0x0
  pushl $253
c01034c9:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01034ce:	e9 7d f5 ff ff       	jmp    c0102a50 <__alltraps>

c01034d3 <vector254>:
.globl vector254
vector254:
  pushl $0
c01034d3:	6a 00                	push   $0x0
  pushl $254
c01034d5:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01034da:	e9 71 f5 ff ff       	jmp    c0102a50 <__alltraps>

c01034df <vector255>:
.globl vector255
vector255:
  pushl $0
c01034df:	6a 00                	push   $0x0
  pushl $255
c01034e1:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01034e6:	e9 65 f5 ff ff       	jmp    c0102a50 <__alltraps>

c01034eb <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01034eb:	55                   	push   %ebp
c01034ec:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01034ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01034f1:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c01034f6:	29 c2                	sub    %eax,%edx
c01034f8:	89 d0                	mov    %edx,%eax
c01034fa:	c1 f8 05             	sar    $0x5,%eax
}
c01034fd:	5d                   	pop    %ebp
c01034fe:	c3                   	ret    

c01034ff <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01034ff:	55                   	push   %ebp
c0103500:	89 e5                	mov    %esp,%ebp
c0103502:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0103505:	8b 45 08             	mov    0x8(%ebp),%eax
c0103508:	89 04 24             	mov    %eax,(%esp)
c010350b:	e8 db ff ff ff       	call   c01034eb <page2ppn>
c0103510:	c1 e0 0c             	shl    $0xc,%eax
}
c0103513:	c9                   	leave  
c0103514:	c3                   	ret    

c0103515 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0103515:	55                   	push   %ebp
c0103516:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0103518:	8b 45 08             	mov    0x8(%ebp),%eax
c010351b:	8b 00                	mov    (%eax),%eax
}
c010351d:	5d                   	pop    %ebp
c010351e:	c3                   	ret    

c010351f <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010351f:	55                   	push   %ebp
c0103520:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0103522:	8b 45 08             	mov    0x8(%ebp),%eax
c0103525:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103528:	89 10                	mov    %edx,(%eax)
}
c010352a:	5d                   	pop    %ebp
c010352b:	c3                   	ret    

c010352c <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c010352c:	55                   	push   %ebp
c010352d:	89 e5                	mov    %esp,%ebp
c010352f:	83 ec 10             	sub    $0x10,%esp
c0103532:	c7 45 fc 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103539:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010353c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010353f:	89 50 04             	mov    %edx,0x4(%eax)
c0103542:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103545:	8b 50 04             	mov    0x4(%eax),%edx
c0103548:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010354b:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c010354d:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c0103554:	00 00 00 
}
c0103557:	c9                   	leave  
c0103558:	c3                   	ret    

c0103559 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103559:	55                   	push   %ebp
c010355a:	89 e5                	mov    %esp,%ebp
c010355c:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c010355f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103563:	75 24                	jne    c0103589 <default_init_memmap+0x30>
c0103565:	c7 44 24 0c 10 d0 10 	movl   $0xc010d010,0xc(%esp)
c010356c:	c0 
c010356d:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103574:	c0 
c0103575:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c010357c:	00 
c010357d:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103584:	e8 51 d8 ff ff       	call   c0100dda <__panic>
    struct Page *p = base;
c0103589:	8b 45 08             	mov    0x8(%ebp),%eax
c010358c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010358f:	e9 dc 00 00 00       	jmp    c0103670 <default_init_memmap+0x117>
        assert(PageReserved(p));
c0103594:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103597:	83 c0 04             	add    $0x4,%eax
c010359a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01035a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01035a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01035a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01035aa:	0f a3 10             	bt     %edx,(%eax)
c01035ad:	19 c0                	sbb    %eax,%eax
c01035af:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c01035b2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01035b6:	0f 95 c0             	setne  %al
c01035b9:	0f b6 c0             	movzbl %al,%eax
c01035bc:	85 c0                	test   %eax,%eax
c01035be:	75 24                	jne    c01035e4 <default_init_memmap+0x8b>
c01035c0:	c7 44 24 0c 41 d0 10 	movl   $0xc010d041,0xc(%esp)
c01035c7:	c0 
c01035c8:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01035cf:	c0 
c01035d0:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c01035d7:	00 
c01035d8:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01035df:	e8 f6 d7 ff ff       	call   c0100dda <__panic>
        p->flags = 0;
c01035e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035e7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c01035ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035f1:	83 c0 04             	add    $0x4,%eax
c01035f4:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01035fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01035fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103601:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103604:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c0103607:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010360a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c0103611:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103618:	00 
c0103619:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010361c:	89 04 24             	mov    %eax,(%esp)
c010361f:	e8 fb fe ff ff       	call   c010351f <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c0103624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103627:	83 c0 0c             	add    $0xc,%eax
c010362a:	c7 45 dc 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x24(%ebp)
c0103631:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103634:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103637:	8b 00                	mov    (%eax),%eax
c0103639:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010363c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010363f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103642:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103645:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103648:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010364b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010364e:	89 10                	mov    %edx,(%eax)
c0103650:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103653:	8b 10                	mov    (%eax),%edx
c0103655:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103658:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010365b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010365e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103661:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103664:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103667:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010366a:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010366c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103670:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103673:	c1 e0 05             	shl    $0x5,%eax
c0103676:	89 c2                	mov    %eax,%edx
c0103678:	8b 45 08             	mov    0x8(%ebp),%eax
c010367b:	01 d0                	add    %edx,%eax
c010367d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103680:	0f 85 0e ff ff ff    	jne    c0103594 <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c0103686:	8b 15 84 1e 1b c0    	mov    0xc01b1e84,%edx
c010368c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010368f:	01 d0                	add    %edx,%eax
c0103691:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
    //first block
    base->property = n;
c0103696:	8b 45 08             	mov    0x8(%ebp),%eax
c0103699:	8b 55 0c             	mov    0xc(%ebp),%edx
c010369c:	89 50 08             	mov    %edx,0x8(%eax)
}
c010369f:	c9                   	leave  
c01036a0:	c3                   	ret    

c01036a1 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01036a1:	55                   	push   %ebp
c01036a2:	89 e5                	mov    %esp,%ebp
c01036a4:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01036a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01036ab:	75 24                	jne    c01036d1 <default_alloc_pages+0x30>
c01036ad:	c7 44 24 0c 10 d0 10 	movl   $0xc010d010,0xc(%esp)
c01036b4:	c0 
c01036b5:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01036bc:	c0 
c01036bd:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c01036c4:	00 
c01036c5:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01036cc:	e8 09 d7 ff ff       	call   c0100dda <__panic>
    if (n > nr_free) {
c01036d1:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c01036d6:	3b 45 08             	cmp    0x8(%ebp),%eax
c01036d9:	73 0a                	jae    c01036e5 <default_alloc_pages+0x44>
        return NULL;
c01036db:	b8 00 00 00 00       	mov    $0x0,%eax
c01036e0:	e9 37 01 00 00       	jmp    c010381c <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c01036e5:	c7 45 f4 7c 1e 1b c0 	movl   $0xc01b1e7c,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c01036ec:	e9 0a 01 00 00       	jmp    c01037fb <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01036f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f4:	83 e8 0c             	sub    $0xc,%eax
c01036f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01036fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01036fd:	8b 40 08             	mov    0x8(%eax),%eax
c0103700:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103703:	0f 82 f2 00 00 00    	jb     c01037fb <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c0103709:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103710:	eb 7c                	jmp    c010378e <default_alloc_pages+0xed>
c0103712:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103715:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103718:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010371b:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c010371e:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c0103721:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103724:	83 e8 0c             	sub    $0xc,%eax
c0103727:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c010372a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010372d:	83 c0 04             	add    $0x4,%eax
c0103730:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103737:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010373a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010373d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103740:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0103743:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103746:	83 c0 04             	add    $0x4,%eax
c0103749:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103750:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103753:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103756:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103759:	0f b3 10             	btr    %edx,(%eax)
c010375c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010375f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103762:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103765:	8b 40 04             	mov    0x4(%eax),%eax
c0103768:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010376b:	8b 12                	mov    (%edx),%edx
c010376d:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103770:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103773:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103776:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103779:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010377c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010377f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103782:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0103784:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103787:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c010378a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010378e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103791:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103794:	0f 82 78 ff ff ff    	jb     c0103712 <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c010379a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010379d:	8b 40 08             	mov    0x8(%eax),%eax
c01037a0:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037a3:	76 12                	jbe    c01037b7 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c01037a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037a8:	8d 50 f4             	lea    -0xc(%eax),%edx
c01037ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037ae:	8b 40 08             	mov    0x8(%eax),%eax
c01037b1:	2b 45 08             	sub    0x8(%ebp),%eax
c01037b4:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c01037b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037ba:	83 c0 04             	add    $0x4,%eax
c01037bd:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c01037c4:	89 45 bc             	mov    %eax,-0x44(%ebp)
c01037c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01037ca:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01037cd:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c01037d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d3:	83 c0 04             	add    $0x4,%eax
c01037d6:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c01037dd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01037e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01037e3:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01037e6:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c01037e9:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c01037ee:	2b 45 08             	sub    0x8(%ebp),%eax
c01037f1:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
        return p;
c01037f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037f9:	eb 21                	jmp    c010381c <default_alloc_pages+0x17b>
c01037fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037fe:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103801:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103804:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c0103807:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010380a:	81 7d f4 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0xc(%ebp)
c0103811:	0f 85 da fe ff ff    	jne    c01036f1 <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c0103817:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010381c:	c9                   	leave  
c010381d:	c3                   	ret    

c010381e <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010381e:	55                   	push   %ebp
c010381f:	89 e5                	mov    %esp,%ebp
c0103821:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103824:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103828:	75 24                	jne    c010384e <default_free_pages+0x30>
c010382a:	c7 44 24 0c 10 d0 10 	movl   $0xc010d010,0xc(%esp)
c0103831:	c0 
c0103832:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103839:	c0 
c010383a:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0103841:	00 
c0103842:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103849:	e8 8c d5 ff ff       	call   c0100dda <__panic>
    assert(PageReserved(base));
c010384e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103851:	83 c0 04             	add    $0x4,%eax
c0103854:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010385b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010385e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103861:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103864:	0f a3 10             	bt     %edx,(%eax)
c0103867:	19 c0                	sbb    %eax,%eax
c0103869:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c010386c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103870:	0f 95 c0             	setne  %al
c0103873:	0f b6 c0             	movzbl %al,%eax
c0103876:	85 c0                	test   %eax,%eax
c0103878:	75 24                	jne    c010389e <default_free_pages+0x80>
c010387a:	c7 44 24 0c 51 d0 10 	movl   $0xc010d051,0xc(%esp)
c0103881:	c0 
c0103882:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103889:	c0 
c010388a:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0103891:	00 
c0103892:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103899:	e8 3c d5 ff ff       	call   c0100dda <__panic>

    list_entry_t *le = &free_list;
c010389e:	c7 45 f4 7c 1e 1b c0 	movl   $0xc01b1e7c,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c01038a5:	eb 13                	jmp    c01038ba <default_free_pages+0x9c>
      p = le2page(le, page_link);
c01038a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038aa:	83 e8 0c             	sub    $0xc,%eax
c01038ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c01038b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038b3:	3b 45 08             	cmp    0x8(%ebp),%eax
c01038b6:	76 02                	jbe    c01038ba <default_free_pages+0x9c>
        break;
c01038b8:	eb 18                	jmp    c01038d2 <default_free_pages+0xb4>
c01038ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01038c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038c3:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c01038c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038c9:	81 7d f4 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0xc(%ebp)
c01038d0:	75 d5                	jne    c01038a7 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01038d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01038d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038d8:	eb 4b                	jmp    c0103925 <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c01038da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038dd:	8d 50 0c             	lea    0xc(%eax),%edx
c01038e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01038e6:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01038e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038ec:	8b 00                	mov    (%eax),%eax
c01038ee:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01038f1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01038f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01038f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038fa:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01038fd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103900:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103903:	89 10                	mov    %edx,(%eax)
c0103905:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103908:	8b 10                	mov    (%eax),%edx
c010390a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010390d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103910:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103913:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103916:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103919:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010391c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010391f:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0103921:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c0103925:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103928:	c1 e0 05             	shl    $0x5,%eax
c010392b:	89 c2                	mov    %eax,%edx
c010392d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103930:	01 d0                	add    %edx,%eax
c0103932:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103935:	77 a3                	ja     c01038da <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0103937:	8b 45 08             	mov    0x8(%ebp),%eax
c010393a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0103941:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103948:	00 
c0103949:	8b 45 08             	mov    0x8(%ebp),%eax
c010394c:	89 04 24             	mov    %eax,(%esp)
c010394f:	e8 cb fb ff ff       	call   c010351f <set_page_ref>
    ClearPageProperty(base);
c0103954:	8b 45 08             	mov    0x8(%ebp),%eax
c0103957:	83 c0 04             	add    $0x4,%eax
c010395a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103961:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103964:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103967:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010396a:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c010396d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103970:	83 c0 04             	add    $0x4,%eax
c0103973:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010397a:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010397d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103980:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103983:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103986:	8b 45 08             	mov    0x8(%ebp),%eax
c0103989:	8b 55 0c             	mov    0xc(%ebp),%edx
c010398c:	89 50 08             	mov    %edx,0x8(%eax)

    p = le2page(le,page_link) ;
c010398f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103992:	83 e8 0c             	sub    $0xc,%eax
c0103995:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103998:	8b 45 0c             	mov    0xc(%ebp),%eax
c010399b:	c1 e0 05             	shl    $0x5,%eax
c010399e:	89 c2                	mov    %eax,%edx
c01039a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01039a3:	01 d0                	add    %edx,%eax
c01039a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01039a8:	75 1e                	jne    c01039c8 <default_free_pages+0x1aa>
      base->property += p->property;
c01039aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01039ad:	8b 50 08             	mov    0x8(%eax),%edx
c01039b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039b3:	8b 40 08             	mov    0x8(%eax),%eax
c01039b6:	01 c2                	add    %eax,%edx
c01039b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039bb:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c01039be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039c1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c01039c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039cb:	83 c0 0c             	add    $0xc,%eax
c01039ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01039d1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01039d4:	8b 00                	mov    (%eax),%eax
c01039d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c01039d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039dc:	83 e8 0c             	sub    $0xc,%eax
c01039df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c01039e2:	81 7d f4 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0xc(%ebp)
c01039e9:	74 57                	je     c0103a42 <default_free_pages+0x224>
c01039eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01039ee:	83 e8 20             	sub    $0x20,%eax
c01039f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01039f4:	75 4c                	jne    c0103a42 <default_free_pages+0x224>
      while(le!=&free_list){
c01039f6:	eb 41                	jmp    c0103a39 <default_free_pages+0x21b>
        if(p->property){
c01039f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039fb:	8b 40 08             	mov    0x8(%eax),%eax
c01039fe:	85 c0                	test   %eax,%eax
c0103a00:	74 20                	je     c0103a22 <default_free_pages+0x204>
          p->property += base->property;
c0103a02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a05:	8b 50 08             	mov    0x8(%eax),%edx
c0103a08:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0b:	8b 40 08             	mov    0x8(%eax),%eax
c0103a0e:	01 c2                	add    %eax,%edx
c0103a10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a13:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a19:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103a20:	eb 20                	jmp    c0103a42 <default_free_pages+0x224>
c0103a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a25:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103a28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103a2b:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103a2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103a30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a33:	83 e8 0c             	sub    $0xc,%eax
c0103a36:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103a39:	81 7d f4 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0xc(%ebp)
c0103a40:	75 b6                	jne    c01039f8 <default_free_pages+0x1da>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0103a42:	8b 15 84 1e 1b c0    	mov    0xc01b1e84,%edx
c0103a48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a4b:	01 d0                	add    %edx,%eax
c0103a4d:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
    return ;
c0103a52:	90                   	nop
}
c0103a53:	c9                   	leave  
c0103a54:	c3                   	ret    

c0103a55 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103a55:	55                   	push   %ebp
c0103a56:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103a58:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
}
c0103a5d:	5d                   	pop    %ebp
c0103a5e:	c3                   	ret    

c0103a5f <basic_check>:

static void
basic_check(void) {
c0103a5f:	55                   	push   %ebp
c0103a60:	89 e5                	mov    %esp,%ebp
c0103a62:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103a65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a75:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103a78:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103a7f:	e8 dc 15 00 00       	call   c0105060 <alloc_pages>
c0103a84:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103a8b:	75 24                	jne    c0103ab1 <basic_check+0x52>
c0103a8d:	c7 44 24 0c 64 d0 10 	movl   $0xc010d064,0xc(%esp)
c0103a94:	c0 
c0103a95:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103a9c:	c0 
c0103a9d:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103aa4:	00 
c0103aa5:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103aac:	e8 29 d3 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103ab1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ab8:	e8 a3 15 00 00       	call   c0105060 <alloc_pages>
c0103abd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ac0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103ac4:	75 24                	jne    c0103aea <basic_check+0x8b>
c0103ac6:	c7 44 24 0c 80 d0 10 	movl   $0xc010d080,0xc(%esp)
c0103acd:	c0 
c0103ace:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103ad5:	c0 
c0103ad6:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103add:	00 
c0103ade:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103ae5:	e8 f0 d2 ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103aea:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103af1:	e8 6a 15 00 00       	call   c0105060 <alloc_pages>
c0103af6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103af9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103afd:	75 24                	jne    c0103b23 <basic_check+0xc4>
c0103aff:	c7 44 24 0c 9c d0 10 	movl   $0xc010d09c,0xc(%esp)
c0103b06:	c0 
c0103b07:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103b0e:	c0 
c0103b0f:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103b16:	00 
c0103b17:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103b1e:	e8 b7 d2 ff ff       	call   c0100dda <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103b23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b26:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103b29:	74 10                	je     c0103b3b <basic_check+0xdc>
c0103b2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b2e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103b31:	74 08                	je     c0103b3b <basic_check+0xdc>
c0103b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103b39:	75 24                	jne    c0103b5f <basic_check+0x100>
c0103b3b:	c7 44 24 0c b8 d0 10 	movl   $0xc010d0b8,0xc(%esp)
c0103b42:	c0 
c0103b43:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103b4a:	c0 
c0103b4b:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103b52:	00 
c0103b53:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103b5a:	e8 7b d2 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b62:	89 04 24             	mov    %eax,(%esp)
c0103b65:	e8 ab f9 ff ff       	call   c0103515 <page_ref>
c0103b6a:	85 c0                	test   %eax,%eax
c0103b6c:	75 1e                	jne    c0103b8c <basic_check+0x12d>
c0103b6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b71:	89 04 24             	mov    %eax,(%esp)
c0103b74:	e8 9c f9 ff ff       	call   c0103515 <page_ref>
c0103b79:	85 c0                	test   %eax,%eax
c0103b7b:	75 0f                	jne    c0103b8c <basic_check+0x12d>
c0103b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b80:	89 04 24             	mov    %eax,(%esp)
c0103b83:	e8 8d f9 ff ff       	call   c0103515 <page_ref>
c0103b88:	85 c0                	test   %eax,%eax
c0103b8a:	74 24                	je     c0103bb0 <basic_check+0x151>
c0103b8c:	c7 44 24 0c dc d0 10 	movl   $0xc010d0dc,0xc(%esp)
c0103b93:	c0 
c0103b94:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103b9b:	c0 
c0103b9c:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103ba3:	00 
c0103ba4:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103bab:	e8 2a d2 ff ff       	call   c0100dda <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103bb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bb3:	89 04 24             	mov    %eax,(%esp)
c0103bb6:	e8 44 f9 ff ff       	call   c01034ff <page2pa>
c0103bbb:	8b 15 80 fd 1a c0    	mov    0xc01afd80,%edx
c0103bc1:	c1 e2 0c             	shl    $0xc,%edx
c0103bc4:	39 d0                	cmp    %edx,%eax
c0103bc6:	72 24                	jb     c0103bec <basic_check+0x18d>
c0103bc8:	c7 44 24 0c 18 d1 10 	movl   $0xc010d118,0xc(%esp)
c0103bcf:	c0 
c0103bd0:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103bd7:	c0 
c0103bd8:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103bdf:	00 
c0103be0:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103be7:	e8 ee d1 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103bec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103bef:	89 04 24             	mov    %eax,(%esp)
c0103bf2:	e8 08 f9 ff ff       	call   c01034ff <page2pa>
c0103bf7:	8b 15 80 fd 1a c0    	mov    0xc01afd80,%edx
c0103bfd:	c1 e2 0c             	shl    $0xc,%edx
c0103c00:	39 d0                	cmp    %edx,%eax
c0103c02:	72 24                	jb     c0103c28 <basic_check+0x1c9>
c0103c04:	c7 44 24 0c 35 d1 10 	movl   $0xc010d135,0xc(%esp)
c0103c0b:	c0 
c0103c0c:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103c13:	c0 
c0103c14:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103c1b:	00 
c0103c1c:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103c23:	e8 b2 d1 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c2b:	89 04 24             	mov    %eax,(%esp)
c0103c2e:	e8 cc f8 ff ff       	call   c01034ff <page2pa>
c0103c33:	8b 15 80 fd 1a c0    	mov    0xc01afd80,%edx
c0103c39:	c1 e2 0c             	shl    $0xc,%edx
c0103c3c:	39 d0                	cmp    %edx,%eax
c0103c3e:	72 24                	jb     c0103c64 <basic_check+0x205>
c0103c40:	c7 44 24 0c 52 d1 10 	movl   $0xc010d152,0xc(%esp)
c0103c47:	c0 
c0103c48:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103c4f:	c0 
c0103c50:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103c57:	00 
c0103c58:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103c5f:	e8 76 d1 ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c0103c64:	a1 7c 1e 1b c0       	mov    0xc01b1e7c,%eax
c0103c69:	8b 15 80 1e 1b c0    	mov    0xc01b1e80,%edx
c0103c6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103c72:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103c75:	c7 45 e0 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103c7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c7f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103c82:	89 50 04             	mov    %edx,0x4(%eax)
c0103c85:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c88:	8b 50 04             	mov    0x4(%eax),%edx
c0103c8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c8e:	89 10                	mov    %edx,(%eax)
c0103c90:	c7 45 dc 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103c97:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103c9a:	8b 40 04             	mov    0x4(%eax),%eax
c0103c9d:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103ca0:	0f 94 c0             	sete   %al
c0103ca3:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103ca6:	85 c0                	test   %eax,%eax
c0103ca8:	75 24                	jne    c0103cce <basic_check+0x26f>
c0103caa:	c7 44 24 0c 6f d1 10 	movl   $0xc010d16f,0xc(%esp)
c0103cb1:	c0 
c0103cb2:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103cb9:	c0 
c0103cba:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103cc1:	00 
c0103cc2:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103cc9:	e8 0c d1 ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c0103cce:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0103cd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103cd6:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c0103cdd:	00 00 00 

    assert(alloc_page() == NULL);
c0103ce0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ce7:	e8 74 13 00 00       	call   c0105060 <alloc_pages>
c0103cec:	85 c0                	test   %eax,%eax
c0103cee:	74 24                	je     c0103d14 <basic_check+0x2b5>
c0103cf0:	c7 44 24 0c 86 d1 10 	movl   $0xc010d186,0xc(%esp)
c0103cf7:	c0 
c0103cf8:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103cff:	c0 
c0103d00:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103d07:	00 
c0103d08:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103d0f:	e8 c6 d0 ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103d14:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d1b:	00 
c0103d1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d1f:	89 04 24             	mov    %eax,(%esp)
c0103d22:	e8 a4 13 00 00       	call   c01050cb <free_pages>
    free_page(p1);
c0103d27:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d2e:	00 
c0103d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d32:	89 04 24             	mov    %eax,(%esp)
c0103d35:	e8 91 13 00 00       	call   c01050cb <free_pages>
    free_page(p2);
c0103d3a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d41:	00 
c0103d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d45:	89 04 24             	mov    %eax,(%esp)
c0103d48:	e8 7e 13 00 00       	call   c01050cb <free_pages>
    assert(nr_free == 3);
c0103d4d:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0103d52:	83 f8 03             	cmp    $0x3,%eax
c0103d55:	74 24                	je     c0103d7b <basic_check+0x31c>
c0103d57:	c7 44 24 0c 9b d1 10 	movl   $0xc010d19b,0xc(%esp)
c0103d5e:	c0 
c0103d5f:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103d66:	c0 
c0103d67:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103d6e:	00 
c0103d6f:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103d76:	e8 5f d0 ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103d7b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d82:	e8 d9 12 00 00       	call   c0105060 <alloc_pages>
c0103d87:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103d8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103d8e:	75 24                	jne    c0103db4 <basic_check+0x355>
c0103d90:	c7 44 24 0c 64 d0 10 	movl   $0xc010d064,0xc(%esp)
c0103d97:	c0 
c0103d98:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103d9f:	c0 
c0103da0:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103da7:	00 
c0103da8:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103daf:	e8 26 d0 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103db4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103dbb:	e8 a0 12 00 00       	call   c0105060 <alloc_pages>
c0103dc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103dc3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103dc7:	75 24                	jne    c0103ded <basic_check+0x38e>
c0103dc9:	c7 44 24 0c 80 d0 10 	movl   $0xc010d080,0xc(%esp)
c0103dd0:	c0 
c0103dd1:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103dd8:	c0 
c0103dd9:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103de0:	00 
c0103de1:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103de8:	e8 ed cf ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ded:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103df4:	e8 67 12 00 00       	call   c0105060 <alloc_pages>
c0103df9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dfc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e00:	75 24                	jne    c0103e26 <basic_check+0x3c7>
c0103e02:	c7 44 24 0c 9c d0 10 	movl   $0xc010d09c,0xc(%esp)
c0103e09:	c0 
c0103e0a:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103e11:	c0 
c0103e12:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103e19:	00 
c0103e1a:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103e21:	e8 b4 cf ff ff       	call   c0100dda <__panic>

    assert(alloc_page() == NULL);
c0103e26:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e2d:	e8 2e 12 00 00       	call   c0105060 <alloc_pages>
c0103e32:	85 c0                	test   %eax,%eax
c0103e34:	74 24                	je     c0103e5a <basic_check+0x3fb>
c0103e36:	c7 44 24 0c 86 d1 10 	movl   $0xc010d186,0xc(%esp)
c0103e3d:	c0 
c0103e3e:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103e45:	c0 
c0103e46:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103e4d:	00 
c0103e4e:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103e55:	e8 80 cf ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103e5a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e61:	00 
c0103e62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e65:	89 04 24             	mov    %eax,(%esp)
c0103e68:	e8 5e 12 00 00       	call   c01050cb <free_pages>
c0103e6d:	c7 45 d8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x28(%ebp)
c0103e74:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103e77:	8b 40 04             	mov    0x4(%eax),%eax
c0103e7a:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103e7d:	0f 94 c0             	sete   %al
c0103e80:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103e83:	85 c0                	test   %eax,%eax
c0103e85:	74 24                	je     c0103eab <basic_check+0x44c>
c0103e87:	c7 44 24 0c a8 d1 10 	movl   $0xc010d1a8,0xc(%esp)
c0103e8e:	c0 
c0103e8f:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103e96:	c0 
c0103e97:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103e9e:	00 
c0103e9f:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103ea6:	e8 2f cf ff ff       	call   c0100dda <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103eab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eb2:	e8 a9 11 00 00       	call   c0105060 <alloc_pages>
c0103eb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103eba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103ebd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103ec0:	74 24                	je     c0103ee6 <basic_check+0x487>
c0103ec2:	c7 44 24 0c c0 d1 10 	movl   $0xc010d1c0,0xc(%esp)
c0103ec9:	c0 
c0103eca:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103ed1:	c0 
c0103ed2:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103ed9:	00 
c0103eda:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103ee1:	e8 f4 ce ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0103ee6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eed:	e8 6e 11 00 00       	call   c0105060 <alloc_pages>
c0103ef2:	85 c0                	test   %eax,%eax
c0103ef4:	74 24                	je     c0103f1a <basic_check+0x4bb>
c0103ef6:	c7 44 24 0c 86 d1 10 	movl   $0xc010d186,0xc(%esp)
c0103efd:	c0 
c0103efe:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103f05:	c0 
c0103f06:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103f0d:	00 
c0103f0e:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103f15:	e8 c0 ce ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c0103f1a:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0103f1f:	85 c0                	test   %eax,%eax
c0103f21:	74 24                	je     c0103f47 <basic_check+0x4e8>
c0103f23:	c7 44 24 0c d9 d1 10 	movl   $0xc010d1d9,0xc(%esp)
c0103f2a:	c0 
c0103f2b:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0103f32:	c0 
c0103f33:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0103f3a:	00 
c0103f3b:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0103f42:	e8 93 ce ff ff       	call   c0100dda <__panic>
    free_list = free_list_store;
c0103f47:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103f4a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103f4d:	a3 7c 1e 1b c0       	mov    %eax,0xc01b1e7c
c0103f52:	89 15 80 1e 1b c0    	mov    %edx,0xc01b1e80
    nr_free = nr_free_store;
c0103f58:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f5b:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84

    free_page(p);
c0103f60:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f67:	00 
c0103f68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f6b:	89 04 24             	mov    %eax,(%esp)
c0103f6e:	e8 58 11 00 00       	call   c01050cb <free_pages>
    free_page(p1);
c0103f73:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f7a:	00 
c0103f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f7e:	89 04 24             	mov    %eax,(%esp)
c0103f81:	e8 45 11 00 00       	call   c01050cb <free_pages>
    free_page(p2);
c0103f86:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f8d:	00 
c0103f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f91:	89 04 24             	mov    %eax,(%esp)
c0103f94:	e8 32 11 00 00       	call   c01050cb <free_pages>
}
c0103f99:	c9                   	leave  
c0103f9a:	c3                   	ret    

c0103f9b <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0103f9b:	55                   	push   %ebp
c0103f9c:	89 e5                	mov    %esp,%ebp
c0103f9e:	53                   	push   %ebx
c0103f9f:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0103fa5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103fac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0103fb3:	c7 45 ec 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0103fba:	eb 6b                	jmp    c0104027 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0103fbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103fbf:	83 e8 0c             	sub    $0xc,%eax
c0103fc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0103fc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103fc8:	83 c0 04             	add    $0x4,%eax
c0103fcb:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103fd2:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103fd5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103fd8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103fdb:	0f a3 10             	bt     %edx,(%eax)
c0103fde:	19 c0                	sbb    %eax,%eax
c0103fe0:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0103fe3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103fe7:	0f 95 c0             	setne  %al
c0103fea:	0f b6 c0             	movzbl %al,%eax
c0103fed:	85 c0                	test   %eax,%eax
c0103fef:	75 24                	jne    c0104015 <default_check+0x7a>
c0103ff1:	c7 44 24 0c e6 d1 10 	movl   $0xc010d1e6,0xc(%esp)
c0103ff8:	c0 
c0103ff9:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0104000:	c0 
c0104001:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0104008:	00 
c0104009:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0104010:	e8 c5 cd ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c0104015:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104019:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010401c:	8b 50 08             	mov    0x8(%eax),%edx
c010401f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104022:	01 d0                	add    %edx,%eax
c0104024:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104027:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010402a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010402d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104030:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104033:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104036:	81 7d ec 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x14(%ebp)
c010403d:	0f 85 79 ff ff ff    	jne    c0103fbc <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0104043:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104046:	e8 b2 10 00 00       	call   c01050fd <nr_free_pages>
c010404b:	39 c3                	cmp    %eax,%ebx
c010404d:	74 24                	je     c0104073 <default_check+0xd8>
c010404f:	c7 44 24 0c f6 d1 10 	movl   $0xc010d1f6,0xc(%esp)
c0104056:	c0 
c0104057:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c010405e:	c0 
c010405f:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0104066:	00 
c0104067:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c010406e:	e8 67 cd ff ff       	call   c0100dda <__panic>

    basic_check();
c0104073:	e8 e7 f9 ff ff       	call   c0103a5f <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104078:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010407f:	e8 dc 0f 00 00       	call   c0105060 <alloc_pages>
c0104084:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104087:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010408b:	75 24                	jne    c01040b1 <default_check+0x116>
c010408d:	c7 44 24 0c 0f d2 10 	movl   $0xc010d20f,0xc(%esp)
c0104094:	c0 
c0104095:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c010409c:	c0 
c010409d:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c01040a4:	00 
c01040a5:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01040ac:	e8 29 cd ff ff       	call   c0100dda <__panic>
    assert(!PageProperty(p0));
c01040b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040b4:	83 c0 04             	add    $0x4,%eax
c01040b7:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c01040be:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01040c4:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01040c7:	0f a3 10             	bt     %edx,(%eax)
c01040ca:	19 c0                	sbb    %eax,%eax
c01040cc:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01040cf:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01040d3:	0f 95 c0             	setne  %al
c01040d6:	0f b6 c0             	movzbl %al,%eax
c01040d9:	85 c0                	test   %eax,%eax
c01040db:	74 24                	je     c0104101 <default_check+0x166>
c01040dd:	c7 44 24 0c 1a d2 10 	movl   $0xc010d21a,0xc(%esp)
c01040e4:	c0 
c01040e5:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01040ec:	c0 
c01040ed:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01040f4:	00 
c01040f5:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01040fc:	e8 d9 cc ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c0104101:	a1 7c 1e 1b c0       	mov    0xc01b1e7c,%eax
c0104106:	8b 15 80 1e 1b c0    	mov    0xc01b1e80,%edx
c010410c:	89 45 80             	mov    %eax,-0x80(%ebp)
c010410f:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0104112:	c7 45 b4 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104119:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010411c:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010411f:	89 50 04             	mov    %edx,0x4(%eax)
c0104122:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104125:	8b 50 04             	mov    0x4(%eax),%edx
c0104128:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010412b:	89 10                	mov    %edx,(%eax)
c010412d:	c7 45 b0 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104134:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104137:	8b 40 04             	mov    0x4(%eax),%eax
c010413a:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c010413d:	0f 94 c0             	sete   %al
c0104140:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104143:	85 c0                	test   %eax,%eax
c0104145:	75 24                	jne    c010416b <default_check+0x1d0>
c0104147:	c7 44 24 0c 6f d1 10 	movl   $0xc010d16f,0xc(%esp)
c010414e:	c0 
c010414f:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0104156:	c0 
c0104157:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c010415e:	00 
c010415f:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0104166:	e8 6f cc ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c010416b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104172:	e8 e9 0e 00 00       	call   c0105060 <alloc_pages>
c0104177:	85 c0                	test   %eax,%eax
c0104179:	74 24                	je     c010419f <default_check+0x204>
c010417b:	c7 44 24 0c 86 d1 10 	movl   $0xc010d186,0xc(%esp)
c0104182:	c0 
c0104183:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c010418a:	c0 
c010418b:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0104192:	00 
c0104193:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c010419a:	e8 3b cc ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c010419f:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c01041a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c01041a7:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c01041ae:	00 00 00 

    free_pages(p0 + 2, 3);
c01041b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041b4:	83 c0 40             	add    $0x40,%eax
c01041b7:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01041be:	00 
c01041bf:	89 04 24             	mov    %eax,(%esp)
c01041c2:	e8 04 0f 00 00       	call   c01050cb <free_pages>
    assert(alloc_pages(4) == NULL);
c01041c7:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01041ce:	e8 8d 0e 00 00       	call   c0105060 <alloc_pages>
c01041d3:	85 c0                	test   %eax,%eax
c01041d5:	74 24                	je     c01041fb <default_check+0x260>
c01041d7:	c7 44 24 0c 2c d2 10 	movl   $0xc010d22c,0xc(%esp)
c01041de:	c0 
c01041df:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01041e6:	c0 
c01041e7:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01041ee:	00 
c01041ef:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01041f6:	e8 df cb ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01041fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041fe:	83 c0 40             	add    $0x40,%eax
c0104201:	83 c0 04             	add    $0x4,%eax
c0104204:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c010420b:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010420e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0104211:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0104214:	0f a3 10             	bt     %edx,(%eax)
c0104217:	19 c0                	sbb    %eax,%eax
c0104219:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c010421c:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c0104220:	0f 95 c0             	setne  %al
c0104223:	0f b6 c0             	movzbl %al,%eax
c0104226:	85 c0                	test   %eax,%eax
c0104228:	74 0e                	je     c0104238 <default_check+0x29d>
c010422a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010422d:	83 c0 40             	add    $0x40,%eax
c0104230:	8b 40 08             	mov    0x8(%eax),%eax
c0104233:	83 f8 03             	cmp    $0x3,%eax
c0104236:	74 24                	je     c010425c <default_check+0x2c1>
c0104238:	c7 44 24 0c 44 d2 10 	movl   $0xc010d244,0xc(%esp)
c010423f:	c0 
c0104240:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0104247:	c0 
c0104248:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c010424f:	00 
c0104250:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0104257:	e8 7e cb ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010425c:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104263:	e8 f8 0d 00 00       	call   c0105060 <alloc_pages>
c0104268:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010426b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010426f:	75 24                	jne    c0104295 <default_check+0x2fa>
c0104271:	c7 44 24 0c 70 d2 10 	movl   $0xc010d270,0xc(%esp)
c0104278:	c0 
c0104279:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0104280:	c0 
c0104281:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0104288:	00 
c0104289:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0104290:	e8 45 cb ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0104295:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010429c:	e8 bf 0d 00 00       	call   c0105060 <alloc_pages>
c01042a1:	85 c0                	test   %eax,%eax
c01042a3:	74 24                	je     c01042c9 <default_check+0x32e>
c01042a5:	c7 44 24 0c 86 d1 10 	movl   $0xc010d186,0xc(%esp)
c01042ac:	c0 
c01042ad:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01042b4:	c0 
c01042b5:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01042bc:	00 
c01042bd:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01042c4:	e8 11 cb ff ff       	call   c0100dda <__panic>
    assert(p0 + 2 == p1);
c01042c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042cc:	83 c0 40             	add    $0x40,%eax
c01042cf:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01042d2:	74 24                	je     c01042f8 <default_check+0x35d>
c01042d4:	c7 44 24 0c 8e d2 10 	movl   $0xc010d28e,0xc(%esp)
c01042db:	c0 
c01042dc:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01042e3:	c0 
c01042e4:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01042eb:	00 
c01042ec:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01042f3:	e8 e2 ca ff ff       	call   c0100dda <__panic>

    p2 = p0 + 1;
c01042f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042fb:	83 c0 20             	add    $0x20,%eax
c01042fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c0104301:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104308:	00 
c0104309:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010430c:	89 04 24             	mov    %eax,(%esp)
c010430f:	e8 b7 0d 00 00       	call   c01050cb <free_pages>
    free_pages(p1, 3);
c0104314:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010431b:	00 
c010431c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010431f:	89 04 24             	mov    %eax,(%esp)
c0104322:	e8 a4 0d 00 00       	call   c01050cb <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0104327:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010432a:	83 c0 04             	add    $0x4,%eax
c010432d:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0104334:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104337:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010433a:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010433d:	0f a3 10             	bt     %edx,(%eax)
c0104340:	19 c0                	sbb    %eax,%eax
c0104342:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0104345:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104349:	0f 95 c0             	setne  %al
c010434c:	0f b6 c0             	movzbl %al,%eax
c010434f:	85 c0                	test   %eax,%eax
c0104351:	74 0b                	je     c010435e <default_check+0x3c3>
c0104353:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104356:	8b 40 08             	mov    0x8(%eax),%eax
c0104359:	83 f8 01             	cmp    $0x1,%eax
c010435c:	74 24                	je     c0104382 <default_check+0x3e7>
c010435e:	c7 44 24 0c 9c d2 10 	movl   $0xc010d29c,0xc(%esp)
c0104365:	c0 
c0104366:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c010436d:	c0 
c010436e:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0104375:	00 
c0104376:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c010437d:	e8 58 ca ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104382:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104385:	83 c0 04             	add    $0x4,%eax
c0104388:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010438f:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104392:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104395:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104398:	0f a3 10             	bt     %edx,(%eax)
c010439b:	19 c0                	sbb    %eax,%eax
c010439d:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c01043a0:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c01043a4:	0f 95 c0             	setne  %al
c01043a7:	0f b6 c0             	movzbl %al,%eax
c01043aa:	85 c0                	test   %eax,%eax
c01043ac:	74 0b                	je     c01043b9 <default_check+0x41e>
c01043ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043b1:	8b 40 08             	mov    0x8(%eax),%eax
c01043b4:	83 f8 03             	cmp    $0x3,%eax
c01043b7:	74 24                	je     c01043dd <default_check+0x442>
c01043b9:	c7 44 24 0c c4 d2 10 	movl   $0xc010d2c4,0xc(%esp)
c01043c0:	c0 
c01043c1:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01043c8:	c0 
c01043c9:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c01043d0:	00 
c01043d1:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01043d8:	e8 fd c9 ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01043dd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01043e4:	e8 77 0c 00 00       	call   c0105060 <alloc_pages>
c01043e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01043ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01043ef:	83 e8 20             	sub    $0x20,%eax
c01043f2:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01043f5:	74 24                	je     c010441b <default_check+0x480>
c01043f7:	c7 44 24 0c ea d2 10 	movl   $0xc010d2ea,0xc(%esp)
c01043fe:	c0 
c01043ff:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0104406:	c0 
c0104407:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c010440e:	00 
c010440f:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0104416:	e8 bf c9 ff ff       	call   c0100dda <__panic>
    free_page(p0);
c010441b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104422:	00 
c0104423:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104426:	89 04 24             	mov    %eax,(%esp)
c0104429:	e8 9d 0c 00 00       	call   c01050cb <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c010442e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0104435:	e8 26 0c 00 00       	call   c0105060 <alloc_pages>
c010443a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010443d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104440:	83 c0 20             	add    $0x20,%eax
c0104443:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104446:	74 24                	je     c010446c <default_check+0x4d1>
c0104448:	c7 44 24 0c 08 d3 10 	movl   $0xc010d308,0xc(%esp)
c010444f:	c0 
c0104450:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0104457:	c0 
c0104458:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c010445f:	00 
c0104460:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0104467:	e8 6e c9 ff ff       	call   c0100dda <__panic>

    free_pages(p0, 2);
c010446c:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104473:	00 
c0104474:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104477:	89 04 24             	mov    %eax,(%esp)
c010447a:	e8 4c 0c 00 00       	call   c01050cb <free_pages>
    free_page(p2);
c010447f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104486:	00 
c0104487:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010448a:	89 04 24             	mov    %eax,(%esp)
c010448d:	e8 39 0c 00 00       	call   c01050cb <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104492:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104499:	e8 c2 0b 00 00       	call   c0105060 <alloc_pages>
c010449e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044a1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01044a5:	75 24                	jne    c01044cb <default_check+0x530>
c01044a7:	c7 44 24 0c 28 d3 10 	movl   $0xc010d328,0xc(%esp)
c01044ae:	c0 
c01044af:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01044b6:	c0 
c01044b7:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c01044be:	00 
c01044bf:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01044c6:	e8 0f c9 ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c01044cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044d2:	e8 89 0b 00 00       	call   c0105060 <alloc_pages>
c01044d7:	85 c0                	test   %eax,%eax
c01044d9:	74 24                	je     c01044ff <default_check+0x564>
c01044db:	c7 44 24 0c 86 d1 10 	movl   $0xc010d186,0xc(%esp)
c01044e2:	c0 
c01044e3:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01044ea:	c0 
c01044eb:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01044f2:	00 
c01044f3:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01044fa:	e8 db c8 ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c01044ff:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0104504:	85 c0                	test   %eax,%eax
c0104506:	74 24                	je     c010452c <default_check+0x591>
c0104508:	c7 44 24 0c d9 d1 10 	movl   $0xc010d1d9,0xc(%esp)
c010450f:	c0 
c0104510:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c0104517:	c0 
c0104518:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c010451f:	00 
c0104520:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c0104527:	e8 ae c8 ff ff       	call   c0100dda <__panic>
    nr_free = nr_free_store;
c010452c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010452f:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84

    free_list = free_list_store;
c0104534:	8b 45 80             	mov    -0x80(%ebp),%eax
c0104537:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010453a:	a3 7c 1e 1b c0       	mov    %eax,0xc01b1e7c
c010453f:	89 15 80 1e 1b c0    	mov    %edx,0xc01b1e80
    free_pages(p0, 5);
c0104545:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010454c:	00 
c010454d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104550:	89 04 24             	mov    %eax,(%esp)
c0104553:	e8 73 0b 00 00       	call   c01050cb <free_pages>

    le = &free_list;
c0104558:	c7 45 ec 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010455f:	eb 1d                	jmp    c010457e <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104561:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104564:	83 e8 0c             	sub    $0xc,%eax
c0104567:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c010456a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010456e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104571:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104574:	8b 40 08             	mov    0x8(%eax),%eax
c0104577:	29 c2                	sub    %eax,%edx
c0104579:	89 d0                	mov    %edx,%eax
c010457b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010457e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104581:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104584:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104587:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010458a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010458d:	81 7d ec 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x14(%ebp)
c0104594:	75 cb                	jne    c0104561 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104596:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010459a:	74 24                	je     c01045c0 <default_check+0x625>
c010459c:	c7 44 24 0c 46 d3 10 	movl   $0xc010d346,0xc(%esp)
c01045a3:	c0 
c01045a4:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01045ab:	c0 
c01045ac:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01045b3:	00 
c01045b4:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01045bb:	e8 1a c8 ff ff       	call   c0100dda <__panic>
    assert(total == 0);
c01045c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01045c4:	74 24                	je     c01045ea <default_check+0x64f>
c01045c6:	c7 44 24 0c 51 d3 10 	movl   $0xc010d351,0xc(%esp)
c01045cd:	c0 
c01045ce:	c7 44 24 08 16 d0 10 	movl   $0xc010d016,0x8(%esp)
c01045d5:	c0 
c01045d6:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c01045dd:	00 
c01045de:	c7 04 24 2b d0 10 c0 	movl   $0xc010d02b,(%esp)
c01045e5:	e8 f0 c7 ff ff       	call   c0100dda <__panic>
}
c01045ea:	81 c4 94 00 00 00    	add    $0x94,%esp
c01045f0:	5b                   	pop    %ebx
c01045f1:	5d                   	pop    %ebp
c01045f2:	c3                   	ret    

c01045f3 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01045f3:	55                   	push   %ebp
c01045f4:	89 e5                	mov    %esp,%ebp
c01045f6:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01045f9:	9c                   	pushf  
c01045fa:	58                   	pop    %eax
c01045fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01045fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104601:	25 00 02 00 00       	and    $0x200,%eax
c0104606:	85 c0                	test   %eax,%eax
c0104608:	74 0c                	je     c0104616 <__intr_save+0x23>
        intr_disable();
c010460a:	e8 23 da ff ff       	call   c0102032 <intr_disable>
        return 1;
c010460f:	b8 01 00 00 00       	mov    $0x1,%eax
c0104614:	eb 05                	jmp    c010461b <__intr_save+0x28>
    }
    return 0;
c0104616:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010461b:	c9                   	leave  
c010461c:	c3                   	ret    

c010461d <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010461d:	55                   	push   %ebp
c010461e:	89 e5                	mov    %esp,%ebp
c0104620:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104623:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104627:	74 05                	je     c010462e <__intr_restore+0x11>
        intr_enable();
c0104629:	e8 fe d9 ff ff       	call   c010202c <intr_enable>
    }
}
c010462e:	c9                   	leave  
c010462f:	c3                   	ret    

c0104630 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104630:	55                   	push   %ebp
c0104631:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104633:	8b 55 08             	mov    0x8(%ebp),%edx
c0104636:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c010463b:	29 c2                	sub    %eax,%edx
c010463d:	89 d0                	mov    %edx,%eax
c010463f:	c1 f8 05             	sar    $0x5,%eax
}
c0104642:	5d                   	pop    %ebp
c0104643:	c3                   	ret    

c0104644 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104644:	55                   	push   %ebp
c0104645:	89 e5                	mov    %esp,%ebp
c0104647:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010464a:	8b 45 08             	mov    0x8(%ebp),%eax
c010464d:	89 04 24             	mov    %eax,(%esp)
c0104650:	e8 db ff ff ff       	call   c0104630 <page2ppn>
c0104655:	c1 e0 0c             	shl    $0xc,%eax
}
c0104658:	c9                   	leave  
c0104659:	c3                   	ret    

c010465a <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010465a:	55                   	push   %ebp
c010465b:	89 e5                	mov    %esp,%ebp
c010465d:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104660:	8b 45 08             	mov    0x8(%ebp),%eax
c0104663:	c1 e8 0c             	shr    $0xc,%eax
c0104666:	89 c2                	mov    %eax,%edx
c0104668:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010466d:	39 c2                	cmp    %eax,%edx
c010466f:	72 1c                	jb     c010468d <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104671:	c7 44 24 08 8c d3 10 	movl   $0xc010d38c,0x8(%esp)
c0104678:	c0 
c0104679:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104680:	00 
c0104681:	c7 04 24 ab d3 10 c0 	movl   $0xc010d3ab,(%esp)
c0104688:	e8 4d c7 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c010468d:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0104692:	8b 55 08             	mov    0x8(%ebp),%edx
c0104695:	c1 ea 0c             	shr    $0xc,%edx
c0104698:	c1 e2 05             	shl    $0x5,%edx
c010469b:	01 d0                	add    %edx,%eax
}
c010469d:	c9                   	leave  
c010469e:	c3                   	ret    

c010469f <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010469f:	55                   	push   %ebp
c01046a0:	89 e5                	mov    %esp,%ebp
c01046a2:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c01046a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01046a8:	89 04 24             	mov    %eax,(%esp)
c01046ab:	e8 94 ff ff ff       	call   c0104644 <page2pa>
c01046b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046b6:	c1 e8 0c             	shr    $0xc,%eax
c01046b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01046bc:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01046c1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01046c4:	72 23                	jb     c01046e9 <page2kva+0x4a>
c01046c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046c9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01046cd:	c7 44 24 08 bc d3 10 	movl   $0xc010d3bc,0x8(%esp)
c01046d4:	c0 
c01046d5:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01046dc:	00 
c01046dd:	c7 04 24 ab d3 10 c0 	movl   $0xc010d3ab,(%esp)
c01046e4:	e8 f1 c6 ff ff       	call   c0100dda <__panic>
c01046e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046ec:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01046f1:	c9                   	leave  
c01046f2:	c3                   	ret    

c01046f3 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01046f3:	55                   	push   %ebp
c01046f4:	89 e5                	mov    %esp,%ebp
c01046f6:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01046f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01046fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046ff:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104706:	77 23                	ja     c010472b <kva2page+0x38>
c0104708:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010470b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010470f:	c7 44 24 08 e0 d3 10 	movl   $0xc010d3e0,0x8(%esp)
c0104716:	c0 
c0104717:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010471e:	00 
c010471f:	c7 04 24 ab d3 10 c0 	movl   $0xc010d3ab,(%esp)
c0104726:	e8 af c6 ff ff       	call   c0100dda <__panic>
c010472b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010472e:	05 00 00 00 40       	add    $0x40000000,%eax
c0104733:	89 04 24             	mov    %eax,(%esp)
c0104736:	e8 1f ff ff ff       	call   c010465a <pa2page>
}
c010473b:	c9                   	leave  
c010473c:	c3                   	ret    

c010473d <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c010473d:	55                   	push   %ebp
c010473e:	89 e5                	mov    %esp,%ebp
c0104740:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0104743:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104746:	ba 01 00 00 00       	mov    $0x1,%edx
c010474b:	89 c1                	mov    %eax,%ecx
c010474d:	d3 e2                	shl    %cl,%edx
c010474f:	89 d0                	mov    %edx,%eax
c0104751:	89 04 24             	mov    %eax,(%esp)
c0104754:	e8 07 09 00 00       	call   c0105060 <alloc_pages>
c0104759:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010475c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104760:	75 07                	jne    c0104769 <__slob_get_free_pages+0x2c>
    return NULL;
c0104762:	b8 00 00 00 00       	mov    $0x0,%eax
c0104767:	eb 0b                	jmp    c0104774 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010476c:	89 04 24             	mov    %eax,(%esp)
c010476f:	e8 2b ff ff ff       	call   c010469f <page2kva>
}
c0104774:	c9                   	leave  
c0104775:	c3                   	ret    

c0104776 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104776:	55                   	push   %ebp
c0104777:	89 e5                	mov    %esp,%ebp
c0104779:	53                   	push   %ebx
c010477a:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c010477d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104780:	ba 01 00 00 00       	mov    $0x1,%edx
c0104785:	89 c1                	mov    %eax,%ecx
c0104787:	d3 e2                	shl    %cl,%edx
c0104789:	89 d0                	mov    %edx,%eax
c010478b:	89 c3                	mov    %eax,%ebx
c010478d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104790:	89 04 24             	mov    %eax,(%esp)
c0104793:	e8 5b ff ff ff       	call   c01046f3 <kva2page>
c0104798:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010479c:	89 04 24             	mov    %eax,(%esp)
c010479f:	e8 27 09 00 00       	call   c01050cb <free_pages>
}
c01047a4:	83 c4 14             	add    $0x14,%esp
c01047a7:	5b                   	pop    %ebx
c01047a8:	5d                   	pop    %ebp
c01047a9:	c3                   	ret    

c01047aa <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01047aa:	55                   	push   %ebp
c01047ab:	89 e5                	mov    %esp,%ebp
c01047ad:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01047b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01047b3:	83 c0 08             	add    $0x8,%eax
c01047b6:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01047bb:	76 24                	jbe    c01047e1 <slob_alloc+0x37>
c01047bd:	c7 44 24 0c 04 d4 10 	movl   $0xc010d404,0xc(%esp)
c01047c4:	c0 
c01047c5:	c7 44 24 08 23 d4 10 	movl   $0xc010d423,0x8(%esp)
c01047cc:	c0 
c01047cd:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01047d4:	00 
c01047d5:	c7 04 24 38 d4 10 c0 	movl   $0xc010d438,(%esp)
c01047dc:	e8 f9 c5 ff ff       	call   c0100dda <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01047e1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01047e8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01047ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01047f2:	83 c0 07             	add    $0x7,%eax
c01047f5:	c1 e8 03             	shr    $0x3,%eax
c01047f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01047fb:	e8 f3 fd ff ff       	call   c01045f3 <__intr_save>
c0104800:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104803:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0104808:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010480b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010480e:	8b 40 04             	mov    0x4(%eax),%eax
c0104811:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104814:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104818:	74 25                	je     c010483f <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c010481a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010481d:	8b 45 10             	mov    0x10(%ebp),%eax
c0104820:	01 d0                	add    %edx,%eax
c0104822:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104825:	8b 45 10             	mov    0x10(%ebp),%eax
c0104828:	f7 d8                	neg    %eax
c010482a:	21 d0                	and    %edx,%eax
c010482c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c010482f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104832:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104835:	29 c2                	sub    %eax,%edx
c0104837:	89 d0                	mov    %edx,%eax
c0104839:	c1 f8 03             	sar    $0x3,%eax
c010483c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c010483f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104842:	8b 00                	mov    (%eax),%eax
c0104844:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104847:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010484a:	01 ca                	add    %ecx,%edx
c010484c:	39 d0                	cmp    %edx,%eax
c010484e:	0f 8c aa 00 00 00    	jl     c01048fe <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0104854:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104858:	74 38                	je     c0104892 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c010485a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010485d:	8b 00                	mov    (%eax),%eax
c010485f:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104862:	89 c2                	mov    %eax,%edx
c0104864:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104867:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104869:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010486c:	8b 50 04             	mov    0x4(%eax),%edx
c010486f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104872:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104875:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104878:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010487b:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c010487e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104881:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104884:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104886:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104889:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c010488c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010488f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104892:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104895:	8b 00                	mov    (%eax),%eax
c0104897:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010489a:	75 0e                	jne    c01048aa <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c010489c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010489f:	8b 50 04             	mov    0x4(%eax),%edx
c01048a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048a5:	89 50 04             	mov    %edx,0x4(%eax)
c01048a8:	eb 3c                	jmp    c01048e6 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c01048aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01048ad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01048b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048b7:	01 c2                	add    %eax,%edx
c01048b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048bc:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01048bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048c2:	8b 40 04             	mov    0x4(%eax),%eax
c01048c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048c8:	8b 12                	mov    (%edx),%edx
c01048ca:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01048cd:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01048cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048d2:	8b 40 04             	mov    0x4(%eax),%eax
c01048d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048d8:	8b 52 04             	mov    0x4(%edx),%edx
c01048db:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01048de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01048e4:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01048e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048e9:	a3 08 da 12 c0       	mov    %eax,0xc012da08
			spin_unlock_irqrestore(&slob_lock, flags);
c01048ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01048f1:	89 04 24             	mov    %eax,(%esp)
c01048f4:	e8 24 fd ff ff       	call   c010461d <__intr_restore>
			return cur;
c01048f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048fc:	eb 7f                	jmp    c010497d <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01048fe:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0104903:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104906:	75 61                	jne    c0104969 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104908:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010490b:	89 04 24             	mov    %eax,(%esp)
c010490e:	e8 0a fd ff ff       	call   c010461d <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104913:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010491a:	75 07                	jne    c0104923 <slob_alloc+0x179>
				return 0;
c010491c:	b8 00 00 00 00       	mov    $0x0,%eax
c0104921:	eb 5a                	jmp    c010497d <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104923:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010492a:	00 
c010492b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010492e:	89 04 24             	mov    %eax,(%esp)
c0104931:	e8 07 fe ff ff       	call   c010473d <__slob_get_free_pages>
c0104936:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104939:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010493d:	75 07                	jne    c0104946 <slob_alloc+0x19c>
				return 0;
c010493f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104944:	eb 37                	jmp    c010497d <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104946:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010494d:	00 
c010494e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104951:	89 04 24             	mov    %eax,(%esp)
c0104954:	e8 26 00 00 00       	call   c010497f <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104959:	e8 95 fc ff ff       	call   c01045f3 <__intr_save>
c010495e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104961:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0104966:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104969:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010496c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010496f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104972:	8b 40 04             	mov    0x4(%eax),%eax
c0104975:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104978:	e9 97 fe ff ff       	jmp    c0104814 <slob_alloc+0x6a>
}
c010497d:	c9                   	leave  
c010497e:	c3                   	ret    

c010497f <slob_free>:

static void slob_free(void *block, int size)
{
c010497f:	55                   	push   %ebp
c0104980:	89 e5                	mov    %esp,%ebp
c0104982:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104985:	8b 45 08             	mov    0x8(%ebp),%eax
c0104988:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010498b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010498f:	75 05                	jne    c0104996 <slob_free+0x17>
		return;
c0104991:	e9 ff 00 00 00       	jmp    c0104a95 <slob_free+0x116>

	if (size)
c0104996:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010499a:	74 10                	je     c01049ac <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c010499c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010499f:	83 c0 07             	add    $0x7,%eax
c01049a2:	c1 e8 03             	shr    $0x3,%eax
c01049a5:	89 c2                	mov    %eax,%edx
c01049a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049aa:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c01049ac:	e8 42 fc ff ff       	call   c01045f3 <__intr_save>
c01049b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01049b4:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c01049b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01049bc:	eb 27                	jmp    c01049e5 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c01049be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049c1:	8b 40 04             	mov    0x4(%eax),%eax
c01049c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01049c7:	77 13                	ja     c01049dc <slob_free+0x5d>
c01049c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01049cf:	77 27                	ja     c01049f8 <slob_free+0x79>
c01049d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049d4:	8b 40 04             	mov    0x4(%eax),%eax
c01049d7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01049da:	77 1c                	ja     c01049f8 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01049dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049df:	8b 40 04             	mov    0x4(%eax),%eax
c01049e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01049e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01049eb:	76 d1                	jbe    c01049be <slob_free+0x3f>
c01049ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049f0:	8b 40 04             	mov    0x4(%eax),%eax
c01049f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01049f6:	76 c6                	jbe    c01049be <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c01049f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049fb:	8b 00                	mov    (%eax),%eax
c01049fd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a07:	01 c2                	add    %eax,%edx
c0104a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a0c:	8b 40 04             	mov    0x4(%eax),%eax
c0104a0f:	39 c2                	cmp    %eax,%edx
c0104a11:	75 25                	jne    c0104a38 <slob_free+0xb9>
		b->units += cur->next->units;
c0104a13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a16:	8b 10                	mov    (%eax),%edx
c0104a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a1b:	8b 40 04             	mov    0x4(%eax),%eax
c0104a1e:	8b 00                	mov    (%eax),%eax
c0104a20:	01 c2                	add    %eax,%edx
c0104a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a25:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a2a:	8b 40 04             	mov    0x4(%eax),%eax
c0104a2d:	8b 50 04             	mov    0x4(%eax),%edx
c0104a30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a33:	89 50 04             	mov    %edx,0x4(%eax)
c0104a36:	eb 0c                	jmp    c0104a44 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a3b:	8b 50 04             	mov    0x4(%eax),%edx
c0104a3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a41:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a47:	8b 00                	mov    (%eax),%eax
c0104a49:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a53:	01 d0                	add    %edx,%eax
c0104a55:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a58:	75 1f                	jne    c0104a79 <slob_free+0xfa>
		cur->units += b->units;
c0104a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a5d:	8b 10                	mov    (%eax),%edx
c0104a5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a62:	8b 00                	mov    (%eax),%eax
c0104a64:	01 c2                	add    %eax,%edx
c0104a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a69:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104a6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a6e:	8b 50 04             	mov    0x4(%eax),%edx
c0104a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a74:	89 50 04             	mov    %edx,0x4(%eax)
c0104a77:	eb 09                	jmp    c0104a82 <slob_free+0x103>
	} else
		cur->next = b;
c0104a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a7f:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a85:	a3 08 da 12 c0       	mov    %eax,0xc012da08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104a8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a8d:	89 04 24             	mov    %eax,(%esp)
c0104a90:	e8 88 fb ff ff       	call   c010461d <__intr_restore>
}
c0104a95:	c9                   	leave  
c0104a96:	c3                   	ret    

c0104a97 <slob_init>:



void
slob_init(void) {
c0104a97:	55                   	push   %ebp
c0104a98:	89 e5                	mov    %esp,%ebp
c0104a9a:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104a9d:	c7 04 24 4a d4 10 c0 	movl   $0xc010d44a,(%esp)
c0104aa4:	e8 af b8 ff ff       	call   c0100358 <cprintf>
}
c0104aa9:	c9                   	leave  
c0104aaa:	c3                   	ret    

c0104aab <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104aab:	55                   	push   %ebp
c0104aac:	89 e5                	mov    %esp,%ebp
c0104aae:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104ab1:	e8 e1 ff ff ff       	call   c0104a97 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104ab6:	c7 04 24 5e d4 10 c0 	movl   $0xc010d45e,(%esp)
c0104abd:	e8 96 b8 ff ff       	call   c0100358 <cprintf>
}
c0104ac2:	c9                   	leave  
c0104ac3:	c3                   	ret    

c0104ac4 <slob_allocated>:

size_t
slob_allocated(void) {
c0104ac4:	55                   	push   %ebp
c0104ac5:	89 e5                	mov    %esp,%ebp
  return 0;
c0104ac7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104acc:	5d                   	pop    %ebp
c0104acd:	c3                   	ret    

c0104ace <kallocated>:

size_t
kallocated(void) {
c0104ace:	55                   	push   %ebp
c0104acf:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104ad1:	e8 ee ff ff ff       	call   c0104ac4 <slob_allocated>
}
c0104ad6:	5d                   	pop    %ebp
c0104ad7:	c3                   	ret    

c0104ad8 <find_order>:

static int find_order(int size)
{
c0104ad8:	55                   	push   %ebp
c0104ad9:	89 e5                	mov    %esp,%ebp
c0104adb:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104ade:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104ae5:	eb 07                	jmp    c0104aee <find_order+0x16>
		order++;
c0104ae7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104aeb:	d1 7d 08             	sarl   0x8(%ebp)
c0104aee:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104af5:	7f f0                	jg     c0104ae7 <find_order+0xf>
		order++;
	return order;
c0104af7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104afa:	c9                   	leave  
c0104afb:	c3                   	ret    

c0104afc <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104afc:	55                   	push   %ebp
c0104afd:	89 e5                	mov    %esp,%ebp
c0104aff:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104b02:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104b09:	77 38                	ja     c0104b43 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104b0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b0e:	8d 50 08             	lea    0x8(%eax),%edx
c0104b11:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b18:	00 
c0104b19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b20:	89 14 24             	mov    %edx,(%esp)
c0104b23:	e8 82 fc ff ff       	call   c01047aa <slob_alloc>
c0104b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104b2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b2f:	74 08                	je     c0104b39 <__kmalloc+0x3d>
c0104b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b34:	83 c0 08             	add    $0x8,%eax
c0104b37:	eb 05                	jmp    c0104b3e <__kmalloc+0x42>
c0104b39:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b3e:	e9 a6 00 00 00       	jmp    c0104be9 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104b43:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b4a:	00 
c0104b4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b52:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104b59:	e8 4c fc ff ff       	call   c01047aa <slob_alloc>
c0104b5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104b61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104b65:	75 07                	jne    c0104b6e <__kmalloc+0x72>
		return 0;
c0104b67:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b6c:	eb 7b                	jmp    c0104be9 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104b6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b71:	89 04 24             	mov    %eax,(%esp)
c0104b74:	e8 5f ff ff ff       	call   c0104ad8 <find_order>
c0104b79:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b7c:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104b7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b81:	8b 00                	mov    (%eax),%eax
c0104b83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b8a:	89 04 24             	mov    %eax,(%esp)
c0104b8d:	e8 ab fb ff ff       	call   c010473d <__slob_get_free_pages>
c0104b92:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b95:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b9b:	8b 40 04             	mov    0x4(%eax),%eax
c0104b9e:	85 c0                	test   %eax,%eax
c0104ba0:	74 2f                	je     c0104bd1 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104ba2:	e8 4c fa ff ff       	call   c01045f3 <__intr_save>
c0104ba7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104baa:	8b 15 64 fd 1a c0    	mov    0xc01afd64,%edx
c0104bb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bb3:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104bb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bb9:	a3 64 fd 1a c0       	mov    %eax,0xc01afd64
		spin_unlock_irqrestore(&block_lock, flags);
c0104bbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104bc1:	89 04 24             	mov    %eax,(%esp)
c0104bc4:	e8 54 fa ff ff       	call   c010461d <__intr_restore>
		return bb->pages;
c0104bc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bcc:	8b 40 04             	mov    0x4(%eax),%eax
c0104bcf:	eb 18                	jmp    c0104be9 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104bd1:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104bd8:	00 
c0104bd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bdc:	89 04 24             	mov    %eax,(%esp)
c0104bdf:	e8 9b fd ff ff       	call   c010497f <slob_free>
	return 0;
c0104be4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104be9:	c9                   	leave  
c0104bea:	c3                   	ret    

c0104beb <kmalloc>:

void *
kmalloc(size_t size)
{
c0104beb:	55                   	push   %ebp
c0104bec:	89 e5                	mov    %esp,%ebp
c0104bee:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104bf1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104bf8:	00 
c0104bf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bfc:	89 04 24             	mov    %eax,(%esp)
c0104bff:	e8 f8 fe ff ff       	call   c0104afc <__kmalloc>
}
c0104c04:	c9                   	leave  
c0104c05:	c3                   	ret    

c0104c06 <kfree>:


void kfree(void *block)
{
c0104c06:	55                   	push   %ebp
c0104c07:	89 e5                	mov    %esp,%ebp
c0104c09:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104c0c:	c7 45 f0 64 fd 1a c0 	movl   $0xc01afd64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104c13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104c17:	75 05                	jne    c0104c1e <kfree+0x18>
		return;
c0104c19:	e9 a2 00 00 00       	jmp    c0104cc0 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104c1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c21:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104c26:	85 c0                	test   %eax,%eax
c0104c28:	75 7f                	jne    c0104ca9 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104c2a:	e8 c4 f9 ff ff       	call   c01045f3 <__intr_save>
c0104c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104c32:	a1 64 fd 1a c0       	mov    0xc01afd64,%eax
c0104c37:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c3a:	eb 5c                	jmp    c0104c98 <kfree+0x92>
			if (bb->pages == block) {
c0104c3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c3f:	8b 40 04             	mov    0x4(%eax),%eax
c0104c42:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c45:	75 3f                	jne    c0104c86 <kfree+0x80>
				*last = bb->next;
c0104c47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c4a:	8b 50 08             	mov    0x8(%eax),%edx
c0104c4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c50:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104c52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c55:	89 04 24             	mov    %eax,(%esp)
c0104c58:	e8 c0 f9 ff ff       	call   c010461d <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c60:	8b 10                	mov    (%eax),%edx
c0104c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c65:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104c69:	89 04 24             	mov    %eax,(%esp)
c0104c6c:	e8 05 fb ff ff       	call   c0104776 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104c71:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104c78:	00 
c0104c79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c7c:	89 04 24             	mov    %eax,(%esp)
c0104c7f:	e8 fb fc ff ff       	call   c010497f <slob_free>
				return;
c0104c84:	eb 3a                	jmp    c0104cc0 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c89:	83 c0 08             	add    $0x8,%eax
c0104c8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c92:	8b 40 08             	mov    0x8(%eax),%eax
c0104c95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c9c:	75 9e                	jne    c0104c3c <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104c9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ca1:	89 04 24             	mov    %eax,(%esp)
c0104ca4:	e8 74 f9 ff ff       	call   c010461d <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104ca9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cac:	83 e8 08             	sub    $0x8,%eax
c0104caf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cb6:	00 
c0104cb7:	89 04 24             	mov    %eax,(%esp)
c0104cba:	e8 c0 fc ff ff       	call   c010497f <slob_free>
	return;
c0104cbf:	90                   	nop
}
c0104cc0:	c9                   	leave  
c0104cc1:	c3                   	ret    

c0104cc2 <ksize>:


unsigned int ksize(const void *block)
{
c0104cc2:	55                   	push   %ebp
c0104cc3:	89 e5                	mov    %esp,%ebp
c0104cc5:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104cc8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ccc:	75 07                	jne    c0104cd5 <ksize+0x13>
		return 0;
c0104cce:	b8 00 00 00 00       	mov    $0x0,%eax
c0104cd3:	eb 6b                	jmp    c0104d40 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104cd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cd8:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104cdd:	85 c0                	test   %eax,%eax
c0104cdf:	75 54                	jne    c0104d35 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104ce1:	e8 0d f9 ff ff       	call   c01045f3 <__intr_save>
c0104ce6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104ce9:	a1 64 fd 1a c0       	mov    0xc01afd64,%eax
c0104cee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cf1:	eb 31                	jmp    c0104d24 <ksize+0x62>
			if (bb->pages == block) {
c0104cf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cf6:	8b 40 04             	mov    0x4(%eax),%eax
c0104cf9:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104cfc:	75 1d                	jne    c0104d1b <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d01:	89 04 24             	mov    %eax,(%esp)
c0104d04:	e8 14 f9 ff ff       	call   c010461d <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d0c:	8b 00                	mov    (%eax),%eax
c0104d0e:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104d13:	89 c1                	mov    %eax,%ecx
c0104d15:	d3 e2                	shl    %cl,%edx
c0104d17:	89 d0                	mov    %edx,%eax
c0104d19:	eb 25                	jmp    c0104d40 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104d1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d1e:	8b 40 08             	mov    0x8(%eax),%eax
c0104d21:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d28:	75 c9                	jne    c0104cf3 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d2d:	89 04 24             	mov    %eax,(%esp)
c0104d30:	e8 e8 f8 ff ff       	call   c010461d <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d38:	83 e8 08             	sub    $0x8,%eax
c0104d3b:	8b 00                	mov    (%eax),%eax
c0104d3d:	c1 e0 03             	shl    $0x3,%eax
}
c0104d40:	c9                   	leave  
c0104d41:	c3                   	ret    

c0104d42 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104d42:	55                   	push   %ebp
c0104d43:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104d45:	8b 55 08             	mov    0x8(%ebp),%edx
c0104d48:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0104d4d:	29 c2                	sub    %eax,%edx
c0104d4f:	89 d0                	mov    %edx,%eax
c0104d51:	c1 f8 05             	sar    $0x5,%eax
}
c0104d54:	5d                   	pop    %ebp
c0104d55:	c3                   	ret    

c0104d56 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104d56:	55                   	push   %ebp
c0104d57:	89 e5                	mov    %esp,%ebp
c0104d59:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104d5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d5f:	89 04 24             	mov    %eax,(%esp)
c0104d62:	e8 db ff ff ff       	call   c0104d42 <page2ppn>
c0104d67:	c1 e0 0c             	shl    $0xc,%eax
}
c0104d6a:	c9                   	leave  
c0104d6b:	c3                   	ret    

c0104d6c <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104d6c:	55                   	push   %ebp
c0104d6d:	89 e5                	mov    %esp,%ebp
c0104d6f:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104d72:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d75:	c1 e8 0c             	shr    $0xc,%eax
c0104d78:	89 c2                	mov    %eax,%edx
c0104d7a:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0104d7f:	39 c2                	cmp    %eax,%edx
c0104d81:	72 1c                	jb     c0104d9f <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104d83:	c7 44 24 08 7c d4 10 	movl   $0xc010d47c,0x8(%esp)
c0104d8a:	c0 
c0104d8b:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104d92:	00 
c0104d93:	c7 04 24 9b d4 10 c0 	movl   $0xc010d49b,(%esp)
c0104d9a:	e8 3b c0 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0104d9f:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0104da4:	8b 55 08             	mov    0x8(%ebp),%edx
c0104da7:	c1 ea 0c             	shr    $0xc,%edx
c0104daa:	c1 e2 05             	shl    $0x5,%edx
c0104dad:	01 d0                	add    %edx,%eax
}
c0104daf:	c9                   	leave  
c0104db0:	c3                   	ret    

c0104db1 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104db1:	55                   	push   %ebp
c0104db2:	89 e5                	mov    %esp,%ebp
c0104db4:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104db7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dba:	89 04 24             	mov    %eax,(%esp)
c0104dbd:	e8 94 ff ff ff       	call   c0104d56 <page2pa>
c0104dc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dc8:	c1 e8 0c             	shr    $0xc,%eax
c0104dcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104dce:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0104dd3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104dd6:	72 23                	jb     c0104dfb <page2kva+0x4a>
c0104dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ddb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104ddf:	c7 44 24 08 ac d4 10 	movl   $0xc010d4ac,0x8(%esp)
c0104de6:	c0 
c0104de7:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104dee:	00 
c0104def:	c7 04 24 9b d4 10 c0 	movl   $0xc010d49b,(%esp)
c0104df6:	e8 df bf ff ff       	call   c0100dda <__panic>
c0104dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dfe:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104e03:	c9                   	leave  
c0104e04:	c3                   	ret    

c0104e05 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104e05:	55                   	push   %ebp
c0104e06:	89 e5                	mov    %esp,%ebp
c0104e08:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e0e:	83 e0 01             	and    $0x1,%eax
c0104e11:	85 c0                	test   %eax,%eax
c0104e13:	75 1c                	jne    c0104e31 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104e15:	c7 44 24 08 d0 d4 10 	movl   $0xc010d4d0,0x8(%esp)
c0104e1c:	c0 
c0104e1d:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104e24:	00 
c0104e25:	c7 04 24 9b d4 10 c0 	movl   $0xc010d49b,(%esp)
c0104e2c:	e8 a9 bf ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104e31:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104e39:	89 04 24             	mov    %eax,(%esp)
c0104e3c:	e8 2b ff ff ff       	call   c0104d6c <pa2page>
}
c0104e41:	c9                   	leave  
c0104e42:	c3                   	ret    

c0104e43 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104e43:	55                   	push   %ebp
c0104e44:	89 e5                	mov    %esp,%ebp
c0104e46:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104e49:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e4c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104e51:	89 04 24             	mov    %eax,(%esp)
c0104e54:	e8 13 ff ff ff       	call   c0104d6c <pa2page>
}
c0104e59:	c9                   	leave  
c0104e5a:	c3                   	ret    

c0104e5b <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104e5b:	55                   	push   %ebp
c0104e5c:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104e5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e61:	8b 00                	mov    (%eax),%eax
}
c0104e63:	5d                   	pop    %ebp
c0104e64:	c3                   	ret    

c0104e65 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104e65:	55                   	push   %ebp
c0104e66:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104e68:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e6b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e6e:	89 10                	mov    %edx,(%eax)
}
c0104e70:	5d                   	pop    %ebp
c0104e71:	c3                   	ret    

c0104e72 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104e72:	55                   	push   %ebp
c0104e73:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e78:	8b 00                	mov    (%eax),%eax
c0104e7a:	8d 50 01             	lea    0x1(%eax),%edx
c0104e7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e80:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104e82:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e85:	8b 00                	mov    (%eax),%eax
}
c0104e87:	5d                   	pop    %ebp
c0104e88:	c3                   	ret    

c0104e89 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104e89:	55                   	push   %ebp
c0104e8a:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104e8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e8f:	8b 00                	mov    (%eax),%eax
c0104e91:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104e94:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e97:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104e99:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e9c:	8b 00                	mov    (%eax),%eax
}
c0104e9e:	5d                   	pop    %ebp
c0104e9f:	c3                   	ret    

c0104ea0 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104ea0:	55                   	push   %ebp
c0104ea1:	89 e5                	mov    %esp,%ebp
c0104ea3:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104ea6:	9c                   	pushf  
c0104ea7:	58                   	pop    %eax
c0104ea8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104eae:	25 00 02 00 00       	and    $0x200,%eax
c0104eb3:	85 c0                	test   %eax,%eax
c0104eb5:	74 0c                	je     c0104ec3 <__intr_save+0x23>
        intr_disable();
c0104eb7:	e8 76 d1 ff ff       	call   c0102032 <intr_disable>
        return 1;
c0104ebc:	b8 01 00 00 00       	mov    $0x1,%eax
c0104ec1:	eb 05                	jmp    c0104ec8 <__intr_save+0x28>
    }
    return 0;
c0104ec3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ec8:	c9                   	leave  
c0104ec9:	c3                   	ret    

c0104eca <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104eca:	55                   	push   %ebp
c0104ecb:	89 e5                	mov    %esp,%ebp
c0104ecd:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104ed0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ed4:	74 05                	je     c0104edb <__intr_restore+0x11>
        intr_enable();
c0104ed6:	e8 51 d1 ff ff       	call   c010202c <intr_enable>
    }
}
c0104edb:	c9                   	leave  
c0104edc:	c3                   	ret    

c0104edd <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104edd:	55                   	push   %ebp
c0104ede:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104ee0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee3:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104ee6:	b8 23 00 00 00       	mov    $0x23,%eax
c0104eeb:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104eed:	b8 23 00 00 00       	mov    $0x23,%eax
c0104ef2:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104ef4:	b8 10 00 00 00       	mov    $0x10,%eax
c0104ef9:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104efb:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f00:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104f02:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f07:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104f09:	ea 10 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104f10
}
c0104f10:	5d                   	pop    %ebp
c0104f11:	c3                   	ret    

c0104f12 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104f12:	55                   	push   %ebp
c0104f13:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104f15:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f18:	a3 a4 fd 1a c0       	mov    %eax,0xc01afda4
}
c0104f1d:	5d                   	pop    %ebp
c0104f1e:	c3                   	ret    

c0104f1f <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104f1f:	55                   	push   %ebp
c0104f20:	89 e5                	mov    %esp,%ebp
c0104f22:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104f25:	b8 00 d0 12 c0       	mov    $0xc012d000,%eax
c0104f2a:	89 04 24             	mov    %eax,(%esp)
c0104f2d:	e8 e0 ff ff ff       	call   c0104f12 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104f32:	66 c7 05 a8 fd 1a c0 	movw   $0x10,0xc01afda8
c0104f39:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104f3b:	66 c7 05 48 da 12 c0 	movw   $0x68,0xc012da48
c0104f42:	68 00 
c0104f44:	b8 a0 fd 1a c0       	mov    $0xc01afda0,%eax
c0104f49:	66 a3 4a da 12 c0    	mov    %ax,0xc012da4a
c0104f4f:	b8 a0 fd 1a c0       	mov    $0xc01afda0,%eax
c0104f54:	c1 e8 10             	shr    $0x10,%eax
c0104f57:	a2 4c da 12 c0       	mov    %al,0xc012da4c
c0104f5c:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0104f63:	83 e0 f0             	and    $0xfffffff0,%eax
c0104f66:	83 c8 09             	or     $0x9,%eax
c0104f69:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0104f6e:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0104f75:	83 e0 ef             	and    $0xffffffef,%eax
c0104f78:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0104f7d:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0104f84:	83 e0 9f             	and    $0xffffff9f,%eax
c0104f87:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0104f8c:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0104f93:	83 c8 80             	or     $0xffffff80,%eax
c0104f96:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0104f9b:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0104fa2:	83 e0 f0             	and    $0xfffffff0,%eax
c0104fa5:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0104faa:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0104fb1:	83 e0 ef             	and    $0xffffffef,%eax
c0104fb4:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0104fb9:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0104fc0:	83 e0 df             	and    $0xffffffdf,%eax
c0104fc3:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0104fc8:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0104fcf:	83 c8 40             	or     $0x40,%eax
c0104fd2:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0104fd7:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0104fde:	83 e0 7f             	and    $0x7f,%eax
c0104fe1:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c0104fe6:	b8 a0 fd 1a c0       	mov    $0xc01afda0,%eax
c0104feb:	c1 e8 18             	shr    $0x18,%eax
c0104fee:	a2 4f da 12 c0       	mov    %al,0xc012da4f

    // reload all segment registers
    lgdt(&gdt_pd);
c0104ff3:	c7 04 24 50 da 12 c0 	movl   $0xc012da50,(%esp)
c0104ffa:	e8 de fe ff ff       	call   c0104edd <lgdt>
c0104fff:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0105005:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0105009:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010500c:	c9                   	leave  
c010500d:	c3                   	ret    

c010500e <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010500e:	55                   	push   %ebp
c010500f:	89 e5                	mov    %esp,%ebp
c0105011:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c0105014:	c7 05 88 1e 1b c0 70 	movl   $0xc010d370,0xc01b1e88
c010501b:	d3 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010501e:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c0105023:	8b 00                	mov    (%eax),%eax
c0105025:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105029:	c7 04 24 fc d4 10 c0 	movl   $0xc010d4fc,(%esp)
c0105030:	e8 23 b3 ff ff       	call   c0100358 <cprintf>
    pmm_manager->init();
c0105035:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c010503a:	8b 40 04             	mov    0x4(%eax),%eax
c010503d:	ff d0                	call   *%eax
}
c010503f:	c9                   	leave  
c0105040:	c3                   	ret    

c0105041 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105041:	55                   	push   %ebp
c0105042:	89 e5                	mov    %esp,%ebp
c0105044:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105047:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c010504c:	8b 40 08             	mov    0x8(%eax),%eax
c010504f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105052:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105056:	8b 55 08             	mov    0x8(%ebp),%edx
c0105059:	89 14 24             	mov    %edx,(%esp)
c010505c:	ff d0                	call   *%eax
}
c010505e:	c9                   	leave  
c010505f:	c3                   	ret    

c0105060 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105060:	55                   	push   %ebp
c0105061:	89 e5                	mov    %esp,%ebp
c0105063:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105066:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010506d:	e8 2e fe ff ff       	call   c0104ea0 <__intr_save>
c0105072:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105075:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c010507a:	8b 40 0c             	mov    0xc(%eax),%eax
c010507d:	8b 55 08             	mov    0x8(%ebp),%edx
c0105080:	89 14 24             	mov    %edx,(%esp)
c0105083:	ff d0                	call   *%eax
c0105085:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105088:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010508b:	89 04 24             	mov    %eax,(%esp)
c010508e:	e8 37 fe ff ff       	call   c0104eca <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105093:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105097:	75 2d                	jne    c01050c6 <alloc_pages+0x66>
c0105099:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010509d:	77 27                	ja     c01050c6 <alloc_pages+0x66>
c010509f:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c01050a4:	85 c0                	test   %eax,%eax
c01050a6:	74 1e                	je     c01050c6 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01050a8:	8b 55 08             	mov    0x8(%ebp),%edx
c01050ab:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c01050b0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01050b7:	00 
c01050b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01050bc:	89 04 24             	mov    %eax,(%esp)
c01050bf:	e8 9c 1d 00 00       	call   c0106e60 <swap_out>
    }
c01050c4:	eb a7                	jmp    c010506d <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01050c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01050c9:	c9                   	leave  
c01050ca:	c3                   	ret    

c01050cb <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01050cb:	55                   	push   %ebp
c01050cc:	89 e5                	mov    %esp,%ebp
c01050ce:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01050d1:	e8 ca fd ff ff       	call   c0104ea0 <__intr_save>
c01050d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01050d9:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c01050de:	8b 40 10             	mov    0x10(%eax),%eax
c01050e1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01050e4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01050e8:	8b 55 08             	mov    0x8(%ebp),%edx
c01050eb:	89 14 24             	mov    %edx,(%esp)
c01050ee:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01050f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050f3:	89 04 24             	mov    %eax,(%esp)
c01050f6:	e8 cf fd ff ff       	call   c0104eca <__intr_restore>
}
c01050fb:	c9                   	leave  
c01050fc:	c3                   	ret    

c01050fd <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01050fd:	55                   	push   %ebp
c01050fe:	89 e5                	mov    %esp,%ebp
c0105100:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0105103:	e8 98 fd ff ff       	call   c0104ea0 <__intr_save>
c0105108:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010510b:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c0105110:	8b 40 14             	mov    0x14(%eax),%eax
c0105113:	ff d0                	call   *%eax
c0105115:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0105118:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010511b:	89 04 24             	mov    %eax,(%esp)
c010511e:	e8 a7 fd ff ff       	call   c0104eca <__intr_restore>
    return ret;
c0105123:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0105126:	c9                   	leave  
c0105127:	c3                   	ret    

c0105128 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0105128:	55                   	push   %ebp
c0105129:	89 e5                	mov    %esp,%ebp
c010512b:	57                   	push   %edi
c010512c:	56                   	push   %esi
c010512d:	53                   	push   %ebx
c010512e:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105134:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010513b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105142:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105149:	c7 04 24 13 d5 10 c0 	movl   $0xc010d513,(%esp)
c0105150:	e8 03 b2 ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105155:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010515c:	e9 15 01 00 00       	jmp    c0105276 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105161:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105164:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105167:	89 d0                	mov    %edx,%eax
c0105169:	c1 e0 02             	shl    $0x2,%eax
c010516c:	01 d0                	add    %edx,%eax
c010516e:	c1 e0 02             	shl    $0x2,%eax
c0105171:	01 c8                	add    %ecx,%eax
c0105173:	8b 50 08             	mov    0x8(%eax),%edx
c0105176:	8b 40 04             	mov    0x4(%eax),%eax
c0105179:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010517c:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010517f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105182:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105185:	89 d0                	mov    %edx,%eax
c0105187:	c1 e0 02             	shl    $0x2,%eax
c010518a:	01 d0                	add    %edx,%eax
c010518c:	c1 e0 02             	shl    $0x2,%eax
c010518f:	01 c8                	add    %ecx,%eax
c0105191:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105194:	8b 58 10             	mov    0x10(%eax),%ebx
c0105197:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010519a:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010519d:	01 c8                	add    %ecx,%eax
c010519f:	11 da                	adc    %ebx,%edx
c01051a1:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01051a4:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01051a7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051aa:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051ad:	89 d0                	mov    %edx,%eax
c01051af:	c1 e0 02             	shl    $0x2,%eax
c01051b2:	01 d0                	add    %edx,%eax
c01051b4:	c1 e0 02             	shl    $0x2,%eax
c01051b7:	01 c8                	add    %ecx,%eax
c01051b9:	83 c0 14             	add    $0x14,%eax
c01051bc:	8b 00                	mov    (%eax),%eax
c01051be:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01051c4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01051c7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01051ca:	83 c0 ff             	add    $0xffffffff,%eax
c01051cd:	83 d2 ff             	adc    $0xffffffff,%edx
c01051d0:	89 c6                	mov    %eax,%esi
c01051d2:	89 d7                	mov    %edx,%edi
c01051d4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051da:	89 d0                	mov    %edx,%eax
c01051dc:	c1 e0 02             	shl    $0x2,%eax
c01051df:	01 d0                	add    %edx,%eax
c01051e1:	c1 e0 02             	shl    $0x2,%eax
c01051e4:	01 c8                	add    %ecx,%eax
c01051e6:	8b 48 0c             	mov    0xc(%eax),%ecx
c01051e9:	8b 58 10             	mov    0x10(%eax),%ebx
c01051ec:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01051f2:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01051f6:	89 74 24 14          	mov    %esi,0x14(%esp)
c01051fa:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01051fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105201:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105204:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105208:	89 54 24 10          	mov    %edx,0x10(%esp)
c010520c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105210:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105214:	c7 04 24 20 d5 10 c0 	movl   $0xc010d520,(%esp)
c010521b:	e8 38 b1 ff ff       	call   c0100358 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0105220:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105223:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105226:	89 d0                	mov    %edx,%eax
c0105228:	c1 e0 02             	shl    $0x2,%eax
c010522b:	01 d0                	add    %edx,%eax
c010522d:	c1 e0 02             	shl    $0x2,%eax
c0105230:	01 c8                	add    %ecx,%eax
c0105232:	83 c0 14             	add    $0x14,%eax
c0105235:	8b 00                	mov    (%eax),%eax
c0105237:	83 f8 01             	cmp    $0x1,%eax
c010523a:	75 36                	jne    c0105272 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c010523c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010523f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105242:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105245:	77 2b                	ja     c0105272 <page_init+0x14a>
c0105247:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010524a:	72 05                	jb     c0105251 <page_init+0x129>
c010524c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010524f:	73 21                	jae    c0105272 <page_init+0x14a>
c0105251:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105255:	77 1b                	ja     c0105272 <page_init+0x14a>
c0105257:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010525b:	72 09                	jb     c0105266 <page_init+0x13e>
c010525d:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105264:	77 0c                	ja     c0105272 <page_init+0x14a>
                maxpa = end;
c0105266:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105269:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010526c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010526f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105272:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105276:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105279:	8b 00                	mov    (%eax),%eax
c010527b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010527e:	0f 8f dd fe ff ff    	jg     c0105161 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105284:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105288:	72 1d                	jb     c01052a7 <page_init+0x17f>
c010528a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010528e:	77 09                	ja     c0105299 <page_init+0x171>
c0105290:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105297:	76 0e                	jbe    c01052a7 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105299:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01052a0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01052a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01052aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01052ad:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01052b1:	c1 ea 0c             	shr    $0xc,%edx
c01052b4:	a3 80 fd 1a c0       	mov    %eax,0xc01afd80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01052b9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01052c0:	b8 78 1f 1b c0       	mov    $0xc01b1f78,%eax
c01052c5:	8d 50 ff             	lea    -0x1(%eax),%edx
c01052c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01052cb:	01 d0                	add    %edx,%eax
c01052cd:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01052d0:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01052d3:	ba 00 00 00 00       	mov    $0x0,%edx
c01052d8:	f7 75 ac             	divl   -0x54(%ebp)
c01052db:	89 d0                	mov    %edx,%eax
c01052dd:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01052e0:	29 c2                	sub    %eax,%edx
c01052e2:	89 d0                	mov    %edx,%eax
c01052e4:	a3 90 1e 1b c0       	mov    %eax,0xc01b1e90

    for (i = 0; i < npage; i ++) {
c01052e9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01052f0:	eb 27                	jmp    c0105319 <page_init+0x1f1>
        SetPageReserved(pages + i);
c01052f2:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c01052f7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052fa:	c1 e2 05             	shl    $0x5,%edx
c01052fd:	01 d0                	add    %edx,%eax
c01052ff:	83 c0 04             	add    $0x4,%eax
c0105302:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0105309:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010530c:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010530f:	8b 55 90             	mov    -0x70(%ebp),%edx
c0105312:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0105315:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105319:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010531c:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0105321:	39 c2                	cmp    %eax,%edx
c0105323:	72 cd                	jb     c01052f2 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105325:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010532a:	c1 e0 05             	shl    $0x5,%eax
c010532d:	89 c2                	mov    %eax,%edx
c010532f:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0105334:	01 d0                	add    %edx,%eax
c0105336:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105339:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105340:	77 23                	ja     c0105365 <page_init+0x23d>
c0105342:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105345:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105349:	c7 44 24 08 50 d5 10 	movl   $0xc010d550,0x8(%esp)
c0105350:	c0 
c0105351:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105358:	00 
c0105359:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105360:	e8 75 ba ff ff       	call   c0100dda <__panic>
c0105365:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105368:	05 00 00 00 40       	add    $0x40000000,%eax
c010536d:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105370:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105377:	e9 74 01 00 00       	jmp    c01054f0 <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010537c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010537f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105382:	89 d0                	mov    %edx,%eax
c0105384:	c1 e0 02             	shl    $0x2,%eax
c0105387:	01 d0                	add    %edx,%eax
c0105389:	c1 e0 02             	shl    $0x2,%eax
c010538c:	01 c8                	add    %ecx,%eax
c010538e:	8b 50 08             	mov    0x8(%eax),%edx
c0105391:	8b 40 04             	mov    0x4(%eax),%eax
c0105394:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105397:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010539a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010539d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053a0:	89 d0                	mov    %edx,%eax
c01053a2:	c1 e0 02             	shl    $0x2,%eax
c01053a5:	01 d0                	add    %edx,%eax
c01053a7:	c1 e0 02             	shl    $0x2,%eax
c01053aa:	01 c8                	add    %ecx,%eax
c01053ac:	8b 48 0c             	mov    0xc(%eax),%ecx
c01053af:	8b 58 10             	mov    0x10(%eax),%ebx
c01053b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01053b5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01053b8:	01 c8                	add    %ecx,%eax
c01053ba:	11 da                	adc    %ebx,%edx
c01053bc:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01053bf:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01053c2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053c5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053c8:	89 d0                	mov    %edx,%eax
c01053ca:	c1 e0 02             	shl    $0x2,%eax
c01053cd:	01 d0                	add    %edx,%eax
c01053cf:	c1 e0 02             	shl    $0x2,%eax
c01053d2:	01 c8                	add    %ecx,%eax
c01053d4:	83 c0 14             	add    $0x14,%eax
c01053d7:	8b 00                	mov    (%eax),%eax
c01053d9:	83 f8 01             	cmp    $0x1,%eax
c01053dc:	0f 85 0a 01 00 00    	jne    c01054ec <page_init+0x3c4>
            if (begin < freemem) {
c01053e2:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01053e5:	ba 00 00 00 00       	mov    $0x0,%edx
c01053ea:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01053ed:	72 17                	jb     c0105406 <page_init+0x2de>
c01053ef:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01053f2:	77 05                	ja     c01053f9 <page_init+0x2d1>
c01053f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01053f7:	76 0d                	jbe    c0105406 <page_init+0x2de>
                begin = freemem;
c01053f9:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01053fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01053ff:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105406:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010540a:	72 1d                	jb     c0105429 <page_init+0x301>
c010540c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105410:	77 09                	ja     c010541b <page_init+0x2f3>
c0105412:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0105419:	76 0e                	jbe    c0105429 <page_init+0x301>
                end = KMEMSIZE;
c010541b:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0105422:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105429:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010542c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010542f:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105432:	0f 87 b4 00 00 00    	ja     c01054ec <page_init+0x3c4>
c0105438:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010543b:	72 09                	jb     c0105446 <page_init+0x31e>
c010543d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105440:	0f 83 a6 00 00 00    	jae    c01054ec <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c0105446:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010544d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105450:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105453:	01 d0                	add    %edx,%eax
c0105455:	83 e8 01             	sub    $0x1,%eax
c0105458:	89 45 98             	mov    %eax,-0x68(%ebp)
c010545b:	8b 45 98             	mov    -0x68(%ebp),%eax
c010545e:	ba 00 00 00 00       	mov    $0x0,%edx
c0105463:	f7 75 9c             	divl   -0x64(%ebp)
c0105466:	89 d0                	mov    %edx,%eax
c0105468:	8b 55 98             	mov    -0x68(%ebp),%edx
c010546b:	29 c2                	sub    %eax,%edx
c010546d:	89 d0                	mov    %edx,%eax
c010546f:	ba 00 00 00 00       	mov    $0x0,%edx
c0105474:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105477:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c010547a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010547d:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105480:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105483:	ba 00 00 00 00       	mov    $0x0,%edx
c0105488:	89 c7                	mov    %eax,%edi
c010548a:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0105490:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105493:	89 d0                	mov    %edx,%eax
c0105495:	83 e0 00             	and    $0x0,%eax
c0105498:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010549b:	8b 45 80             	mov    -0x80(%ebp),%eax
c010549e:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01054a1:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01054a4:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c01054a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054aa:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054ad:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054b0:	77 3a                	ja     c01054ec <page_init+0x3c4>
c01054b2:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054b5:	72 05                	jb     c01054bc <page_init+0x394>
c01054b7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01054ba:	73 30                	jae    c01054ec <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01054bc:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01054bf:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01054c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01054c5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01054c8:	29 c8                	sub    %ecx,%eax
c01054ca:	19 da                	sbb    %ebx,%edx
c01054cc:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01054d0:	c1 ea 0c             	shr    $0xc,%edx
c01054d3:	89 c3                	mov    %eax,%ebx
c01054d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054d8:	89 04 24             	mov    %eax,(%esp)
c01054db:	e8 8c f8 ff ff       	call   c0104d6c <pa2page>
c01054e0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01054e4:	89 04 24             	mov    %eax,(%esp)
c01054e7:	e8 55 fb ff ff       	call   c0105041 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01054ec:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01054f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01054f3:	8b 00                	mov    (%eax),%eax
c01054f5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01054f8:	0f 8f 7e fe ff ff    	jg     c010537c <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01054fe:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c0105504:	5b                   	pop    %ebx
c0105505:	5e                   	pop    %esi
c0105506:	5f                   	pop    %edi
c0105507:	5d                   	pop    %ebp
c0105508:	c3                   	ret    

c0105509 <enable_paging>:

static void
enable_paging(void) {
c0105509:	55                   	push   %ebp
c010550a:	89 e5                	mov    %esp,%ebp
c010550c:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c010550f:	a1 8c 1e 1b c0       	mov    0xc01b1e8c,%eax
c0105514:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0105517:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010551a:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c010551d:	0f 20 c0             	mov    %cr0,%eax
c0105520:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0105523:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0105526:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0105529:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0105530:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c0105534:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105537:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c010553a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010553d:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0105540:	c9                   	leave  
c0105541:	c3                   	ret    

c0105542 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0105542:	55                   	push   %ebp
c0105543:	89 e5                	mov    %esp,%ebp
c0105545:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105548:	8b 45 14             	mov    0x14(%ebp),%eax
c010554b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010554e:	31 d0                	xor    %edx,%eax
c0105550:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105555:	85 c0                	test   %eax,%eax
c0105557:	74 24                	je     c010557d <boot_map_segment+0x3b>
c0105559:	c7 44 24 0c 82 d5 10 	movl   $0xc010d582,0xc(%esp)
c0105560:	c0 
c0105561:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105568:	c0 
c0105569:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0105570:	00 
c0105571:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105578:	e8 5d b8 ff ff       	call   c0100dda <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010557d:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105584:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105587:	25 ff 0f 00 00       	and    $0xfff,%eax
c010558c:	89 c2                	mov    %eax,%edx
c010558e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105591:	01 c2                	add    %eax,%edx
c0105593:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105596:	01 d0                	add    %edx,%eax
c0105598:	83 e8 01             	sub    $0x1,%eax
c010559b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010559e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01055a1:	ba 00 00 00 00       	mov    $0x0,%edx
c01055a6:	f7 75 f0             	divl   -0x10(%ebp)
c01055a9:	89 d0                	mov    %edx,%eax
c01055ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01055ae:	29 c2                	sub    %eax,%edx
c01055b0:	89 d0                	mov    %edx,%eax
c01055b2:	c1 e8 0c             	shr    $0xc,%eax
c01055b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c01055b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01055be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01055c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01055c6:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01055c9:	8b 45 14             	mov    0x14(%ebp),%eax
c01055cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01055cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01055d7:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01055da:	eb 6b                	jmp    c0105647 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01055dc:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01055e3:	00 
c01055e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01055eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01055ee:	89 04 24             	mov    %eax,(%esp)
c01055f1:	e8 d1 01 00 00       	call   c01057c7 <get_pte>
c01055f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01055f9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01055fd:	75 24                	jne    c0105623 <boot_map_segment+0xe1>
c01055ff:	c7 44 24 0c ae d5 10 	movl   $0xc010d5ae,0xc(%esp)
c0105606:	c0 
c0105607:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010560e:	c0 
c010560f:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0105616:	00 
c0105617:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010561e:	e8 b7 b7 ff ff       	call   c0100dda <__panic>
        *ptep = pa | PTE_P | perm;
c0105623:	8b 45 18             	mov    0x18(%ebp),%eax
c0105626:	8b 55 14             	mov    0x14(%ebp),%edx
c0105629:	09 d0                	or     %edx,%eax
c010562b:	83 c8 01             	or     $0x1,%eax
c010562e:	89 c2                	mov    %eax,%edx
c0105630:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105633:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105635:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105639:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0105640:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105647:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010564b:	75 8f                	jne    c01055dc <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c010564d:	c9                   	leave  
c010564e:	c3                   	ret    

c010564f <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c010564f:	55                   	push   %ebp
c0105650:	89 e5                	mov    %esp,%ebp
c0105652:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105655:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010565c:	e8 ff f9 ff ff       	call   c0105060 <alloc_pages>
c0105661:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105664:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105668:	75 1c                	jne    c0105686 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c010566a:	c7 44 24 08 bb d5 10 	movl   $0xc010d5bb,0x8(%esp)
c0105671:	c0 
c0105672:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105679:	00 
c010567a:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105681:	e8 54 b7 ff ff       	call   c0100dda <__panic>
    }
    return page2kva(p);
c0105686:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105689:	89 04 24             	mov    %eax,(%esp)
c010568c:	e8 20 f7 ff ff       	call   c0104db1 <page2kva>
}
c0105691:	c9                   	leave  
c0105692:	c3                   	ret    

c0105693 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105693:	55                   	push   %ebp
c0105694:	89 e5                	mov    %esp,%ebp
c0105696:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105699:	e8 70 f9 ff ff       	call   c010500e <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010569e:	e8 85 fa ff ff       	call   c0105128 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c01056a3:	e8 5d 09 00 00       	call   c0106005 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c01056a8:	e8 a2 ff ff ff       	call   c010564f <boot_alloc_page>
c01056ad:	a3 84 fd 1a c0       	mov    %eax,0xc01afd84
    memset(boot_pgdir, 0, PGSIZE);
c01056b2:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01056b7:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01056be:	00 
c01056bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01056c6:	00 
c01056c7:	89 04 24             	mov    %eax,(%esp)
c01056ca:	e8 72 6e 00 00       	call   c010c541 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01056cf:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01056d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01056d7:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01056de:	77 23                	ja     c0105703 <pmm_init+0x70>
c01056e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01056e7:	c7 44 24 08 50 d5 10 	movl   $0xc010d550,0x8(%esp)
c01056ee:	c0 
c01056ef:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01056f6:	00 
c01056f7:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01056fe:	e8 d7 b6 ff ff       	call   c0100dda <__panic>
c0105703:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105706:	05 00 00 00 40       	add    $0x40000000,%eax
c010570b:	a3 8c 1e 1b c0       	mov    %eax,0xc01b1e8c

    check_pgdir();
c0105710:	e8 0e 09 00 00       	call   c0106023 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105715:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010571a:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105720:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0105725:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105728:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010572f:	77 23                	ja     c0105754 <pmm_init+0xc1>
c0105731:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105734:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105738:	c7 44 24 08 50 d5 10 	movl   $0xc010d550,0x8(%esp)
c010573f:	c0 
c0105740:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105747:	00 
c0105748:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010574f:	e8 86 b6 ff ff       	call   c0100dda <__panic>
c0105754:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105757:	05 00 00 00 40       	add    $0x40000000,%eax
c010575c:	83 c8 03             	or     $0x3,%eax
c010575f:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105761:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0105766:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c010576d:	00 
c010576e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105775:	00 
c0105776:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c010577d:	38 
c010577e:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105785:	c0 
c0105786:	89 04 24             	mov    %eax,(%esp)
c0105789:	e8 b4 fd ff ff       	call   c0105542 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010578e:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0105793:	8b 15 84 fd 1a c0    	mov    0xc01afd84,%edx
c0105799:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c010579f:	89 10                	mov    %edx,(%eax)

    enable_paging();
c01057a1:	e8 63 fd ff ff       	call   c0105509 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01057a6:	e8 74 f7 ff ff       	call   c0104f1f <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c01057ab:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01057b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01057b6:	e8 03 0f 00 00       	call   c01066be <check_boot_pgdir>

    print_pgdir();
c01057bb:	e8 8b 13 00 00       	call   c0106b4b <print_pgdir>
    
    kmalloc_init();
c01057c0:	e8 e6 f2 ff ff       	call   c0104aab <kmalloc_init>

}
c01057c5:	c9                   	leave  
c01057c6:	c3                   	ret    

c01057c7 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01057c7:	55                   	push   %ebp
c01057c8:	89 e5                	mov    %esp,%ebp
c01057ca:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01057cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057d0:	c1 e8 16             	shr    $0x16,%eax
c01057d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01057da:	8b 45 08             	mov    0x8(%ebp),%eax
c01057dd:	01 d0                	add    %edx,%eax
c01057df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c01057e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057e5:	8b 00                	mov    (%eax),%eax
c01057e7:	83 e0 01             	and    $0x1,%eax
c01057ea:	85 c0                	test   %eax,%eax
c01057ec:	0f 85 af 00 00 00    	jne    c01058a1 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c01057f2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01057f6:	74 15                	je     c010580d <get_pte+0x46>
c01057f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01057ff:	e8 5c f8 ff ff       	call   c0105060 <alloc_pages>
c0105804:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105807:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010580b:	75 0a                	jne    c0105817 <get_pte+0x50>
            return NULL;
c010580d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105812:	e9 e6 00 00 00       	jmp    c01058fd <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0105817:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010581e:	00 
c010581f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105822:	89 04 24             	mov    %eax,(%esp)
c0105825:	e8 3b f6 ff ff       	call   c0104e65 <set_page_ref>
        uintptr_t pa = page2pa(page);
c010582a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010582d:	89 04 24             	mov    %eax,(%esp)
c0105830:	e8 21 f5 ff ff       	call   c0104d56 <page2pa>
c0105835:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0105838:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010583b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010583e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105841:	c1 e8 0c             	shr    $0xc,%eax
c0105844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105847:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010584c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010584f:	72 23                	jb     c0105874 <get_pte+0xad>
c0105851:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105854:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105858:	c7 44 24 08 ac d4 10 	movl   $0xc010d4ac,0x8(%esp)
c010585f:	c0 
c0105860:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c0105867:	00 
c0105868:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010586f:	e8 66 b5 ff ff       	call   c0100dda <__panic>
c0105874:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105877:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010587c:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105883:	00 
c0105884:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010588b:	00 
c010588c:	89 04 24             	mov    %eax,(%esp)
c010588f:	e8 ad 6c 00 00       	call   c010c541 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c0105894:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105897:	83 c8 07             	or     $0x7,%eax
c010589a:	89 c2                	mov    %eax,%edx
c010589c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010589f:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01058a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058a4:	8b 00                	mov    (%eax),%eax
c01058a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01058ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01058ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058b1:	c1 e8 0c             	shr    $0xc,%eax
c01058b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01058b7:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01058bc:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01058bf:	72 23                	jb     c01058e4 <get_pte+0x11d>
c01058c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058c4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058c8:	c7 44 24 08 ac d4 10 	movl   $0xc010d4ac,0x8(%esp)
c01058cf:	c0 
c01058d0:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c01058d7:	00 
c01058d8:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01058df:	e8 f6 b4 ff ff       	call   c0100dda <__panic>
c01058e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058e7:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01058ec:	8b 55 0c             	mov    0xc(%ebp),%edx
c01058ef:	c1 ea 0c             	shr    $0xc,%edx
c01058f2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c01058f8:	c1 e2 02             	shl    $0x2,%edx
c01058fb:	01 d0                	add    %edx,%eax
}
c01058fd:	c9                   	leave  
c01058fe:	c3                   	ret    

c01058ff <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01058ff:	55                   	push   %ebp
c0105900:	89 e5                	mov    %esp,%ebp
c0105902:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105905:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010590c:	00 
c010590d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105910:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105914:	8b 45 08             	mov    0x8(%ebp),%eax
c0105917:	89 04 24             	mov    %eax,(%esp)
c010591a:	e8 a8 fe ff ff       	call   c01057c7 <get_pte>
c010591f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105922:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105926:	74 08                	je     c0105930 <get_page+0x31>
        *ptep_store = ptep;
c0105928:	8b 45 10             	mov    0x10(%ebp),%eax
c010592b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010592e:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105930:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105934:	74 1b                	je     c0105951 <get_page+0x52>
c0105936:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105939:	8b 00                	mov    (%eax),%eax
c010593b:	83 e0 01             	and    $0x1,%eax
c010593e:	85 c0                	test   %eax,%eax
c0105940:	74 0f                	je     c0105951 <get_page+0x52>
        return pte2page(*ptep);
c0105942:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105945:	8b 00                	mov    (%eax),%eax
c0105947:	89 04 24             	mov    %eax,(%esp)
c010594a:	e8 b6 f4 ff ff       	call   c0104e05 <pte2page>
c010594f:	eb 05                	jmp    c0105956 <get_page+0x57>
    }
    return NULL;
c0105951:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105956:	c9                   	leave  
c0105957:	c3                   	ret    

c0105958 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105958:	55                   	push   %ebp
c0105959:	89 e5                	mov    %esp,%ebp
c010595b:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c010595e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105961:	8b 00                	mov    (%eax),%eax
c0105963:	83 e0 01             	and    $0x1,%eax
c0105966:	85 c0                	test   %eax,%eax
c0105968:	74 4d                	je     c01059b7 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c010596a:	8b 45 10             	mov    0x10(%ebp),%eax
c010596d:	8b 00                	mov    (%eax),%eax
c010596f:	89 04 24             	mov    %eax,(%esp)
c0105972:	e8 8e f4 ff ff       	call   c0104e05 <pte2page>
c0105977:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c010597a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010597d:	89 04 24             	mov    %eax,(%esp)
c0105980:	e8 04 f5 ff ff       	call   c0104e89 <page_ref_dec>
c0105985:	85 c0                	test   %eax,%eax
c0105987:	75 13                	jne    c010599c <page_remove_pte+0x44>
            free_page(page);
c0105989:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105990:	00 
c0105991:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105994:	89 04 24             	mov    %eax,(%esp)
c0105997:	e8 2f f7 ff ff       	call   c01050cb <free_pages>
        }
        *ptep = 0;
c010599c:	8b 45 10             	mov    0x10(%ebp),%eax
c010599f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c01059a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01059af:	89 04 24             	mov    %eax,(%esp)
c01059b2:	e8 1d 05 00 00       	call   c0105ed4 <tlb_invalidate>
    }
}
c01059b7:	c9                   	leave  
c01059b8:	c3                   	ret    

c01059b9 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01059b9:	55                   	push   %ebp
c01059ba:	89 e5                	mov    %esp,%ebp
c01059bc:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01059bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059c2:	25 ff 0f 00 00       	and    $0xfff,%eax
c01059c7:	85 c0                	test   %eax,%eax
c01059c9:	75 0c                	jne    c01059d7 <unmap_range+0x1e>
c01059cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01059ce:	25 ff 0f 00 00       	and    $0xfff,%eax
c01059d3:	85 c0                	test   %eax,%eax
c01059d5:	74 24                	je     c01059fb <unmap_range+0x42>
c01059d7:	c7 44 24 0c d4 d5 10 	movl   $0xc010d5d4,0xc(%esp)
c01059de:	c0 
c01059df:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01059e6:	c0 
c01059e7:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c01059ee:	00 
c01059ef:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01059f6:	e8 df b3 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c01059fb:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105a02:	76 11                	jbe    c0105a15 <unmap_range+0x5c>
c0105a04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a07:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105a0a:	73 09                	jae    c0105a15 <unmap_range+0x5c>
c0105a0c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105a13:	76 24                	jbe    c0105a39 <unmap_range+0x80>
c0105a15:	c7 44 24 0c fd d5 10 	movl   $0xc010d5fd,0xc(%esp)
c0105a1c:	c0 
c0105a1d:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105a24:	c0 
c0105a25:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105a2c:	00 
c0105a2d:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105a34:	e8 a1 b3 ff ff       	call   c0100dda <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105a39:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105a40:	00 
c0105a41:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a44:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a48:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a4b:	89 04 24             	mov    %eax,(%esp)
c0105a4e:	e8 74 fd ff ff       	call   c01057c7 <get_pte>
c0105a53:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105a56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a5a:	75 18                	jne    c0105a74 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105a5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a5f:	05 00 00 40 00       	add    $0x400000,%eax
c0105a64:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a6a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105a6f:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105a72:	eb 29                	jmp    c0105a9d <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105a74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a77:	8b 00                	mov    (%eax),%eax
c0105a79:	85 c0                	test   %eax,%eax
c0105a7b:	74 19                	je     c0105a96 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105a7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a80:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105a84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a8e:	89 04 24             	mov    %eax,(%esp)
c0105a91:	e8 c2 fe ff ff       	call   c0105958 <page_remove_pte>
        }
        start += PGSIZE;
c0105a96:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105a9d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105aa1:	74 08                	je     c0105aab <unmap_range+0xf2>
c0105aa3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aa6:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105aa9:	72 8e                	jb     c0105a39 <unmap_range+0x80>
}
c0105aab:	c9                   	leave  
c0105aac:	c3                   	ret    

c0105aad <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105aad:	55                   	push   %ebp
c0105aae:	89 e5                	mov    %esp,%ebp
c0105ab0:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105ab3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ab6:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105abb:	85 c0                	test   %eax,%eax
c0105abd:	75 0c                	jne    c0105acb <exit_range+0x1e>
c0105abf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ac2:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ac7:	85 c0                	test   %eax,%eax
c0105ac9:	74 24                	je     c0105aef <exit_range+0x42>
c0105acb:	c7 44 24 0c d4 d5 10 	movl   $0xc010d5d4,0xc(%esp)
c0105ad2:	c0 
c0105ad3:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105ada:	c0 
c0105adb:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0105ae2:	00 
c0105ae3:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105aea:	e8 eb b2 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c0105aef:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105af6:	76 11                	jbe    c0105b09 <exit_range+0x5c>
c0105af8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105afb:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105afe:	73 09                	jae    c0105b09 <exit_range+0x5c>
c0105b00:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b07:	76 24                	jbe    c0105b2d <exit_range+0x80>
c0105b09:	c7 44 24 0c fd d5 10 	movl   $0xc010d5fd,0xc(%esp)
c0105b10:	c0 
c0105b11:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105b18:	c0 
c0105b19:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105b20:	00 
c0105b21:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105b28:	e8 ad b2 ff ff       	call   c0100dda <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b30:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b36:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b3b:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105b3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b41:	c1 e8 16             	shr    $0x16,%eax
c0105b44:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b4a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b54:	01 d0                	add    %edx,%eax
c0105b56:	8b 00                	mov    (%eax),%eax
c0105b58:	83 e0 01             	and    $0x1,%eax
c0105b5b:	85 c0                	test   %eax,%eax
c0105b5d:	74 3e                	je     c0105b9d <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b62:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b69:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b6c:	01 d0                	add    %edx,%eax
c0105b6e:	8b 00                	mov    (%eax),%eax
c0105b70:	89 04 24             	mov    %eax,(%esp)
c0105b73:	e8 cb f2 ff ff       	call   c0104e43 <pde2page>
c0105b78:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105b7f:	00 
c0105b80:	89 04 24             	mov    %eax,(%esp)
c0105b83:	e8 43 f5 ff ff       	call   c01050cb <free_pages>
            pgdir[pde_idx] = 0;
c0105b88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b8b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b92:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b95:	01 d0                	add    %edx,%eax
c0105b97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105b9d:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105ba4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105ba8:	74 08                	je     c0105bb2 <exit_range+0x105>
c0105baa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bad:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bb0:	72 8c                	jb     c0105b3e <exit_range+0x91>
}
c0105bb2:	c9                   	leave  
c0105bb3:	c3                   	ret    

c0105bb4 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105bb4:	55                   	push   %ebp
c0105bb5:	89 e5                	mov    %esp,%ebp
c0105bb7:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105bba:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bbd:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bc2:	85 c0                	test   %eax,%eax
c0105bc4:	75 0c                	jne    c0105bd2 <copy_range+0x1e>
c0105bc6:	8b 45 14             	mov    0x14(%ebp),%eax
c0105bc9:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bce:	85 c0                	test   %eax,%eax
c0105bd0:	74 24                	je     c0105bf6 <copy_range+0x42>
c0105bd2:	c7 44 24 0c d4 d5 10 	movl   $0xc010d5d4,0xc(%esp)
c0105bd9:	c0 
c0105bda:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105be1:	c0 
c0105be2:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105be9:	00 
c0105bea:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105bf1:	e8 e4 b1 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c0105bf6:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105bfd:	76 11                	jbe    c0105c10 <copy_range+0x5c>
c0105bff:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c02:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105c05:	73 09                	jae    c0105c10 <copy_range+0x5c>
c0105c07:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105c0e:	76 24                	jbe    c0105c34 <copy_range+0x80>
c0105c10:	c7 44 24 0c fd d5 10 	movl   $0xc010d5fd,0xc(%esp)
c0105c17:	c0 
c0105c18:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105c1f:	c0 
c0105c20:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105c27:	00 
c0105c28:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105c2f:	e8 a6 b1 ff ff       	call   c0100dda <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105c34:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105c3b:	00 
c0105c3c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c43:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c46:	89 04 24             	mov    %eax,(%esp)
c0105c49:	e8 79 fb ff ff       	call   c01057c7 <get_pte>
c0105c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105c51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c55:	75 1b                	jne    c0105c72 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105c57:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c5a:	05 00 00 40 00       	add    $0x400000,%eax
c0105c5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105c62:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c65:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c6a:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105c6d:	e9 4c 01 00 00       	jmp    c0105dbe <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105c72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c75:	8b 00                	mov    (%eax),%eax
c0105c77:	83 e0 01             	and    $0x1,%eax
c0105c7a:	85 c0                	test   %eax,%eax
c0105c7c:	0f 84 35 01 00 00    	je     c0105db7 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105c82:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105c89:	00 
c0105c8a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c94:	89 04 24             	mov    %eax,(%esp)
c0105c97:	e8 2b fb ff ff       	call   c01057c7 <get_pte>
c0105c9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105c9f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105ca3:	75 0a                	jne    c0105caf <copy_range+0xfb>
                return -E_NO_MEM;
c0105ca5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105caa:	e9 26 01 00 00       	jmp    c0105dd5 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cb2:	8b 00                	mov    (%eax),%eax
c0105cb4:	83 e0 07             	and    $0x7,%eax
c0105cb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cbd:	8b 00                	mov    (%eax),%eax
c0105cbf:	89 04 24             	mov    %eax,(%esp)
c0105cc2:	e8 3e f1 ff ff       	call   c0104e05 <pte2page>
c0105cc7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105cca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105cd1:	e8 8a f3 ff ff       	call   c0105060 <alloc_pages>
c0105cd6:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105cd9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105cdd:	75 24                	jne    c0105d03 <copy_range+0x14f>
c0105cdf:	c7 44 24 0c 15 d6 10 	movl   $0xc010d615,0xc(%esp)
c0105ce6:	c0 
c0105ce7:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105cee:	c0 
c0105cef:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0105cf6:	00 
c0105cf7:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105cfe:	e8 d7 b0 ff ff       	call   c0100dda <__panic>
        assert(npage!=NULL);
c0105d03:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105d07:	75 24                	jne    c0105d2d <copy_range+0x179>
c0105d09:	c7 44 24 0c 20 d6 10 	movl   $0xc010d620,0xc(%esp)
c0105d10:	c0 
c0105d11:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105d18:	c0 
c0105d19:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105d20:	00 
c0105d21:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105d28:	e8 ad b0 ff ff       	call   c0100dda <__panic>
        int ret=0;
c0105d2d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c0105d34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105d37:	89 04 24             	mov    %eax,(%esp)
c0105d3a:	e8 72 f0 ff ff       	call   c0104db1 <page2kva>
c0105d3f:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c0105d42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d45:	89 04 24             	mov    %eax,(%esp)
c0105d48:	e8 64 f0 ff ff       	call   c0104db1 <page2kva>
c0105d4d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        memcpy(kva_dst, kva_src, PGSIZE);
c0105d50:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105d57:	00 
c0105d58:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d5b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d5f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d62:	89 04 24             	mov    %eax,(%esp)
c0105d65:	e8 b9 68 00 00       	call   c010c623 <memcpy>

        ret = page_insert(to, npage, start, perm);
c0105d6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d6d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105d71:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d74:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d78:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d82:	89 04 24             	mov    %eax,(%esp)
c0105d85:	e8 91 00 00 00       	call   c0105e1b <page_insert>
c0105d8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105d8d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105d91:	74 24                	je     c0105db7 <copy_range+0x203>
c0105d93:	c7 44 24 0c 2c d6 10 	movl   $0xc010d62c,0xc(%esp)
c0105d9a:	c0 
c0105d9b:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105da2:	c0 
c0105da3:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c0105daa:	00 
c0105dab:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105db2:	e8 23 b0 ff ff       	call   c0100dda <__panic>
        }
        start += PGSIZE;
c0105db7:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105dbe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105dc2:	74 0c                	je     c0105dd0 <copy_range+0x21c>
c0105dc4:	8b 45 10             	mov    0x10(%ebp),%eax
c0105dc7:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105dca:	0f 82 64 fe ff ff    	jb     c0105c34 <copy_range+0x80>
    return 0;
c0105dd0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105dd5:	c9                   	leave  
c0105dd6:	c3                   	ret    

c0105dd7 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105dd7:	55                   	push   %ebp
c0105dd8:	89 e5                	mov    %esp,%ebp
c0105dda:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105ddd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105de4:	00 
c0105de5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105de8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105dec:	8b 45 08             	mov    0x8(%ebp),%eax
c0105def:	89 04 24             	mov    %eax,(%esp)
c0105df2:	e8 d0 f9 ff ff       	call   c01057c7 <get_pte>
c0105df7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105dfa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105dfe:	74 19                	je     c0105e19 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105e00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e03:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e11:	89 04 24             	mov    %eax,(%esp)
c0105e14:	e8 3f fb ff ff       	call   c0105958 <page_remove_pte>
    }
}
c0105e19:	c9                   	leave  
c0105e1a:	c3                   	ret    

c0105e1b <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105e1b:	55                   	push   %ebp
c0105e1c:	89 e5                	mov    %esp,%ebp
c0105e1e:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105e21:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105e28:	00 
c0105e29:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e30:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e33:	89 04 24             	mov    %eax,(%esp)
c0105e36:	e8 8c f9 ff ff       	call   c01057c7 <get_pte>
c0105e3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105e3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e42:	75 0a                	jne    c0105e4e <page_insert+0x33>
        return -E_NO_MEM;
c0105e44:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105e49:	e9 84 00 00 00       	jmp    c0105ed2 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e51:	89 04 24             	mov    %eax,(%esp)
c0105e54:	e8 19 f0 ff ff       	call   c0104e72 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e5c:	8b 00                	mov    (%eax),%eax
c0105e5e:	83 e0 01             	and    $0x1,%eax
c0105e61:	85 c0                	test   %eax,%eax
c0105e63:	74 3e                	je     c0105ea3 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105e65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e68:	8b 00                	mov    (%eax),%eax
c0105e6a:	89 04 24             	mov    %eax,(%esp)
c0105e6d:	e8 93 ef ff ff       	call   c0104e05 <pte2page>
c0105e72:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105e75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e78:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105e7b:	75 0d                	jne    c0105e8a <page_insert+0x6f>
            page_ref_dec(page);
c0105e7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e80:	89 04 24             	mov    %eax,(%esp)
c0105e83:	e8 01 f0 ff ff       	call   c0104e89 <page_ref_dec>
c0105e88:	eb 19                	jmp    c0105ea3 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105e8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e8d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e91:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e94:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e98:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e9b:	89 04 24             	mov    %eax,(%esp)
c0105e9e:	e8 b5 fa ff ff       	call   c0105958 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105ea3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ea6:	89 04 24             	mov    %eax,(%esp)
c0105ea9:	e8 a8 ee ff ff       	call   c0104d56 <page2pa>
c0105eae:	0b 45 14             	or     0x14(%ebp),%eax
c0105eb1:	83 c8 01             	or     $0x1,%eax
c0105eb4:	89 c2                	mov    %eax,%edx
c0105eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eb9:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105ebb:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ebe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ec2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec5:	89 04 24             	mov    %eax,(%esp)
c0105ec8:	e8 07 00 00 00       	call   c0105ed4 <tlb_invalidate>
    return 0;
c0105ecd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ed2:	c9                   	leave  
c0105ed3:	c3                   	ret    

c0105ed4 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105ed4:	55                   	push   %ebp
c0105ed5:	89 e5                	mov    %esp,%ebp
c0105ed7:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105eda:	0f 20 d8             	mov    %cr3,%eax
c0105edd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105ee0:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105ee3:	89 c2                	mov    %eax,%edx
c0105ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ee8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105eeb:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105ef2:	77 23                	ja     c0105f17 <tlb_invalidate+0x43>
c0105ef4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105efb:	c7 44 24 08 50 d5 10 	movl   $0xc010d550,0x8(%esp)
c0105f02:	c0 
c0105f03:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c0105f0a:	00 
c0105f0b:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105f12:	e8 c3 ae ff ff       	call   c0100dda <__panic>
c0105f17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f1a:	05 00 00 00 40       	add    $0x40000000,%eax
c0105f1f:	39 c2                	cmp    %eax,%edx
c0105f21:	75 0c                	jne    c0105f2f <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105f23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f26:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105f29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f2c:	0f 01 38             	invlpg (%eax)
    }
}
c0105f2f:	c9                   	leave  
c0105f30:	c3                   	ret    

c0105f31 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105f31:	55                   	push   %ebp
c0105f32:	89 e5                	mov    %esp,%ebp
c0105f34:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105f37:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105f3e:	e8 1d f1 ff ff       	call   c0105060 <alloc_pages>
c0105f43:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105f46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f4a:	0f 84 b0 00 00 00    	je     c0106000 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105f50:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f53:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f57:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f5a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f61:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f65:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f68:	89 04 24             	mov    %eax,(%esp)
c0105f6b:	e8 ab fe ff ff       	call   c0105e1b <page_insert>
c0105f70:	85 c0                	test   %eax,%eax
c0105f72:	74 1a                	je     c0105f8e <pgdir_alloc_page+0x5d>
            free_page(page);
c0105f74:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105f7b:	00 
c0105f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f7f:	89 04 24             	mov    %eax,(%esp)
c0105f82:	e8 44 f1 ff ff       	call   c01050cb <free_pages>
            return NULL;
c0105f87:	b8 00 00 00 00       	mov    $0x0,%eax
c0105f8c:	eb 75                	jmp    c0106003 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0105f8e:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c0105f93:	85 c0                	test   %eax,%eax
c0105f95:	74 69                	je     c0106000 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0105f97:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0105f9c:	85 c0                	test   %eax,%eax
c0105f9e:	74 60                	je     c0106000 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0105fa0:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0105fa5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105fac:	00 
c0105fad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105fb0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105fb4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105fb7:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105fbb:	89 04 24             	mov    %eax,(%esp)
c0105fbe:	e8 51 0e 00 00       	call   c0106e14 <swap_map_swappable>
                page->pra_vaddr=la;
c0105fc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fc6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105fc9:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0105fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fcf:	89 04 24             	mov    %eax,(%esp)
c0105fd2:	e8 84 ee ff ff       	call   c0104e5b <page_ref>
c0105fd7:	83 f8 01             	cmp    $0x1,%eax
c0105fda:	74 24                	je     c0106000 <pgdir_alloc_page+0xcf>
c0105fdc:	c7 44 24 0c 35 d6 10 	movl   $0xc010d635,0xc(%esp)
c0105fe3:	c0 
c0105fe4:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0105feb:	c0 
c0105fec:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c0105ff3:	00 
c0105ff4:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0105ffb:	e8 da ad ff ff       	call   c0100dda <__panic>
            }
        }

    }

    return page;
c0106000:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106003:	c9                   	leave  
c0106004:	c3                   	ret    

c0106005 <check_alloc_page>:

static void
check_alloc_page(void) {
c0106005:	55                   	push   %ebp
c0106006:	89 e5                	mov    %esp,%ebp
c0106008:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c010600b:	a1 88 1e 1b c0       	mov    0xc01b1e88,%eax
c0106010:	8b 40 18             	mov    0x18(%eax),%eax
c0106013:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106015:	c7 04 24 4c d6 10 c0 	movl   $0xc010d64c,(%esp)
c010601c:	e8 37 a3 ff ff       	call   c0100358 <cprintf>
}
c0106021:	c9                   	leave  
c0106022:	c3                   	ret    

c0106023 <check_pgdir>:

static void
check_pgdir(void) {
c0106023:	55                   	push   %ebp
c0106024:	89 e5                	mov    %esp,%ebp
c0106026:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0106029:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c010602e:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106033:	76 24                	jbe    c0106059 <check_pgdir+0x36>
c0106035:	c7 44 24 0c 6b d6 10 	movl   $0xc010d66b,0xc(%esp)
c010603c:	c0 
c010603d:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106044:	c0 
c0106045:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010604c:	00 
c010604d:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106054:	e8 81 ad ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0106059:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010605e:	85 c0                	test   %eax,%eax
c0106060:	74 0e                	je     c0106070 <check_pgdir+0x4d>
c0106062:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106067:	25 ff 0f 00 00       	and    $0xfff,%eax
c010606c:	85 c0                	test   %eax,%eax
c010606e:	74 24                	je     c0106094 <check_pgdir+0x71>
c0106070:	c7 44 24 0c 88 d6 10 	movl   $0xc010d688,0xc(%esp)
c0106077:	c0 
c0106078:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010607f:	c0 
c0106080:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c0106087:	00 
c0106088:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010608f:	e8 46 ad ff ff       	call   c0100dda <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106094:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106099:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01060a0:	00 
c01060a1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01060a8:	00 
c01060a9:	89 04 24             	mov    %eax,(%esp)
c01060ac:	e8 4e f8 ff ff       	call   c01058ff <get_page>
c01060b1:	85 c0                	test   %eax,%eax
c01060b3:	74 24                	je     c01060d9 <check_pgdir+0xb6>
c01060b5:	c7 44 24 0c c0 d6 10 	movl   $0xc010d6c0,0xc(%esp)
c01060bc:	c0 
c01060bd:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01060c4:	c0 
c01060c5:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01060cc:	00 
c01060cd:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01060d4:	e8 01 ad ff ff       	call   c0100dda <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01060d9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01060e0:	e8 7b ef ff ff       	call   c0105060 <alloc_pages>
c01060e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01060e8:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01060ed:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01060f4:	00 
c01060f5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01060fc:	00 
c01060fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106100:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106104:	89 04 24             	mov    %eax,(%esp)
c0106107:	e8 0f fd ff ff       	call   c0105e1b <page_insert>
c010610c:	85 c0                	test   %eax,%eax
c010610e:	74 24                	je     c0106134 <check_pgdir+0x111>
c0106110:	c7 44 24 0c e8 d6 10 	movl   $0xc010d6e8,0xc(%esp)
c0106117:	c0 
c0106118:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010611f:	c0 
c0106120:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0106127:	00 
c0106128:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010612f:	e8 a6 ac ff ff       	call   c0100dda <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106134:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106139:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106140:	00 
c0106141:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106148:	00 
c0106149:	89 04 24             	mov    %eax,(%esp)
c010614c:	e8 76 f6 ff ff       	call   c01057c7 <get_pte>
c0106151:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106154:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106158:	75 24                	jne    c010617e <check_pgdir+0x15b>
c010615a:	c7 44 24 0c 14 d7 10 	movl   $0xc010d714,0xc(%esp)
c0106161:	c0 
c0106162:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106169:	c0 
c010616a:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0106171:	00 
c0106172:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106179:	e8 5c ac ff ff       	call   c0100dda <__panic>
    assert(pte2page(*ptep) == p1);
c010617e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106181:	8b 00                	mov    (%eax),%eax
c0106183:	89 04 24             	mov    %eax,(%esp)
c0106186:	e8 7a ec ff ff       	call   c0104e05 <pte2page>
c010618b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010618e:	74 24                	je     c01061b4 <check_pgdir+0x191>
c0106190:	c7 44 24 0c 41 d7 10 	movl   $0xc010d741,0xc(%esp)
c0106197:	c0 
c0106198:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010619f:	c0 
c01061a0:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c01061a7:	00 
c01061a8:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01061af:	e8 26 ac ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 1);
c01061b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061b7:	89 04 24             	mov    %eax,(%esp)
c01061ba:	e8 9c ec ff ff       	call   c0104e5b <page_ref>
c01061bf:	83 f8 01             	cmp    $0x1,%eax
c01061c2:	74 24                	je     c01061e8 <check_pgdir+0x1c5>
c01061c4:	c7 44 24 0c 57 d7 10 	movl   $0xc010d757,0xc(%esp)
c01061cb:	c0 
c01061cc:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01061d3:	c0 
c01061d4:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01061db:	00 
c01061dc:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01061e3:	e8 f2 ab ff ff       	call   c0100dda <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01061e8:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01061ed:	8b 00                	mov    (%eax),%eax
c01061ef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01061f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01061f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01061fa:	c1 e8 0c             	shr    $0xc,%eax
c01061fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106200:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0106205:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106208:	72 23                	jb     c010622d <check_pgdir+0x20a>
c010620a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010620d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106211:	c7 44 24 08 ac d4 10 	movl   $0xc010d4ac,0x8(%esp)
c0106218:	c0 
c0106219:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106220:	00 
c0106221:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106228:	e8 ad ab ff ff       	call   c0100dda <__panic>
c010622d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106230:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106235:	83 c0 04             	add    $0x4,%eax
c0106238:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010623b:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106240:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106247:	00 
c0106248:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010624f:	00 
c0106250:	89 04 24             	mov    %eax,(%esp)
c0106253:	e8 6f f5 ff ff       	call   c01057c7 <get_pte>
c0106258:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010625b:	74 24                	je     c0106281 <check_pgdir+0x25e>
c010625d:	c7 44 24 0c 6c d7 10 	movl   $0xc010d76c,0xc(%esp)
c0106264:	c0 
c0106265:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010626c:	c0 
c010626d:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0106274:	00 
c0106275:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010627c:	e8 59 ab ff ff       	call   c0100dda <__panic>

    p2 = alloc_page();
c0106281:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106288:	e8 d3 ed ff ff       	call   c0105060 <alloc_pages>
c010628d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106290:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106295:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010629c:	00 
c010629d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01062a4:	00 
c01062a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01062a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01062ac:	89 04 24             	mov    %eax,(%esp)
c01062af:	e8 67 fb ff ff       	call   c0105e1b <page_insert>
c01062b4:	85 c0                	test   %eax,%eax
c01062b6:	74 24                	je     c01062dc <check_pgdir+0x2b9>
c01062b8:	c7 44 24 0c 94 d7 10 	movl   $0xc010d794,0xc(%esp)
c01062bf:	c0 
c01062c0:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01062c7:	c0 
c01062c8:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01062cf:	00 
c01062d0:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01062d7:	e8 fe aa ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01062dc:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01062e1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062e8:	00 
c01062e9:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01062f0:	00 
c01062f1:	89 04 24             	mov    %eax,(%esp)
c01062f4:	e8 ce f4 ff ff       	call   c01057c7 <get_pte>
c01062f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01062fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106300:	75 24                	jne    c0106326 <check_pgdir+0x303>
c0106302:	c7 44 24 0c cc d7 10 	movl   $0xc010d7cc,0xc(%esp)
c0106309:	c0 
c010630a:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106311:	c0 
c0106312:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c0106319:	00 
c010631a:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106321:	e8 b4 aa ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_U);
c0106326:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106329:	8b 00                	mov    (%eax),%eax
c010632b:	83 e0 04             	and    $0x4,%eax
c010632e:	85 c0                	test   %eax,%eax
c0106330:	75 24                	jne    c0106356 <check_pgdir+0x333>
c0106332:	c7 44 24 0c fc d7 10 	movl   $0xc010d7fc,0xc(%esp)
c0106339:	c0 
c010633a:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106341:	c0 
c0106342:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c0106349:	00 
c010634a:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106351:	e8 84 aa ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_W);
c0106356:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106359:	8b 00                	mov    (%eax),%eax
c010635b:	83 e0 02             	and    $0x2,%eax
c010635e:	85 c0                	test   %eax,%eax
c0106360:	75 24                	jne    c0106386 <check_pgdir+0x363>
c0106362:	c7 44 24 0c 0a d8 10 	movl   $0xc010d80a,0xc(%esp)
c0106369:	c0 
c010636a:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106371:	c0 
c0106372:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c0106379:	00 
c010637a:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106381:	e8 54 aa ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106386:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010638b:	8b 00                	mov    (%eax),%eax
c010638d:	83 e0 04             	and    $0x4,%eax
c0106390:	85 c0                	test   %eax,%eax
c0106392:	75 24                	jne    c01063b8 <check_pgdir+0x395>
c0106394:	c7 44 24 0c 18 d8 10 	movl   $0xc010d818,0xc(%esp)
c010639b:	c0 
c010639c:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01063a3:	c0 
c01063a4:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c01063ab:	00 
c01063ac:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01063b3:	e8 22 aa ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 1);
c01063b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063bb:	89 04 24             	mov    %eax,(%esp)
c01063be:	e8 98 ea ff ff       	call   c0104e5b <page_ref>
c01063c3:	83 f8 01             	cmp    $0x1,%eax
c01063c6:	74 24                	je     c01063ec <check_pgdir+0x3c9>
c01063c8:	c7 44 24 0c 2e d8 10 	movl   $0xc010d82e,0xc(%esp)
c01063cf:	c0 
c01063d0:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01063d7:	c0 
c01063d8:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01063df:	00 
c01063e0:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01063e7:	e8 ee a9 ff ff       	call   c0100dda <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01063ec:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01063f1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01063f8:	00 
c01063f9:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106400:	00 
c0106401:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106404:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106408:	89 04 24             	mov    %eax,(%esp)
c010640b:	e8 0b fa ff ff       	call   c0105e1b <page_insert>
c0106410:	85 c0                	test   %eax,%eax
c0106412:	74 24                	je     c0106438 <check_pgdir+0x415>
c0106414:	c7 44 24 0c 40 d8 10 	movl   $0xc010d840,0xc(%esp)
c010641b:	c0 
c010641c:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106423:	c0 
c0106424:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010642b:	00 
c010642c:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106433:	e8 a2 a9 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 2);
c0106438:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010643b:	89 04 24             	mov    %eax,(%esp)
c010643e:	e8 18 ea ff ff       	call   c0104e5b <page_ref>
c0106443:	83 f8 02             	cmp    $0x2,%eax
c0106446:	74 24                	je     c010646c <check_pgdir+0x449>
c0106448:	c7 44 24 0c 6c d8 10 	movl   $0xc010d86c,0xc(%esp)
c010644f:	c0 
c0106450:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106457:	c0 
c0106458:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c010645f:	00 
c0106460:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106467:	e8 6e a9 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c010646c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010646f:	89 04 24             	mov    %eax,(%esp)
c0106472:	e8 e4 e9 ff ff       	call   c0104e5b <page_ref>
c0106477:	85 c0                	test   %eax,%eax
c0106479:	74 24                	je     c010649f <check_pgdir+0x47c>
c010647b:	c7 44 24 0c 7e d8 10 	movl   $0xc010d87e,0xc(%esp)
c0106482:	c0 
c0106483:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010648a:	c0 
c010648b:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c0106492:	00 
c0106493:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010649a:	e8 3b a9 ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010649f:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01064a4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01064ab:	00 
c01064ac:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01064b3:	00 
c01064b4:	89 04 24             	mov    %eax,(%esp)
c01064b7:	e8 0b f3 ff ff       	call   c01057c7 <get_pte>
c01064bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01064bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01064c3:	75 24                	jne    c01064e9 <check_pgdir+0x4c6>
c01064c5:	c7 44 24 0c cc d7 10 	movl   $0xc010d7cc,0xc(%esp)
c01064cc:	c0 
c01064cd:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01064d4:	c0 
c01064d5:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01064dc:	00 
c01064dd:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01064e4:	e8 f1 a8 ff ff       	call   c0100dda <__panic>
    assert(pte2page(*ptep) == p1);
c01064e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064ec:	8b 00                	mov    (%eax),%eax
c01064ee:	89 04 24             	mov    %eax,(%esp)
c01064f1:	e8 0f e9 ff ff       	call   c0104e05 <pte2page>
c01064f6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01064f9:	74 24                	je     c010651f <check_pgdir+0x4fc>
c01064fb:	c7 44 24 0c 41 d7 10 	movl   $0xc010d741,0xc(%esp)
c0106502:	c0 
c0106503:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010650a:	c0 
c010650b:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c0106512:	00 
c0106513:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010651a:	e8 bb a8 ff ff       	call   c0100dda <__panic>
    assert((*ptep & PTE_U) == 0);
c010651f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106522:	8b 00                	mov    (%eax),%eax
c0106524:	83 e0 04             	and    $0x4,%eax
c0106527:	85 c0                	test   %eax,%eax
c0106529:	74 24                	je     c010654f <check_pgdir+0x52c>
c010652b:	c7 44 24 0c 90 d8 10 	movl   $0xc010d890,0xc(%esp)
c0106532:	c0 
c0106533:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010653a:	c0 
c010653b:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106542:	00 
c0106543:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010654a:	e8 8b a8 ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, 0x0);
c010654f:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106554:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010655b:	00 
c010655c:	89 04 24             	mov    %eax,(%esp)
c010655f:	e8 73 f8 ff ff       	call   c0105dd7 <page_remove>
    assert(page_ref(p1) == 1);
c0106564:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106567:	89 04 24             	mov    %eax,(%esp)
c010656a:	e8 ec e8 ff ff       	call   c0104e5b <page_ref>
c010656f:	83 f8 01             	cmp    $0x1,%eax
c0106572:	74 24                	je     c0106598 <check_pgdir+0x575>
c0106574:	c7 44 24 0c 57 d7 10 	movl   $0xc010d757,0xc(%esp)
c010657b:	c0 
c010657c:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106583:	c0 
c0106584:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c010658b:	00 
c010658c:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106593:	e8 42 a8 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c0106598:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010659b:	89 04 24             	mov    %eax,(%esp)
c010659e:	e8 b8 e8 ff ff       	call   c0104e5b <page_ref>
c01065a3:	85 c0                	test   %eax,%eax
c01065a5:	74 24                	je     c01065cb <check_pgdir+0x5a8>
c01065a7:	c7 44 24 0c 7e d8 10 	movl   $0xc010d87e,0xc(%esp)
c01065ae:	c0 
c01065af:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01065b6:	c0 
c01065b7:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01065be:	00 
c01065bf:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01065c6:	e8 0f a8 ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01065cb:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01065d0:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01065d7:	00 
c01065d8:	89 04 24             	mov    %eax,(%esp)
c01065db:	e8 f7 f7 ff ff       	call   c0105dd7 <page_remove>
    assert(page_ref(p1) == 0);
c01065e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065e3:	89 04 24             	mov    %eax,(%esp)
c01065e6:	e8 70 e8 ff ff       	call   c0104e5b <page_ref>
c01065eb:	85 c0                	test   %eax,%eax
c01065ed:	74 24                	je     c0106613 <check_pgdir+0x5f0>
c01065ef:	c7 44 24 0c a5 d8 10 	movl   $0xc010d8a5,0xc(%esp)
c01065f6:	c0 
c01065f7:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01065fe:	c0 
c01065ff:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c0106606:	00 
c0106607:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010660e:	e8 c7 a7 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c0106613:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106616:	89 04 24             	mov    %eax,(%esp)
c0106619:	e8 3d e8 ff ff       	call   c0104e5b <page_ref>
c010661e:	85 c0                	test   %eax,%eax
c0106620:	74 24                	je     c0106646 <check_pgdir+0x623>
c0106622:	c7 44 24 0c 7e d8 10 	movl   $0xc010d87e,0xc(%esp)
c0106629:	c0 
c010662a:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106631:	c0 
c0106632:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c0106639:	00 
c010663a:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106641:	e8 94 a7 ff ff       	call   c0100dda <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106646:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010664b:	8b 00                	mov    (%eax),%eax
c010664d:	89 04 24             	mov    %eax,(%esp)
c0106650:	e8 ee e7 ff ff       	call   c0104e43 <pde2page>
c0106655:	89 04 24             	mov    %eax,(%esp)
c0106658:	e8 fe e7 ff ff       	call   c0104e5b <page_ref>
c010665d:	83 f8 01             	cmp    $0x1,%eax
c0106660:	74 24                	je     c0106686 <check_pgdir+0x663>
c0106662:	c7 44 24 0c b8 d8 10 	movl   $0xc010d8b8,0xc(%esp)
c0106669:	c0 
c010666a:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106671:	c0 
c0106672:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c0106679:	00 
c010667a:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106681:	e8 54 a7 ff ff       	call   c0100dda <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0106686:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010668b:	8b 00                	mov    (%eax),%eax
c010668d:	89 04 24             	mov    %eax,(%esp)
c0106690:	e8 ae e7 ff ff       	call   c0104e43 <pde2page>
c0106695:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010669c:	00 
c010669d:	89 04 24             	mov    %eax,(%esp)
c01066a0:	e8 26 ea ff ff       	call   c01050cb <free_pages>
    boot_pgdir[0] = 0;
c01066a5:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01066aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01066b0:	c7 04 24 df d8 10 c0 	movl   $0xc010d8df,(%esp)
c01066b7:	e8 9c 9c ff ff       	call   c0100358 <cprintf>
}
c01066bc:	c9                   	leave  
c01066bd:	c3                   	ret    

c01066be <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01066be:	55                   	push   %ebp
c01066bf:	89 e5                	mov    %esp,%ebp
c01066c1:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01066c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01066cb:	e9 ca 00 00 00       	jmp    c010679a <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01066d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01066d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066d9:	c1 e8 0c             	shr    $0xc,%eax
c01066dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01066df:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01066e4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01066e7:	72 23                	jb     c010670c <check_boot_pgdir+0x4e>
c01066e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01066f0:	c7 44 24 08 ac d4 10 	movl   $0xc010d4ac,0x8(%esp)
c01066f7:	c0 
c01066f8:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c01066ff:	00 
c0106700:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106707:	e8 ce a6 ff ff       	call   c0100dda <__panic>
c010670c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010670f:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106714:	89 c2                	mov    %eax,%edx
c0106716:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c010671b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106722:	00 
c0106723:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106727:	89 04 24             	mov    %eax,(%esp)
c010672a:	e8 98 f0 ff ff       	call   c01057c7 <get_pte>
c010672f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106732:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106736:	75 24                	jne    c010675c <check_boot_pgdir+0x9e>
c0106738:	c7 44 24 0c fc d8 10 	movl   $0xc010d8fc,0xc(%esp)
c010673f:	c0 
c0106740:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106747:	c0 
c0106748:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c010674f:	00 
c0106750:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106757:	e8 7e a6 ff ff       	call   c0100dda <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010675c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010675f:	8b 00                	mov    (%eax),%eax
c0106761:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106766:	89 c2                	mov    %eax,%edx
c0106768:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010676b:	39 c2                	cmp    %eax,%edx
c010676d:	74 24                	je     c0106793 <check_boot_pgdir+0xd5>
c010676f:	c7 44 24 0c 39 d9 10 	movl   $0xc010d939,0xc(%esp)
c0106776:	c0 
c0106777:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010677e:	c0 
c010677f:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c0106786:	00 
c0106787:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010678e:	e8 47 a6 ff ff       	call   c0100dda <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106793:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010679a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010679d:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01067a2:	39 c2                	cmp    %eax,%edx
c01067a4:	0f 82 26 ff ff ff    	jb     c01066d0 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01067aa:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01067af:	05 ac 0f 00 00       	add    $0xfac,%eax
c01067b4:	8b 00                	mov    (%eax),%eax
c01067b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01067bb:	89 c2                	mov    %eax,%edx
c01067bd:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01067c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01067c5:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01067cc:	77 23                	ja     c01067f1 <check_boot_pgdir+0x133>
c01067ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067d1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01067d5:	c7 44 24 08 50 d5 10 	movl   $0xc010d550,0x8(%esp)
c01067dc:	c0 
c01067dd:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c01067e4:	00 
c01067e5:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01067ec:	e8 e9 a5 ff ff       	call   c0100dda <__panic>
c01067f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067f4:	05 00 00 00 40       	add    $0x40000000,%eax
c01067f9:	39 c2                	cmp    %eax,%edx
c01067fb:	74 24                	je     c0106821 <check_boot_pgdir+0x163>
c01067fd:	c7 44 24 0c 50 d9 10 	movl   $0xc010d950,0xc(%esp)
c0106804:	c0 
c0106805:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010680c:	c0 
c010680d:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106814:	00 
c0106815:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010681c:	e8 b9 a5 ff ff       	call   c0100dda <__panic>

    assert(boot_pgdir[0] == 0);
c0106821:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106826:	8b 00                	mov    (%eax),%eax
c0106828:	85 c0                	test   %eax,%eax
c010682a:	74 24                	je     c0106850 <check_boot_pgdir+0x192>
c010682c:	c7 44 24 0c 84 d9 10 	movl   $0xc010d984,0xc(%esp)
c0106833:	c0 
c0106834:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010683b:	c0 
c010683c:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c0106843:	00 
c0106844:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010684b:	e8 8a a5 ff ff       	call   c0100dda <__panic>

    struct Page *p;
    p = alloc_page();
c0106850:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106857:	e8 04 e8 ff ff       	call   c0105060 <alloc_pages>
c010685c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c010685f:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106864:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010686b:	00 
c010686c:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106873:	00 
c0106874:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106877:	89 54 24 04          	mov    %edx,0x4(%esp)
c010687b:	89 04 24             	mov    %eax,(%esp)
c010687e:	e8 98 f5 ff ff       	call   c0105e1b <page_insert>
c0106883:	85 c0                	test   %eax,%eax
c0106885:	74 24                	je     c01068ab <check_boot_pgdir+0x1ed>
c0106887:	c7 44 24 0c 98 d9 10 	movl   $0xc010d998,0xc(%esp)
c010688e:	c0 
c010688f:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106896:	c0 
c0106897:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c010689e:	00 
c010689f:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01068a6:	e8 2f a5 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 1);
c01068ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01068ae:	89 04 24             	mov    %eax,(%esp)
c01068b1:	e8 a5 e5 ff ff       	call   c0104e5b <page_ref>
c01068b6:	83 f8 01             	cmp    $0x1,%eax
c01068b9:	74 24                	je     c01068df <check_boot_pgdir+0x221>
c01068bb:	c7 44 24 0c c6 d9 10 	movl   $0xc010d9c6,0xc(%esp)
c01068c2:	c0 
c01068c3:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01068ca:	c0 
c01068cb:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c01068d2:	00 
c01068d3:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01068da:	e8 fb a4 ff ff       	call   c0100dda <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01068df:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c01068e4:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01068eb:	00 
c01068ec:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01068f3:	00 
c01068f4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01068f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01068fb:	89 04 24             	mov    %eax,(%esp)
c01068fe:	e8 18 f5 ff ff       	call   c0105e1b <page_insert>
c0106903:	85 c0                	test   %eax,%eax
c0106905:	74 24                	je     c010692b <check_boot_pgdir+0x26d>
c0106907:	c7 44 24 0c d8 d9 10 	movl   $0xc010d9d8,0xc(%esp)
c010690e:	c0 
c010690f:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c0106916:	c0 
c0106917:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c010691e:	00 
c010691f:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c0106926:	e8 af a4 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 2);
c010692b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010692e:	89 04 24             	mov    %eax,(%esp)
c0106931:	e8 25 e5 ff ff       	call   c0104e5b <page_ref>
c0106936:	83 f8 02             	cmp    $0x2,%eax
c0106939:	74 24                	je     c010695f <check_boot_pgdir+0x2a1>
c010693b:	c7 44 24 0c 0f da 10 	movl   $0xc010da0f,0xc(%esp)
c0106942:	c0 
c0106943:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c010694a:	c0 
c010694b:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106952:	00 
c0106953:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c010695a:	e8 7b a4 ff ff       	call   c0100dda <__panic>

    const char *str = "ucore: Hello world!!";
c010695f:	c7 45 dc 20 da 10 c0 	movl   $0xc010da20,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106966:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106969:	89 44 24 04          	mov    %eax,0x4(%esp)
c010696d:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106974:	e8 f1 58 00 00       	call   c010c26a <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106979:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106980:	00 
c0106981:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106988:	e8 56 59 00 00       	call   c010c2e3 <strcmp>
c010698d:	85 c0                	test   %eax,%eax
c010698f:	74 24                	je     c01069b5 <check_boot_pgdir+0x2f7>
c0106991:	c7 44 24 0c 38 da 10 	movl   $0xc010da38,0xc(%esp)
c0106998:	c0 
c0106999:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01069a0:	c0 
c01069a1:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c01069a8:	00 
c01069a9:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01069b0:	e8 25 a4 ff ff       	call   c0100dda <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01069b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069b8:	89 04 24             	mov    %eax,(%esp)
c01069bb:	e8 f1 e3 ff ff       	call   c0104db1 <page2kva>
c01069c0:	05 00 01 00 00       	add    $0x100,%eax
c01069c5:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01069c8:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c01069cf:	e8 3e 58 00 00       	call   c010c212 <strlen>
c01069d4:	85 c0                	test   %eax,%eax
c01069d6:	74 24                	je     c01069fc <check_boot_pgdir+0x33e>
c01069d8:	c7 44 24 0c 70 da 10 	movl   $0xc010da70,0xc(%esp)
c01069df:	c0 
c01069e0:	c7 44 24 08 99 d5 10 	movl   $0xc010d599,0x8(%esp)
c01069e7:	c0 
c01069e8:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c01069ef:	00 
c01069f0:	c7 04 24 74 d5 10 c0 	movl   $0xc010d574,(%esp)
c01069f7:	e8 de a3 ff ff       	call   c0100dda <__panic>

    free_page(p);
c01069fc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a03:	00 
c0106a04:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a07:	89 04 24             	mov    %eax,(%esp)
c0106a0a:	e8 bc e6 ff ff       	call   c01050cb <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106a0f:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106a14:	8b 00                	mov    (%eax),%eax
c0106a16:	89 04 24             	mov    %eax,(%esp)
c0106a19:	e8 25 e4 ff ff       	call   c0104e43 <pde2page>
c0106a1e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a25:	00 
c0106a26:	89 04 24             	mov    %eax,(%esp)
c0106a29:	e8 9d e6 ff ff       	call   c01050cb <free_pages>
    boot_pgdir[0] = 0;
c0106a2e:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0106a33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106a39:	c7 04 24 94 da 10 c0 	movl   $0xc010da94,(%esp)
c0106a40:	e8 13 99 ff ff       	call   c0100358 <cprintf>
}
c0106a45:	c9                   	leave  
c0106a46:	c3                   	ret    

c0106a47 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106a47:	55                   	push   %ebp
c0106a48:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a4d:	83 e0 04             	and    $0x4,%eax
c0106a50:	85 c0                	test   %eax,%eax
c0106a52:	74 07                	je     c0106a5b <perm2str+0x14>
c0106a54:	b8 75 00 00 00       	mov    $0x75,%eax
c0106a59:	eb 05                	jmp    c0106a60 <perm2str+0x19>
c0106a5b:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106a60:	a2 08 fe 1a c0       	mov    %al,0xc01afe08
    str[1] = 'r';
c0106a65:	c6 05 09 fe 1a c0 72 	movb   $0x72,0xc01afe09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a6f:	83 e0 02             	and    $0x2,%eax
c0106a72:	85 c0                	test   %eax,%eax
c0106a74:	74 07                	je     c0106a7d <perm2str+0x36>
c0106a76:	b8 77 00 00 00       	mov    $0x77,%eax
c0106a7b:	eb 05                	jmp    c0106a82 <perm2str+0x3b>
c0106a7d:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106a82:	a2 0a fe 1a c0       	mov    %al,0xc01afe0a
    str[3] = '\0';
c0106a87:	c6 05 0b fe 1a c0 00 	movb   $0x0,0xc01afe0b
    return str;
c0106a8e:	b8 08 fe 1a c0       	mov    $0xc01afe08,%eax
}
c0106a93:	5d                   	pop    %ebp
c0106a94:	c3                   	ret    

c0106a95 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106a95:	55                   	push   %ebp
c0106a96:	89 e5                	mov    %esp,%ebp
c0106a98:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106a9b:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a9e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106aa1:	72 0a                	jb     c0106aad <get_pgtable_items+0x18>
        return 0;
c0106aa3:	b8 00 00 00 00       	mov    $0x0,%eax
c0106aa8:	e9 9c 00 00 00       	jmp    c0106b49 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106aad:	eb 04                	jmp    c0106ab3 <get_pgtable_items+0x1e>
        start ++;
c0106aaf:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106ab3:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ab6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106ab9:	73 18                	jae    c0106ad3 <get_pgtable_items+0x3e>
c0106abb:	8b 45 10             	mov    0x10(%ebp),%eax
c0106abe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106ac5:	8b 45 14             	mov    0x14(%ebp),%eax
c0106ac8:	01 d0                	add    %edx,%eax
c0106aca:	8b 00                	mov    (%eax),%eax
c0106acc:	83 e0 01             	and    $0x1,%eax
c0106acf:	85 c0                	test   %eax,%eax
c0106ad1:	74 dc                	je     c0106aaf <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106ad3:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ad6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106ad9:	73 69                	jae    c0106b44 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106adb:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106adf:	74 08                	je     c0106ae9 <get_pgtable_items+0x54>
            *left_store = start;
c0106ae1:	8b 45 18             	mov    0x18(%ebp),%eax
c0106ae4:	8b 55 10             	mov    0x10(%ebp),%edx
c0106ae7:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106ae9:	8b 45 10             	mov    0x10(%ebp),%eax
c0106aec:	8d 50 01             	lea    0x1(%eax),%edx
c0106aef:	89 55 10             	mov    %edx,0x10(%ebp)
c0106af2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106af9:	8b 45 14             	mov    0x14(%ebp),%eax
c0106afc:	01 d0                	add    %edx,%eax
c0106afe:	8b 00                	mov    (%eax),%eax
c0106b00:	83 e0 07             	and    $0x7,%eax
c0106b03:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106b06:	eb 04                	jmp    c0106b0c <get_pgtable_items+0x77>
            start ++;
c0106b08:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106b0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b0f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b12:	73 1d                	jae    c0106b31 <get_pgtable_items+0x9c>
c0106b14:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b1e:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b21:	01 d0                	add    %edx,%eax
c0106b23:	8b 00                	mov    (%eax),%eax
c0106b25:	83 e0 07             	and    $0x7,%eax
c0106b28:	89 c2                	mov    %eax,%edx
c0106b2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b2d:	39 c2                	cmp    %eax,%edx
c0106b2f:	74 d7                	je     c0106b08 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106b31:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106b35:	74 08                	je     c0106b3f <get_pgtable_items+0xaa>
            *right_store = start;
c0106b37:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106b3a:	8b 55 10             	mov    0x10(%ebp),%edx
c0106b3d:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106b3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b42:	eb 05                	jmp    c0106b49 <get_pgtable_items+0xb4>
    }
    return 0;
c0106b44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106b49:	c9                   	leave  
c0106b4a:	c3                   	ret    

c0106b4b <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106b4b:	55                   	push   %ebp
c0106b4c:	89 e5                	mov    %esp,%ebp
c0106b4e:	57                   	push   %edi
c0106b4f:	56                   	push   %esi
c0106b50:	53                   	push   %ebx
c0106b51:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106b54:	c7 04 24 b4 da 10 c0 	movl   $0xc010dab4,(%esp)
c0106b5b:	e8 f8 97 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
c0106b60:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106b67:	e9 fa 00 00 00       	jmp    c0106c66 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106b6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b6f:	89 04 24             	mov    %eax,(%esp)
c0106b72:	e8 d0 fe ff ff       	call   c0106a47 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106b77:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106b7a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b7d:	29 d1                	sub    %edx,%ecx
c0106b7f:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106b81:	89 d6                	mov    %edx,%esi
c0106b83:	c1 e6 16             	shl    $0x16,%esi
c0106b86:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106b89:	89 d3                	mov    %edx,%ebx
c0106b8b:	c1 e3 16             	shl    $0x16,%ebx
c0106b8e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b91:	89 d1                	mov    %edx,%ecx
c0106b93:	c1 e1 16             	shl    $0x16,%ecx
c0106b96:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106b99:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b9c:	29 d7                	sub    %edx,%edi
c0106b9e:	89 fa                	mov    %edi,%edx
c0106ba0:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106ba4:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106ba8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106bac:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106bb0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106bb4:	c7 04 24 e5 da 10 c0 	movl   $0xc010dae5,(%esp)
c0106bbb:	e8 98 97 ff ff       	call   c0100358 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106bc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106bc3:	c1 e0 0a             	shl    $0xa,%eax
c0106bc6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106bc9:	eb 54                	jmp    c0106c1f <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106bcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bce:	89 04 24             	mov    %eax,(%esp)
c0106bd1:	e8 71 fe ff ff       	call   c0106a47 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106bd6:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106bd9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106bdc:	29 d1                	sub    %edx,%ecx
c0106bde:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106be0:	89 d6                	mov    %edx,%esi
c0106be2:	c1 e6 0c             	shl    $0xc,%esi
c0106be5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106be8:	89 d3                	mov    %edx,%ebx
c0106bea:	c1 e3 0c             	shl    $0xc,%ebx
c0106bed:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106bf0:	c1 e2 0c             	shl    $0xc,%edx
c0106bf3:	89 d1                	mov    %edx,%ecx
c0106bf5:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106bf8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106bfb:	29 d7                	sub    %edx,%edi
c0106bfd:	89 fa                	mov    %edi,%edx
c0106bff:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c03:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c07:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c0b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c0f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c13:	c7 04 24 04 db 10 c0 	movl   $0xc010db04,(%esp)
c0106c1a:	e8 39 97 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c1f:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106c24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106c27:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c2a:	89 ce                	mov    %ecx,%esi
c0106c2c:	c1 e6 0a             	shl    $0xa,%esi
c0106c2f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106c32:	89 cb                	mov    %ecx,%ebx
c0106c34:	c1 e3 0a             	shl    $0xa,%ebx
c0106c37:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106c3a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106c3e:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106c41:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106c45:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106c49:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106c4d:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106c51:	89 1c 24             	mov    %ebx,(%esp)
c0106c54:	e8 3c fe ff ff       	call   c0106a95 <get_pgtable_items>
c0106c59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106c5c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106c60:	0f 85 65 ff ff ff    	jne    c0106bcb <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c66:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106c6b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106c6e:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106c71:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106c75:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106c78:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106c7c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106c80:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106c84:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106c8b:	00 
c0106c8c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106c93:	e8 fd fd ff ff       	call   c0106a95 <get_pgtable_items>
c0106c98:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106c9b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106c9f:	0f 85 c7 fe ff ff    	jne    c0106b6c <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106ca5:	c7 04 24 28 db 10 c0 	movl   $0xc010db28,(%esp)
c0106cac:	e8 a7 96 ff ff       	call   c0100358 <cprintf>
}
c0106cb1:	83 c4 4c             	add    $0x4c,%esp
c0106cb4:	5b                   	pop    %ebx
c0106cb5:	5e                   	pop    %esi
c0106cb6:	5f                   	pop    %edi
c0106cb7:	5d                   	pop    %ebp
c0106cb8:	c3                   	ret    

c0106cb9 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106cb9:	55                   	push   %ebp
c0106cba:	89 e5                	mov    %esp,%ebp
c0106cbc:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106cbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cc2:	c1 e8 0c             	shr    $0xc,%eax
c0106cc5:	89 c2                	mov    %eax,%edx
c0106cc7:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0106ccc:	39 c2                	cmp    %eax,%edx
c0106cce:	72 1c                	jb     c0106cec <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106cd0:	c7 44 24 08 5c db 10 	movl   $0xc010db5c,0x8(%esp)
c0106cd7:	c0 
c0106cd8:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106cdf:	00 
c0106ce0:	c7 04 24 7b db 10 c0 	movl   $0xc010db7b,(%esp)
c0106ce7:	e8 ee a0 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0106cec:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0106cf1:	8b 55 08             	mov    0x8(%ebp),%edx
c0106cf4:	c1 ea 0c             	shr    $0xc,%edx
c0106cf7:	c1 e2 05             	shl    $0x5,%edx
c0106cfa:	01 d0                	add    %edx,%eax
}
c0106cfc:	c9                   	leave  
c0106cfd:	c3                   	ret    

c0106cfe <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106cfe:	55                   	push   %ebp
c0106cff:	89 e5                	mov    %esp,%ebp
c0106d01:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106d04:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d07:	83 e0 01             	and    $0x1,%eax
c0106d0a:	85 c0                	test   %eax,%eax
c0106d0c:	75 1c                	jne    c0106d2a <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106d0e:	c7 44 24 08 8c db 10 	movl   $0xc010db8c,0x8(%esp)
c0106d15:	c0 
c0106d16:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106d1d:	00 
c0106d1e:	c7 04 24 7b db 10 c0 	movl   $0xc010db7b,(%esp)
c0106d25:	e8 b0 a0 ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106d2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d2d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d32:	89 04 24             	mov    %eax,(%esp)
c0106d35:	e8 7f ff ff ff       	call   c0106cb9 <pa2page>
}
c0106d3a:	c9                   	leave  
c0106d3b:	c3                   	ret    

c0106d3c <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106d3c:	55                   	push   %ebp
c0106d3d:	89 e5                	mov    %esp,%ebp
c0106d3f:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d45:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d4a:	89 04 24             	mov    %eax,(%esp)
c0106d4d:	e8 67 ff ff ff       	call   c0106cb9 <pa2page>
}
c0106d52:	c9                   	leave  
c0106d53:	c3                   	ret    

c0106d54 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106d54:	55                   	push   %ebp
c0106d55:	89 e5                	mov    %esp,%ebp
c0106d57:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106d5a:	e8 28 24 00 00       	call   c0109187 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106d5f:	a1 3c 1f 1b c0       	mov    0xc01b1f3c,%eax
c0106d64:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106d69:	76 0c                	jbe    c0106d77 <swap_init+0x23>
c0106d6b:	a1 3c 1f 1b c0       	mov    0xc01b1f3c,%eax
c0106d70:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106d75:	76 25                	jbe    c0106d9c <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106d77:	a1 3c 1f 1b c0       	mov    0xc01b1f3c,%eax
c0106d7c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106d80:	c7 44 24 08 ad db 10 	movl   $0xc010dbad,0x8(%esp)
c0106d87:	c0 
c0106d88:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106d8f:	00 
c0106d90:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0106d97:	e8 3e a0 ff ff       	call   c0100dda <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106d9c:	c7 05 14 fe 1a c0 60 	movl   $0xc012da60,0xc01afe14
c0106da3:	da 12 c0 
     int r = sm->init();
c0106da6:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106dab:	8b 40 04             	mov    0x4(%eax),%eax
c0106dae:	ff d0                	call   *%eax
c0106db0:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106db3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106db7:	75 26                	jne    c0106ddf <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106db9:	c7 05 0c fe 1a c0 01 	movl   $0x1,0xc01afe0c
c0106dc0:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106dc3:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106dc8:	8b 00                	mov    (%eax),%eax
c0106dca:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106dce:	c7 04 24 d7 db 10 c0 	movl   $0xc010dbd7,(%esp)
c0106dd5:	e8 7e 95 ff ff       	call   c0100358 <cprintf>
          check_swap();
c0106dda:	e8 a4 04 00 00       	call   c0107283 <check_swap>
     }

     return r;
c0106ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106de2:	c9                   	leave  
c0106de3:	c3                   	ret    

c0106de4 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106de4:	55                   	push   %ebp
c0106de5:	89 e5                	mov    %esp,%ebp
c0106de7:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106dea:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106def:	8b 40 08             	mov    0x8(%eax),%eax
c0106df2:	8b 55 08             	mov    0x8(%ebp),%edx
c0106df5:	89 14 24             	mov    %edx,(%esp)
c0106df8:	ff d0                	call   *%eax
}
c0106dfa:	c9                   	leave  
c0106dfb:	c3                   	ret    

c0106dfc <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106dfc:	55                   	push   %ebp
c0106dfd:	89 e5                	mov    %esp,%ebp
c0106dff:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106e02:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106e07:	8b 40 0c             	mov    0xc(%eax),%eax
c0106e0a:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e0d:	89 14 24             	mov    %edx,(%esp)
c0106e10:	ff d0                	call   *%eax
}
c0106e12:	c9                   	leave  
c0106e13:	c3                   	ret    

c0106e14 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106e14:	55                   	push   %ebp
c0106e15:	89 e5                	mov    %esp,%ebp
c0106e17:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106e1a:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106e1f:	8b 40 10             	mov    0x10(%eax),%eax
c0106e22:	8b 55 14             	mov    0x14(%ebp),%edx
c0106e25:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106e29:	8b 55 10             	mov    0x10(%ebp),%edx
c0106e2c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e30:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e33:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e37:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e3a:	89 14 24             	mov    %edx,(%esp)
c0106e3d:	ff d0                	call   *%eax
}
c0106e3f:	c9                   	leave  
c0106e40:	c3                   	ret    

c0106e41 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106e41:	55                   	push   %ebp
c0106e42:	89 e5                	mov    %esp,%ebp
c0106e44:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106e47:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106e4c:	8b 40 14             	mov    0x14(%eax),%eax
c0106e4f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e52:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e56:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e59:	89 14 24             	mov    %edx,(%esp)
c0106e5c:	ff d0                	call   *%eax
}
c0106e5e:	c9                   	leave  
c0106e5f:	c3                   	ret    

c0106e60 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106e60:	55                   	push   %ebp
c0106e61:	89 e5                	mov    %esp,%ebp
c0106e63:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106e66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106e6d:	e9 5a 01 00 00       	jmp    c0106fcc <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106e72:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106e77:	8b 40 18             	mov    0x18(%eax),%eax
c0106e7a:	8b 55 10             	mov    0x10(%ebp),%edx
c0106e7d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e81:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106e84:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e88:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e8b:	89 14 24             	mov    %edx,(%esp)
c0106e8e:	ff d0                	call   *%eax
c0106e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106e93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106e97:	74 18                	je     c0106eb1 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106ea0:	c7 04 24 ec db 10 c0 	movl   $0xc010dbec,(%esp)
c0106ea7:	e8 ac 94 ff ff       	call   c0100358 <cprintf>
c0106eac:	e9 27 01 00 00       	jmp    c0106fd8 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106eb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106eb4:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106eb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106eba:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ebd:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ec0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106ec7:	00 
c0106ec8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106ecb:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ecf:	89 04 24             	mov    %eax,(%esp)
c0106ed2:	e8 f0 e8 ff ff       	call   c01057c7 <get_pte>
c0106ed7:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106eda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106edd:	8b 00                	mov    (%eax),%eax
c0106edf:	83 e0 01             	and    $0x1,%eax
c0106ee2:	85 c0                	test   %eax,%eax
c0106ee4:	75 24                	jne    c0106f0a <swap_out+0xaa>
c0106ee6:	c7 44 24 0c 19 dc 10 	movl   $0xc010dc19,0xc(%esp)
c0106eed:	c0 
c0106eee:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0106ef5:	c0 
c0106ef6:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106efd:	00 
c0106efe:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0106f05:	e8 d0 9e ff ff       	call   c0100dda <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106f0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f0d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106f10:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106f13:	c1 ea 0c             	shr    $0xc,%edx
c0106f16:	83 c2 01             	add    $0x1,%edx
c0106f19:	c1 e2 08             	shl    $0x8,%edx
c0106f1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f20:	89 14 24             	mov    %edx,(%esp)
c0106f23:	e8 19 23 00 00       	call   c0109241 <swapfs_write>
c0106f28:	85 c0                	test   %eax,%eax
c0106f2a:	74 34                	je     c0106f60 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106f2c:	c7 04 24 43 dc 10 c0 	movl   $0xc010dc43,(%esp)
c0106f33:	e8 20 94 ff ff       	call   c0100358 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106f38:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0106f3d:	8b 40 10             	mov    0x10(%eax),%eax
c0106f40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106f43:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106f4a:	00 
c0106f4b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f4f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f52:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f56:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f59:	89 14 24             	mov    %edx,(%esp)
c0106f5c:	ff d0                	call   *%eax
c0106f5e:	eb 68                	jmp    c0106fc8 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106f60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f63:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f66:	c1 e8 0c             	shr    $0xc,%eax
c0106f69:	83 c0 01             	add    $0x1,%eax
c0106f6c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106f70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f73:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f7e:	c7 04 24 5c dc 10 c0 	movl   $0xc010dc5c,(%esp)
c0106f85:	e8 ce 93 ff ff       	call   c0100358 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0106f8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f8d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f90:	c1 e8 0c             	shr    $0xc,%eax
c0106f93:	83 c0 01             	add    $0x1,%eax
c0106f96:	c1 e0 08             	shl    $0x8,%eax
c0106f99:	89 c2                	mov    %eax,%edx
c0106f9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106f9e:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0106fa0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fa3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106faa:	00 
c0106fab:	89 04 24             	mov    %eax,(%esp)
c0106fae:	e8 18 e1 ff ff       	call   c01050cb <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0106fb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fb6:	8b 40 0c             	mov    0xc(%eax),%eax
c0106fb9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fbc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fc0:	89 04 24             	mov    %eax,(%esp)
c0106fc3:	e8 0c ef ff ff       	call   c0105ed4 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0106fc8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fcf:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106fd2:	0f 85 9a fe ff ff    	jne    c0106e72 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0106fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106fdb:	c9                   	leave  
c0106fdc:	c3                   	ret    

c0106fdd <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0106fdd:	55                   	push   %ebp
c0106fde:	89 e5                	mov    %esp,%ebp
c0106fe0:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0106fe3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106fea:	e8 71 e0 ff ff       	call   c0105060 <alloc_pages>
c0106fef:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0106ff2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ff6:	75 24                	jne    c010701c <swap_in+0x3f>
c0106ff8:	c7 44 24 0c 9c dc 10 	movl   $0xc010dc9c,0xc(%esp)
c0106fff:	c0 
c0107000:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107007:	c0 
c0107008:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c010700f:	00 
c0107010:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107017:	e8 be 9d ff ff       	call   c0100dda <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010701c:	8b 45 08             	mov    0x8(%ebp),%eax
c010701f:	8b 40 0c             	mov    0xc(%eax),%eax
c0107022:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107029:	00 
c010702a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010702d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107031:	89 04 24             	mov    %eax,(%esp)
c0107034:	e8 8e e7 ff ff       	call   c01057c7 <get_pte>
c0107039:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010703c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010703f:	8b 00                	mov    (%eax),%eax
c0107041:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107044:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107048:	89 04 24             	mov    %eax,(%esp)
c010704b:	e8 7f 21 00 00       	call   c01091cf <swapfs_read>
c0107050:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107053:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107057:	74 2a                	je     c0107083 <swap_in+0xa6>
     {
        assert(r!=0);
c0107059:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010705d:	75 24                	jne    c0107083 <swap_in+0xa6>
c010705f:	c7 44 24 0c a9 dc 10 	movl   $0xc010dca9,0xc(%esp)
c0107066:	c0 
c0107067:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010706e:	c0 
c010706f:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107076:	00 
c0107077:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010707e:	e8 57 9d ff ff       	call   c0100dda <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107083:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107086:	8b 00                	mov    (%eax),%eax
c0107088:	c1 e8 08             	shr    $0x8,%eax
c010708b:	89 c2                	mov    %eax,%edx
c010708d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107090:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107094:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107098:	c7 04 24 b0 dc 10 c0 	movl   $0xc010dcb0,(%esp)
c010709f:	e8 b4 92 ff ff       	call   c0100358 <cprintf>
     *ptr_result=result;
c01070a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01070a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01070aa:	89 10                	mov    %edx,(%eax)
     return 0;
c01070ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01070b1:	c9                   	leave  
c01070b2:	c3                   	ret    

c01070b3 <check_content_set>:



static inline void
check_content_set(void)
{
c01070b3:	55                   	push   %ebp
c01070b4:	89 e5                	mov    %esp,%ebp
c01070b6:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01070b9:	b8 00 10 00 00       	mov    $0x1000,%eax
c01070be:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01070c1:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c01070c6:	83 f8 01             	cmp    $0x1,%eax
c01070c9:	74 24                	je     c01070ef <check_content_set+0x3c>
c01070cb:	c7 44 24 0c ee dc 10 	movl   $0xc010dcee,0xc(%esp)
c01070d2:	c0 
c01070d3:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01070da:	c0 
c01070db:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01070e2:	00 
c01070e3:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01070ea:	e8 eb 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01070ef:	b8 10 10 00 00       	mov    $0x1010,%eax
c01070f4:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01070f7:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c01070fc:	83 f8 01             	cmp    $0x1,%eax
c01070ff:	74 24                	je     c0107125 <check_content_set+0x72>
c0107101:	c7 44 24 0c ee dc 10 	movl   $0xc010dcee,0xc(%esp)
c0107108:	c0 
c0107109:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107110:	c0 
c0107111:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0107118:	00 
c0107119:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107120:	e8 b5 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107125:	b8 00 20 00 00       	mov    $0x2000,%eax
c010712a:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010712d:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107132:	83 f8 02             	cmp    $0x2,%eax
c0107135:	74 24                	je     c010715b <check_content_set+0xa8>
c0107137:	c7 44 24 0c fd dc 10 	movl   $0xc010dcfd,0xc(%esp)
c010713e:	c0 
c010713f:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107146:	c0 
c0107147:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010714e:	00 
c010714f:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107156:	e8 7f 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010715b:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107160:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107163:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107168:	83 f8 02             	cmp    $0x2,%eax
c010716b:	74 24                	je     c0107191 <check_content_set+0xde>
c010716d:	c7 44 24 0c fd dc 10 	movl   $0xc010dcfd,0xc(%esp)
c0107174:	c0 
c0107175:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010717c:	c0 
c010717d:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107184:	00 
c0107185:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010718c:	e8 49 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107191:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107196:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107199:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c010719e:	83 f8 03             	cmp    $0x3,%eax
c01071a1:	74 24                	je     c01071c7 <check_content_set+0x114>
c01071a3:	c7 44 24 0c 0c dd 10 	movl   $0xc010dd0c,0xc(%esp)
c01071aa:	c0 
c01071ab:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01071b2:	c0 
c01071b3:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01071ba:	00 
c01071bb:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01071c2:	e8 13 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01071c7:	b8 10 30 00 00       	mov    $0x3010,%eax
c01071cc:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01071cf:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c01071d4:	83 f8 03             	cmp    $0x3,%eax
c01071d7:	74 24                	je     c01071fd <check_content_set+0x14a>
c01071d9:	c7 44 24 0c 0c dd 10 	movl   $0xc010dd0c,0xc(%esp)
c01071e0:	c0 
c01071e1:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01071e8:	c0 
c01071e9:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01071f0:	00 
c01071f1:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01071f8:	e8 dd 9b ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01071fd:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107202:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107205:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c010720a:	83 f8 04             	cmp    $0x4,%eax
c010720d:	74 24                	je     c0107233 <check_content_set+0x180>
c010720f:	c7 44 24 0c 1b dd 10 	movl   $0xc010dd1b,0xc(%esp)
c0107216:	c0 
c0107217:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010721e:	c0 
c010721f:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107226:	00 
c0107227:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010722e:	e8 a7 9b ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107233:	b8 10 40 00 00       	mov    $0x4010,%eax
c0107238:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010723b:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107240:	83 f8 04             	cmp    $0x4,%eax
c0107243:	74 24                	je     c0107269 <check_content_set+0x1b6>
c0107245:	c7 44 24 0c 1b dd 10 	movl   $0xc010dd1b,0xc(%esp)
c010724c:	c0 
c010724d:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107254:	c0 
c0107255:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010725c:	00 
c010725d:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107264:	e8 71 9b ff ff       	call   c0100dda <__panic>
}
c0107269:	c9                   	leave  
c010726a:	c3                   	ret    

c010726b <check_content_access>:

static inline int
check_content_access(void)
{
c010726b:	55                   	push   %ebp
c010726c:	89 e5                	mov    %esp,%ebp
c010726e:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107271:	a1 14 fe 1a c0       	mov    0xc01afe14,%eax
c0107276:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107279:	ff d0                	call   *%eax
c010727b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010727e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107281:	c9                   	leave  
c0107282:	c3                   	ret    

c0107283 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107283:	55                   	push   %ebp
c0107284:	89 e5                	mov    %esp,%ebp
c0107286:	53                   	push   %ebx
c0107287:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010728a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107291:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107298:	c7 45 e8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010729f:	eb 6b                	jmp    c010730c <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c01072a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072a4:	83 e8 0c             	sub    $0xc,%eax
c01072a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01072aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01072ad:	83 c0 04             	add    $0x4,%eax
c01072b0:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01072b7:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01072ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01072bd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01072c0:	0f a3 10             	bt     %edx,(%eax)
c01072c3:	19 c0                	sbb    %eax,%eax
c01072c5:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c01072c8:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01072cc:	0f 95 c0             	setne  %al
c01072cf:	0f b6 c0             	movzbl %al,%eax
c01072d2:	85 c0                	test   %eax,%eax
c01072d4:	75 24                	jne    c01072fa <check_swap+0x77>
c01072d6:	c7 44 24 0c 2a dd 10 	movl   $0xc010dd2a,0xc(%esp)
c01072dd:	c0 
c01072de:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01072e5:	c0 
c01072e6:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01072ed:	00 
c01072ee:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01072f5:	e8 e0 9a ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c01072fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01072fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107301:	8b 50 08             	mov    0x8(%eax),%edx
c0107304:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107307:	01 d0                	add    %edx,%eax
c0107309:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010730c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010730f:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107312:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107315:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107318:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010731b:	81 7d e8 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x18(%ebp)
c0107322:	0f 85 79 ff ff ff    	jne    c01072a1 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0107328:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010732b:	e8 cd dd ff ff       	call   c01050fd <nr_free_pages>
c0107330:	39 c3                	cmp    %eax,%ebx
c0107332:	74 24                	je     c0107358 <check_swap+0xd5>
c0107334:	c7 44 24 0c 3a dd 10 	movl   $0xc010dd3a,0xc(%esp)
c010733b:	c0 
c010733c:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107343:	c0 
c0107344:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010734b:	00 
c010734c:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107353:	e8 82 9a ff ff       	call   c0100dda <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107358:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010735b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010735f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107362:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107366:	c7 04 24 54 dd 10 c0 	movl   $0xc010dd54,(%esp)
c010736d:	e8 e6 8f ff ff       	call   c0100358 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107372:	e8 74 0b 00 00       	call   c0107eeb <mm_create>
c0107377:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010737a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010737e:	75 24                	jne    c01073a4 <check_swap+0x121>
c0107380:	c7 44 24 0c 7a dd 10 	movl   $0xc010dd7a,0xc(%esp)
c0107387:	c0 
c0107388:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010738f:	c0 
c0107390:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107397:	00 
c0107398:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010739f:	e8 36 9a ff ff       	call   c0100dda <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01073a4:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c01073a9:	85 c0                	test   %eax,%eax
c01073ab:	74 24                	je     c01073d1 <check_swap+0x14e>
c01073ad:	c7 44 24 0c 85 dd 10 	movl   $0xc010dd85,0xc(%esp)
c01073b4:	c0 
c01073b5:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01073bc:	c0 
c01073bd:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01073c4:	00 
c01073c5:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01073cc:	e8 09 9a ff ff       	call   c0100dda <__panic>

     check_mm_struct = mm;
c01073d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073d4:	a3 6c 1f 1b c0       	mov    %eax,0xc01b1f6c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01073d9:	8b 15 84 fd 1a c0    	mov    0xc01afd84,%edx
c01073df:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073e2:	89 50 0c             	mov    %edx,0xc(%eax)
c01073e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073e8:	8b 40 0c             	mov    0xc(%eax),%eax
c01073eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01073ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01073f1:	8b 00                	mov    (%eax),%eax
c01073f3:	85 c0                	test   %eax,%eax
c01073f5:	74 24                	je     c010741b <check_swap+0x198>
c01073f7:	c7 44 24 0c 9d dd 10 	movl   $0xc010dd9d,0xc(%esp)
c01073fe:	c0 
c01073ff:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107406:	c0 
c0107407:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c010740e:	00 
c010740f:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107416:	e8 bf 99 ff ff       	call   c0100dda <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c010741b:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107422:	00 
c0107423:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c010742a:	00 
c010742b:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107432:	e8 4d 0b 00 00       	call   c0107f84 <vma_create>
c0107437:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010743a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010743e:	75 24                	jne    c0107464 <check_swap+0x1e1>
c0107440:	c7 44 24 0c ab dd 10 	movl   $0xc010ddab,0xc(%esp)
c0107447:	c0 
c0107448:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010744f:	c0 
c0107450:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107457:	00 
c0107458:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010745f:	e8 76 99 ff ff       	call   c0100dda <__panic>

     insert_vma_struct(mm, vma);
c0107464:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107467:	89 44 24 04          	mov    %eax,0x4(%esp)
c010746b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010746e:	89 04 24             	mov    %eax,(%esp)
c0107471:	e8 9e 0c 00 00       	call   c0108114 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107476:	c7 04 24 b8 dd 10 c0 	movl   $0xc010ddb8,(%esp)
c010747d:	e8 d6 8e ff ff       	call   c0100358 <cprintf>
     pte_t *temp_ptep=NULL;
c0107482:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107489:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010748c:	8b 40 0c             	mov    0xc(%eax),%eax
c010748f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107496:	00 
c0107497:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010749e:	00 
c010749f:	89 04 24             	mov    %eax,(%esp)
c01074a2:	e8 20 e3 ff ff       	call   c01057c7 <get_pte>
c01074a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c01074aa:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01074ae:	75 24                	jne    c01074d4 <check_swap+0x251>
c01074b0:	c7 44 24 0c ec dd 10 	movl   $0xc010ddec,0xc(%esp)
c01074b7:	c0 
c01074b8:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01074bf:	c0 
c01074c0:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01074c7:	00 
c01074c8:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01074cf:	e8 06 99 ff ff       	call   c0100dda <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01074d4:	c7 04 24 00 de 10 c0 	movl   $0xc010de00,(%esp)
c01074db:	e8 78 8e ff ff       	call   c0100358 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01074e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01074e7:	e9 a3 00 00 00       	jmp    c010758f <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01074ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01074f3:	e8 68 db ff ff       	call   c0105060 <alloc_pages>
c01074f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01074fb:	89 04 95 a0 1e 1b c0 	mov    %eax,-0x3fe4e160(,%edx,4)
          assert(check_rp[i] != NULL );
c0107502:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107505:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c010750c:	85 c0                	test   %eax,%eax
c010750e:	75 24                	jne    c0107534 <check_swap+0x2b1>
c0107510:	c7 44 24 0c 24 de 10 	movl   $0xc010de24,0xc(%esp)
c0107517:	c0 
c0107518:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010751f:	c0 
c0107520:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0107527:	00 
c0107528:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010752f:	e8 a6 98 ff ff       	call   c0100dda <__panic>
          assert(!PageProperty(check_rp[i]));
c0107534:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107537:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c010753e:	83 c0 04             	add    $0x4,%eax
c0107541:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107548:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010754b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010754e:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107551:	0f a3 10             	bt     %edx,(%eax)
c0107554:	19 c0                	sbb    %eax,%eax
c0107556:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0107559:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010755d:	0f 95 c0             	setne  %al
c0107560:	0f b6 c0             	movzbl %al,%eax
c0107563:	85 c0                	test   %eax,%eax
c0107565:	74 24                	je     c010758b <check_swap+0x308>
c0107567:	c7 44 24 0c 38 de 10 	movl   $0xc010de38,0xc(%esp)
c010756e:	c0 
c010756f:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107576:	c0 
c0107577:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010757e:	00 
c010757f:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107586:	e8 4f 98 ff ff       	call   c0100dda <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010758b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010758f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107593:	0f 8e 53 ff ff ff    	jle    c01074ec <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107599:	a1 7c 1e 1b c0       	mov    0xc01b1e7c,%eax
c010759e:	8b 15 80 1e 1b c0    	mov    0xc01b1e80,%edx
c01075a4:	89 45 98             	mov    %eax,-0x68(%ebp)
c01075a7:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01075aa:	c7 45 a8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01075b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01075b4:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01075b7:	89 50 04             	mov    %edx,0x4(%eax)
c01075ba:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01075bd:	8b 50 04             	mov    0x4(%eax),%edx
c01075c0:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01075c3:	89 10                	mov    %edx,(%eax)
c01075c5:	c7 45 a4 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01075cc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01075cf:	8b 40 04             	mov    0x4(%eax),%eax
c01075d2:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c01075d5:	0f 94 c0             	sete   %al
c01075d8:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c01075db:	85 c0                	test   %eax,%eax
c01075dd:	75 24                	jne    c0107603 <check_swap+0x380>
c01075df:	c7 44 24 0c 53 de 10 	movl   $0xc010de53,0xc(%esp)
c01075e6:	c0 
c01075e7:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01075ee:	c0 
c01075ef:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01075f6:	00 
c01075f7:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01075fe:	e8 d7 97 ff ff       	call   c0100dda <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107603:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0107608:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c010760b:	c7 05 84 1e 1b c0 00 	movl   $0x0,0xc01b1e84
c0107612:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107615:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010761c:	eb 1e                	jmp    c010763c <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c010761e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107621:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c0107628:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010762f:	00 
c0107630:	89 04 24             	mov    %eax,(%esp)
c0107633:	e8 93 da ff ff       	call   c01050cb <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107638:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010763c:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107640:	7e dc                	jle    c010761e <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107642:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0107647:	83 f8 04             	cmp    $0x4,%eax
c010764a:	74 24                	je     c0107670 <check_swap+0x3ed>
c010764c:	c7 44 24 0c 6c de 10 	movl   $0xc010de6c,0xc(%esp)
c0107653:	c0 
c0107654:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010765b:	c0 
c010765c:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107663:	00 
c0107664:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010766b:	e8 6a 97 ff ff       	call   c0100dda <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107670:	c7 04 24 90 de 10 c0 	movl   $0xc010de90,(%esp)
c0107677:	e8 dc 8c ff ff       	call   c0100358 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010767c:	c7 05 18 fe 1a c0 00 	movl   $0x0,0xc01afe18
c0107683:	00 00 00 
     
     check_content_set();
c0107686:	e8 28 fa ff ff       	call   c01070b3 <check_content_set>
     assert( nr_free == 0);         
c010768b:	a1 84 1e 1b c0       	mov    0xc01b1e84,%eax
c0107690:	85 c0                	test   %eax,%eax
c0107692:	74 24                	je     c01076b8 <check_swap+0x435>
c0107694:	c7 44 24 0c b7 de 10 	movl   $0xc010deb7,0xc(%esp)
c010769b:	c0 
c010769c:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01076a3:	c0 
c01076a4:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01076ab:	00 
c01076ac:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01076b3:	e8 22 97 ff ff       	call   c0100dda <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01076b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076bf:	eb 26                	jmp    c01076e7 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01076c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076c4:	c7 04 85 c0 1e 1b c0 	movl   $0xffffffff,-0x3fe4e140(,%eax,4)
c01076cb:	ff ff ff ff 
c01076cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076d2:	8b 14 85 c0 1e 1b c0 	mov    -0x3fe4e140(,%eax,4),%edx
c01076d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076dc:	89 14 85 00 1f 1b c0 	mov    %edx,-0x3fe4e100(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01076e3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076e7:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01076eb:	7e d4                	jle    c01076c1 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076ed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076f4:	e9 eb 00 00 00       	jmp    c01077e4 <check_swap+0x561>
         check_ptep[i]=0;
c01076f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076fc:	c7 04 85 54 1f 1b c0 	movl   $0x0,-0x3fe4e0ac(,%eax,4)
c0107703:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107707:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010770a:	83 c0 01             	add    $0x1,%eax
c010770d:	c1 e0 0c             	shl    $0xc,%eax
c0107710:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107717:	00 
c0107718:	89 44 24 04          	mov    %eax,0x4(%esp)
c010771c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010771f:	89 04 24             	mov    %eax,(%esp)
c0107722:	e8 a0 e0 ff ff       	call   c01057c7 <get_pte>
c0107727:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010772a:	89 04 95 54 1f 1b c0 	mov    %eax,-0x3fe4e0ac(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107731:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107734:	8b 04 85 54 1f 1b c0 	mov    -0x3fe4e0ac(,%eax,4),%eax
c010773b:	85 c0                	test   %eax,%eax
c010773d:	75 24                	jne    c0107763 <check_swap+0x4e0>
c010773f:	c7 44 24 0c c4 de 10 	movl   $0xc010dec4,0xc(%esp)
c0107746:	c0 
c0107747:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c010774e:	c0 
c010774f:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107756:	00 
c0107757:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c010775e:	e8 77 96 ff ff       	call   c0100dda <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107763:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107766:	8b 04 85 54 1f 1b c0 	mov    -0x3fe4e0ac(,%eax,4),%eax
c010776d:	8b 00                	mov    (%eax),%eax
c010776f:	89 04 24             	mov    %eax,(%esp)
c0107772:	e8 87 f5 ff ff       	call   c0106cfe <pte2page>
c0107777:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010777a:	8b 14 95 a0 1e 1b c0 	mov    -0x3fe4e160(,%edx,4),%edx
c0107781:	39 d0                	cmp    %edx,%eax
c0107783:	74 24                	je     c01077a9 <check_swap+0x526>
c0107785:	c7 44 24 0c dc de 10 	movl   $0xc010dedc,0xc(%esp)
c010778c:	c0 
c010778d:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107794:	c0 
c0107795:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010779c:	00 
c010779d:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01077a4:	e8 31 96 ff ff       	call   c0100dda <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01077a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077ac:	8b 04 85 54 1f 1b c0 	mov    -0x3fe4e0ac(,%eax,4),%eax
c01077b3:	8b 00                	mov    (%eax),%eax
c01077b5:	83 e0 01             	and    $0x1,%eax
c01077b8:	85 c0                	test   %eax,%eax
c01077ba:	75 24                	jne    c01077e0 <check_swap+0x55d>
c01077bc:	c7 44 24 0c 04 df 10 	movl   $0xc010df04,0xc(%esp)
c01077c3:	c0 
c01077c4:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c01077cb:	c0 
c01077cc:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01077d3:	00 
c01077d4:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c01077db:	e8 fa 95 ff ff       	call   c0100dda <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077e0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077e4:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01077e8:	0f 8e 0b ff ff ff    	jle    c01076f9 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01077ee:	c7 04 24 20 df 10 c0 	movl   $0xc010df20,(%esp)
c01077f5:	e8 5e 8b ff ff       	call   c0100358 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01077fa:	e8 6c fa ff ff       	call   c010726b <check_content_access>
c01077ff:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0107802:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107806:	74 24                	je     c010782c <check_swap+0x5a9>
c0107808:	c7 44 24 0c 46 df 10 	movl   $0xc010df46,0xc(%esp)
c010780f:	c0 
c0107810:	c7 44 24 08 2e dc 10 	movl   $0xc010dc2e,0x8(%esp)
c0107817:	c0 
c0107818:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010781f:	00 
c0107820:	c7 04 24 c8 db 10 c0 	movl   $0xc010dbc8,(%esp)
c0107827:	e8 ae 95 ff ff       	call   c0100dda <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010782c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107833:	eb 1e                	jmp    c0107853 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107835:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107838:	8b 04 85 a0 1e 1b c0 	mov    -0x3fe4e160(,%eax,4),%eax
c010783f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107846:	00 
c0107847:	89 04 24             	mov    %eax,(%esp)
c010784a:	e8 7c d8 ff ff       	call   c01050cb <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010784f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107853:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107857:	7e dc                	jle    c0107835 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0107859:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010785c:	8b 00                	mov    (%eax),%eax
c010785e:	89 04 24             	mov    %eax,(%esp)
c0107861:	e8 d6 f4 ff ff       	call   c0106d3c <pde2page>
c0107866:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010786d:	00 
c010786e:	89 04 24             	mov    %eax,(%esp)
c0107871:	e8 55 d8 ff ff       	call   c01050cb <free_pages>
     pgdir[0] = 0;
c0107876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107879:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010787f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107882:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107889:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010788c:	89 04 24             	mov    %eax,(%esp)
c010788f:	e8 b0 09 00 00       	call   c0108244 <mm_destroy>
     check_mm_struct = NULL;
c0107894:	c7 05 6c 1f 1b c0 00 	movl   $0x0,0xc01b1f6c
c010789b:	00 00 00 
     
     nr_free = nr_free_store;
c010789e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01078a1:	a3 84 1e 1b c0       	mov    %eax,0xc01b1e84
     free_list = free_list_store;
c01078a6:	8b 45 98             	mov    -0x68(%ebp),%eax
c01078a9:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01078ac:	a3 7c 1e 1b c0       	mov    %eax,0xc01b1e7c
c01078b1:	89 15 80 1e 1b c0    	mov    %edx,0xc01b1e80

     
     le = &free_list;
c01078b7:	c7 45 e8 7c 1e 1b c0 	movl   $0xc01b1e7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01078be:	eb 1d                	jmp    c01078dd <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c01078c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01078c3:	83 e8 0c             	sub    $0xc,%eax
c01078c6:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c01078c9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01078cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01078d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01078d3:	8b 40 08             	mov    0x8(%eax),%eax
c01078d6:	29 c2                	sub    %eax,%edx
c01078d8:	89 d0                	mov    %edx,%eax
c01078da:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01078dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01078e0:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01078e3:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01078e6:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01078e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01078ec:	81 7d e8 7c 1e 1b c0 	cmpl   $0xc01b1e7c,-0x18(%ebp)
c01078f3:	75 cb                	jne    c01078c0 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01078f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078f8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01078fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107903:	c7 04 24 4d df 10 c0 	movl   $0xc010df4d,(%esp)
c010790a:	e8 49 8a ff ff       	call   c0100358 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c010790f:	c7 04 24 67 df 10 c0 	movl   $0xc010df67,(%esp)
c0107916:	e8 3d 8a ff ff       	call   c0100358 <cprintf>
}
c010791b:	83 c4 74             	add    $0x74,%esp
c010791e:	5b                   	pop    %ebx
c010791f:	5d                   	pop    %ebp
c0107920:	c3                   	ret    

c0107921 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107921:	55                   	push   %ebp
c0107922:	89 e5                	mov    %esp,%ebp
c0107924:	83 ec 10             	sub    $0x10,%esp
c0107927:	c7 45 fc 64 1f 1b c0 	movl   $0xc01b1f64,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010792e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107931:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107934:	89 50 04             	mov    %edx,0x4(%eax)
c0107937:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010793a:	8b 50 04             	mov    0x4(%eax),%edx
c010793d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107940:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107942:	8b 45 08             	mov    0x8(%ebp),%eax
c0107945:	c7 40 14 64 1f 1b c0 	movl   $0xc01b1f64,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c010794c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107951:	c9                   	leave  
c0107952:	c3                   	ret    

c0107953 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107953:	55                   	push   %ebp
c0107954:	89 e5                	mov    %esp,%ebp
c0107956:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107959:	8b 45 08             	mov    0x8(%ebp),%eax
c010795c:	8b 40 14             	mov    0x14(%eax),%eax
c010795f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107962:	8b 45 10             	mov    0x10(%ebp),%eax
c0107965:	83 c0 14             	add    $0x14,%eax
c0107968:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c010796b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010796f:	74 06                	je     c0107977 <_fifo_map_swappable+0x24>
c0107971:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107975:	75 24                	jne    c010799b <_fifo_map_swappable+0x48>
c0107977:	c7 44 24 0c 80 df 10 	movl   $0xc010df80,0xc(%esp)
c010797e:	c0 
c010797f:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107986:	c0 
c0107987:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c010798e:	00 
c010798f:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107996:	e8 3f 94 ff ff       	call   c0100dda <__panic>
c010799b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010799e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01079a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01079a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01079ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01079b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01079b6:	8b 40 04             	mov    0x4(%eax),%eax
c01079b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01079bc:	89 55 dc             	mov    %edx,-0x24(%ebp)
c01079bf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01079c2:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01079c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01079c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01079cb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01079ce:	89 10                	mov    %edx,(%eax)
c01079d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01079d3:	8b 10                	mov    (%eax),%edx
c01079d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01079d8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01079db:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01079e1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01079e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01079ea:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2013011296*/
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c01079ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01079f1:	c9                   	leave  
c01079f2:	c3                   	ret    

c01079f3 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c01079f3:	55                   	push   %ebp
c01079f4:	89 e5                	mov    %esp,%ebp
c01079f6:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01079f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01079fc:	8b 40 14             	mov    0x14(%eax),%eax
c01079ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107a02:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a06:	75 24                	jne    c0107a2c <_fifo_swap_out_victim+0x39>
c0107a08:	c7 44 24 0c c7 df 10 	movl   $0xc010dfc7,0xc(%esp)
c0107a0f:	c0 
c0107a10:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107a17:	c0 
c0107a18:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107a1f:	00 
c0107a20:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107a27:	e8 ae 93 ff ff       	call   c0100dda <__panic>
     assert(in_tick==0);
c0107a2c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107a30:	74 24                	je     c0107a56 <_fifo_swap_out_victim+0x63>
c0107a32:	c7 44 24 0c d4 df 10 	movl   $0xc010dfd4,0xc(%esp)
c0107a39:	c0 
c0107a3a:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107a41:	c0 
c0107a42:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107a49:	00 
c0107a4a:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107a51:	e8 84 93 ff ff       	call   c0100dda <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2013011296*/
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0107a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a59:	8b 00                	mov    (%eax),%eax
c0107a5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a61:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107a64:	75 24                	jne    c0107a8a <_fifo_swap_out_victim+0x97>
c0107a66:	c7 44 24 0c df df 10 	movl   $0xc010dfdf,0xc(%esp)
c0107a6d:	c0 
c0107a6e:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107a75:	c0 
c0107a76:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0107a7d:	00 
c0107a7e:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107a85:	e8 50 93 ff ff       	call   c0100dda <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107a8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a8d:	83 e8 14             	sub    $0x14,%eax
c0107a90:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a96:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107a99:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a9c:	8b 40 04             	mov    0x4(%eax),%eax
c0107a9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107aa2:	8b 12                	mov    (%edx),%edx
c0107aa4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107aa7:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107aaa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107aad:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107ab0:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107ab3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ab6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107ab9:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107abb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107abf:	75 24                	jne    c0107ae5 <_fifo_swap_out_victim+0xf2>
c0107ac1:	c7 44 24 0c e8 df 10 	movl   $0xc010dfe8,0xc(%esp)
c0107ac8:	c0 
c0107ac9:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107ad0:	c0 
c0107ad1:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0107ad8:	00 
c0107ad9:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107ae0:	e8 f5 92 ff ff       	call   c0100dda <__panic>
     *ptr_page = p;
c0107ae5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ae8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107aeb:	89 10                	mov    %edx,(%eax)
     return 0;
c0107aed:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107af2:	c9                   	leave  
c0107af3:	c3                   	ret    

c0107af4 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107af4:	55                   	push   %ebp
c0107af5:	89 e5                	mov    %esp,%ebp
c0107af7:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107afa:	c7 04 24 f4 df 10 c0 	movl   $0xc010dff4,(%esp)
c0107b01:	e8 52 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107b06:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107b0b:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107b0e:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107b13:	83 f8 04             	cmp    $0x4,%eax
c0107b16:	74 24                	je     c0107b3c <_fifo_check_swap+0x48>
c0107b18:	c7 44 24 0c 1a e0 10 	movl   $0xc010e01a,0xc(%esp)
c0107b1f:	c0 
c0107b20:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107b27:	c0 
c0107b28:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107b2f:	00 
c0107b30:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107b37:	e8 9e 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107b3c:	c7 04 24 2c e0 10 c0 	movl   $0xc010e02c,(%esp)
c0107b43:	e8 10 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107b48:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107b4d:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107b50:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107b55:	83 f8 04             	cmp    $0x4,%eax
c0107b58:	74 24                	je     c0107b7e <_fifo_check_swap+0x8a>
c0107b5a:	c7 44 24 0c 1a e0 10 	movl   $0xc010e01a,0xc(%esp)
c0107b61:	c0 
c0107b62:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107b69:	c0 
c0107b6a:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107b71:	00 
c0107b72:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107b79:	e8 5c 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107b7e:	c7 04 24 54 e0 10 c0 	movl   $0xc010e054,(%esp)
c0107b85:	e8 ce 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107b8a:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107b8f:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107b92:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107b97:	83 f8 04             	cmp    $0x4,%eax
c0107b9a:	74 24                	je     c0107bc0 <_fifo_check_swap+0xcc>
c0107b9c:	c7 44 24 0c 1a e0 10 	movl   $0xc010e01a,0xc(%esp)
c0107ba3:	c0 
c0107ba4:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107bab:	c0 
c0107bac:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107bb3:	00 
c0107bb4:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107bbb:	e8 1a 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107bc0:	c7 04 24 7c e0 10 c0 	movl   $0xc010e07c,(%esp)
c0107bc7:	e8 8c 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107bcc:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107bd1:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107bd4:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107bd9:	83 f8 04             	cmp    $0x4,%eax
c0107bdc:	74 24                	je     c0107c02 <_fifo_check_swap+0x10e>
c0107bde:	c7 44 24 0c 1a e0 10 	movl   $0xc010e01a,0xc(%esp)
c0107be5:	c0 
c0107be6:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107bed:	c0 
c0107bee:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107bf5:	00 
c0107bf6:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107bfd:	e8 d8 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107c02:	c7 04 24 a4 e0 10 c0 	movl   $0xc010e0a4,(%esp)
c0107c09:	e8 4a 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107c0e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107c13:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107c16:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107c1b:	83 f8 05             	cmp    $0x5,%eax
c0107c1e:	74 24                	je     c0107c44 <_fifo_check_swap+0x150>
c0107c20:	c7 44 24 0c ca e0 10 	movl   $0xc010e0ca,0xc(%esp)
c0107c27:	c0 
c0107c28:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107c2f:	c0 
c0107c30:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107c37:	00 
c0107c38:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107c3f:	e8 96 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c44:	c7 04 24 7c e0 10 c0 	movl   $0xc010e07c,(%esp)
c0107c4b:	e8 08 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c50:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c55:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107c58:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107c5d:	83 f8 05             	cmp    $0x5,%eax
c0107c60:	74 24                	je     c0107c86 <_fifo_check_swap+0x192>
c0107c62:	c7 44 24 0c ca e0 10 	movl   $0xc010e0ca,0xc(%esp)
c0107c69:	c0 
c0107c6a:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107c71:	c0 
c0107c72:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107c79:	00 
c0107c7a:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107c81:	e8 54 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107c86:	c7 04 24 2c e0 10 c0 	movl   $0xc010e02c,(%esp)
c0107c8d:	e8 c6 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c92:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c97:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107c9a:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107c9f:	83 f8 06             	cmp    $0x6,%eax
c0107ca2:	74 24                	je     c0107cc8 <_fifo_check_swap+0x1d4>
c0107ca4:	c7 44 24 0c d9 e0 10 	movl   $0xc010e0d9,0xc(%esp)
c0107cab:	c0 
c0107cac:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107cb3:	c0 
c0107cb4:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107cbb:	00 
c0107cbc:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107cc3:	e8 12 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107cc8:	c7 04 24 7c e0 10 c0 	movl   $0xc010e07c,(%esp)
c0107ccf:	e8 84 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107cd4:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107cd9:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107cdc:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107ce1:	83 f8 07             	cmp    $0x7,%eax
c0107ce4:	74 24                	je     c0107d0a <_fifo_check_swap+0x216>
c0107ce6:	c7 44 24 0c e8 e0 10 	movl   $0xc010e0e8,0xc(%esp)
c0107ced:	c0 
c0107cee:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107cf5:	c0 
c0107cf6:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107cfd:	00 
c0107cfe:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107d05:	e8 d0 90 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107d0a:	c7 04 24 f4 df 10 c0 	movl   $0xc010dff4,(%esp)
c0107d11:	e8 42 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107d16:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107d1b:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107d1e:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107d23:	83 f8 08             	cmp    $0x8,%eax
c0107d26:	74 24                	je     c0107d4c <_fifo_check_swap+0x258>
c0107d28:	c7 44 24 0c f7 e0 10 	movl   $0xc010e0f7,0xc(%esp)
c0107d2f:	c0 
c0107d30:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107d37:	c0 
c0107d38:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107d3f:	00 
c0107d40:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107d47:	e8 8e 90 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107d4c:	c7 04 24 54 e0 10 c0 	movl   $0xc010e054,(%esp)
c0107d53:	e8 00 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107d58:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107d5d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107d60:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107d65:	83 f8 09             	cmp    $0x9,%eax
c0107d68:	74 24                	je     c0107d8e <_fifo_check_swap+0x29a>
c0107d6a:	c7 44 24 0c 06 e1 10 	movl   $0xc010e106,0xc(%esp)
c0107d71:	c0 
c0107d72:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107d79:	c0 
c0107d7a:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107d81:	00 
c0107d82:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107d89:	e8 4c 90 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107d8e:	c7 04 24 a4 e0 10 c0 	movl   $0xc010e0a4,(%esp)
c0107d95:	e8 be 85 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107d9a:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107d9f:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0107da2:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107da7:	83 f8 0a             	cmp    $0xa,%eax
c0107daa:	74 24                	je     c0107dd0 <_fifo_check_swap+0x2dc>
c0107dac:	c7 44 24 0c 15 e1 10 	movl   $0xc010e115,0xc(%esp)
c0107db3:	c0 
c0107db4:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107dbb:	c0 
c0107dbc:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0107dc3:	00 
c0107dc4:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107dcb:	e8 0a 90 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107dd0:	c7 04 24 2c e0 10 c0 	movl   $0xc010e02c,(%esp)
c0107dd7:	e8 7c 85 ff ff       	call   c0100358 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0107ddc:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107de1:	0f b6 00             	movzbl (%eax),%eax
c0107de4:	3c 0a                	cmp    $0xa,%al
c0107de6:	74 24                	je     c0107e0c <_fifo_check_swap+0x318>
c0107de8:	c7 44 24 0c 28 e1 10 	movl   $0xc010e128,0xc(%esp)
c0107def:	c0 
c0107df0:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107df7:	c0 
c0107df8:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0107dff:	00 
c0107e00:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107e07:	e8 ce 8f ff ff       	call   c0100dda <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0107e0c:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107e11:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0107e14:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0107e19:	83 f8 0b             	cmp    $0xb,%eax
c0107e1c:	74 24                	je     c0107e42 <_fifo_check_swap+0x34e>
c0107e1e:	c7 44 24 0c 49 e1 10 	movl   $0xc010e149,0xc(%esp)
c0107e25:	c0 
c0107e26:	c7 44 24 08 9e df 10 	movl   $0xc010df9e,0x8(%esp)
c0107e2d:	c0 
c0107e2e:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0107e35:	00 
c0107e36:	c7 04 24 b3 df 10 c0 	movl   $0xc010dfb3,(%esp)
c0107e3d:	e8 98 8f ff ff       	call   c0100dda <__panic>
    return 0;
c0107e42:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e47:	c9                   	leave  
c0107e48:	c3                   	ret    

c0107e49 <_fifo_init>:


static int
_fifo_init(void)
{
c0107e49:	55                   	push   %ebp
c0107e4a:	89 e5                	mov    %esp,%ebp
    return 0;
c0107e4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e51:	5d                   	pop    %ebp
c0107e52:	c3                   	ret    

c0107e53 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107e53:	55                   	push   %ebp
c0107e54:	89 e5                	mov    %esp,%ebp
    return 0;
c0107e56:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e5b:	5d                   	pop    %ebp
c0107e5c:	c3                   	ret    

c0107e5d <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107e5d:	55                   	push   %ebp
c0107e5e:	89 e5                	mov    %esp,%ebp
c0107e60:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e65:	5d                   	pop    %ebp
c0107e66:	c3                   	ret    

c0107e67 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0107e67:	55                   	push   %ebp
c0107e68:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0107e6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e6d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0107e73:	5d                   	pop    %ebp
c0107e74:	c3                   	ret    

c0107e75 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107e75:	55                   	push   %ebp
c0107e76:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107e78:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e7b:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107e7e:	5d                   	pop    %ebp
c0107e7f:	c3                   	ret    

c0107e80 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107e80:	55                   	push   %ebp
c0107e81:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107e83:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e86:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e89:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107e8c:	5d                   	pop    %ebp
c0107e8d:	c3                   	ret    

c0107e8e <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107e8e:	55                   	push   %ebp
c0107e8f:	89 e5                	mov    %esp,%ebp
c0107e91:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107e94:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e97:	c1 e8 0c             	shr    $0xc,%eax
c0107e9a:	89 c2                	mov    %eax,%edx
c0107e9c:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0107ea1:	39 c2                	cmp    %eax,%edx
c0107ea3:	72 1c                	jb     c0107ec1 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107ea5:	c7 44 24 08 6c e1 10 	movl   $0xc010e16c,0x8(%esp)
c0107eac:	c0 
c0107ead:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107eb4:	00 
c0107eb5:	c7 04 24 8b e1 10 c0 	movl   $0xc010e18b,(%esp)
c0107ebc:	e8 19 8f ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0107ec1:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0107ec6:	8b 55 08             	mov    0x8(%ebp),%edx
c0107ec9:	c1 ea 0c             	shr    $0xc,%edx
c0107ecc:	c1 e2 05             	shl    $0x5,%edx
c0107ecf:	01 d0                	add    %edx,%eax
}
c0107ed1:	c9                   	leave  
c0107ed2:	c3                   	ret    

c0107ed3 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107ed3:	55                   	push   %ebp
c0107ed4:	89 e5                	mov    %esp,%ebp
c0107ed6:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107ed9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107edc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107ee1:	89 04 24             	mov    %eax,(%esp)
c0107ee4:	e8 a5 ff ff ff       	call   c0107e8e <pa2page>
}
c0107ee9:	c9                   	leave  
c0107eea:	c3                   	ret    

c0107eeb <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107eeb:	55                   	push   %ebp
c0107eec:	89 e5                	mov    %esp,%ebp
c0107eee:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107ef1:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0107ef8:	e8 ee cc ff ff       	call   c0104beb <kmalloc>
c0107efd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107f00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f04:	74 79                	je     c0107f7f <mm_create+0x94>
        list_init(&(mm->mmap_list));
c0107f06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f09:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f0f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107f12:	89 50 04             	mov    %edx,0x4(%eax)
c0107f15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f18:	8b 50 04             	mov    0x4(%eax),%edx
c0107f1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f1e:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f23:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107f2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f2d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107f34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f37:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107f3e:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c0107f43:	85 c0                	test   %eax,%eax
c0107f45:	74 0d                	je     c0107f54 <mm_create+0x69>
c0107f47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f4a:	89 04 24             	mov    %eax,(%esp)
c0107f4d:	e8 92 ee ff ff       	call   c0106de4 <swap_init_mm>
c0107f52:	eb 0a                	jmp    c0107f5e <mm_create+0x73>
        else mm->sm_priv = NULL;
c0107f54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f57:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107f5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107f65:	00 
c0107f66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f69:	89 04 24             	mov    %eax,(%esp)
c0107f6c:	e8 0f ff ff ff       	call   c0107e80 <set_mm_count>
        lock_init(&(mm->mm_lock));
c0107f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f74:	83 c0 1c             	add    $0x1c,%eax
c0107f77:	89 04 24             	mov    %eax,(%esp)
c0107f7a:	e8 e8 fe ff ff       	call   c0107e67 <lock_init>
    }    
    return mm;
c0107f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f82:	c9                   	leave  
c0107f83:	c3                   	ret    

c0107f84 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107f84:	55                   	push   %ebp
c0107f85:	89 e5                	mov    %esp,%ebp
c0107f87:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107f8a:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107f91:	e8 55 cc ff ff       	call   c0104beb <kmalloc>
c0107f96:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107f99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f9d:	74 1b                	je     c0107fba <vma_create+0x36>
        vma->vm_start = vm_start;
c0107f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fa2:	8b 55 08             	mov    0x8(%ebp),%edx
c0107fa5:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fab:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107fae:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fb4:	8b 55 10             	mov    0x10(%ebp),%edx
c0107fb7:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107fbd:	c9                   	leave  
c0107fbe:	c3                   	ret    

c0107fbf <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107fbf:	55                   	push   %ebp
c0107fc0:	89 e5                	mov    %esp,%ebp
c0107fc2:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107fc5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107fcc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107fd0:	0f 84 95 00 00 00    	je     c010806b <find_vma+0xac>
        vma = mm->mmap_cache;
c0107fd6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fd9:	8b 40 08             	mov    0x8(%eax),%eax
c0107fdc:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107fdf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107fe3:	74 16                	je     c0107ffb <find_vma+0x3c>
c0107fe5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fe8:	8b 40 04             	mov    0x4(%eax),%eax
c0107feb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fee:	77 0b                	ja     c0107ffb <find_vma+0x3c>
c0107ff0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107ff3:	8b 40 08             	mov    0x8(%eax),%eax
c0107ff6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107ff9:	77 61                	ja     c010805c <find_vma+0x9d>
                bool found = 0;
c0107ffb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0108002:	8b 45 08             	mov    0x8(%ebp),%eax
c0108005:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108008:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010800b:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c010800e:	eb 28                	jmp    c0108038 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0108010:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108013:	83 e8 10             	sub    $0x10,%eax
c0108016:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0108019:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010801c:	8b 40 04             	mov    0x4(%eax),%eax
c010801f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108022:	77 14                	ja     c0108038 <find_vma+0x79>
c0108024:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108027:	8b 40 08             	mov    0x8(%eax),%eax
c010802a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010802d:	76 09                	jbe    c0108038 <find_vma+0x79>
                        found = 1;
c010802f:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0108036:	eb 17                	jmp    c010804f <find_vma+0x90>
c0108038:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010803b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010803e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108041:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0108044:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108047:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010804a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010804d:	75 c1                	jne    c0108010 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010804f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0108053:	75 07                	jne    c010805c <find_vma+0x9d>
                    vma = NULL;
c0108055:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010805c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108060:	74 09                	je     c010806b <find_vma+0xac>
            mm->mmap_cache = vma;
c0108062:	8b 45 08             	mov    0x8(%ebp),%eax
c0108065:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108068:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010806b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010806e:	c9                   	leave  
c010806f:	c3                   	ret    

c0108070 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0108070:	55                   	push   %ebp
c0108071:	89 e5                	mov    %esp,%ebp
c0108073:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108076:	8b 45 08             	mov    0x8(%ebp),%eax
c0108079:	8b 50 04             	mov    0x4(%eax),%edx
c010807c:	8b 45 08             	mov    0x8(%ebp),%eax
c010807f:	8b 40 08             	mov    0x8(%eax),%eax
c0108082:	39 c2                	cmp    %eax,%edx
c0108084:	72 24                	jb     c01080aa <check_vma_overlap+0x3a>
c0108086:	c7 44 24 0c 99 e1 10 	movl   $0xc010e199,0xc(%esp)
c010808d:	c0 
c010808e:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108095:	c0 
c0108096:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010809d:	00 
c010809e:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c01080a5:	e8 30 8d ff ff       	call   c0100dda <__panic>
    assert(prev->vm_end <= next->vm_start);
c01080aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ad:	8b 50 08             	mov    0x8(%eax),%edx
c01080b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080b3:	8b 40 04             	mov    0x4(%eax),%eax
c01080b6:	39 c2                	cmp    %eax,%edx
c01080b8:	76 24                	jbe    c01080de <check_vma_overlap+0x6e>
c01080ba:	c7 44 24 0c dc e1 10 	movl   $0xc010e1dc,0xc(%esp)
c01080c1:	c0 
c01080c2:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c01080c9:	c0 
c01080ca:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01080d1:	00 
c01080d2:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c01080d9:	e8 fc 8c ff ff       	call   c0100dda <__panic>
    assert(next->vm_start < next->vm_end);
c01080de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080e1:	8b 50 04             	mov    0x4(%eax),%edx
c01080e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080e7:	8b 40 08             	mov    0x8(%eax),%eax
c01080ea:	39 c2                	cmp    %eax,%edx
c01080ec:	72 24                	jb     c0108112 <check_vma_overlap+0xa2>
c01080ee:	c7 44 24 0c fb e1 10 	movl   $0xc010e1fb,0xc(%esp)
c01080f5:	c0 
c01080f6:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c01080fd:	c0 
c01080fe:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108105:	00 
c0108106:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c010810d:	e8 c8 8c ff ff       	call   c0100dda <__panic>
}
c0108112:	c9                   	leave  
c0108113:	c3                   	ret    

c0108114 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0108114:	55                   	push   %ebp
c0108115:	89 e5                	mov    %esp,%ebp
c0108117:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c010811a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010811d:	8b 50 04             	mov    0x4(%eax),%edx
c0108120:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108123:	8b 40 08             	mov    0x8(%eax),%eax
c0108126:	39 c2                	cmp    %eax,%edx
c0108128:	72 24                	jb     c010814e <insert_vma_struct+0x3a>
c010812a:	c7 44 24 0c 19 e2 10 	movl   $0xc010e219,0xc(%esp)
c0108131:	c0 
c0108132:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108139:	c0 
c010813a:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108141:	00 
c0108142:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108149:	e8 8c 8c ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010814e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108151:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108154:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108157:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010815a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010815d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0108160:	eb 21                	jmp    c0108183 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108162:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108165:	83 e8 10             	sub    $0x10,%eax
c0108168:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010816b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010816e:	8b 50 04             	mov    0x4(%eax),%edx
c0108171:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108174:	8b 40 04             	mov    0x4(%eax),%eax
c0108177:	39 c2                	cmp    %eax,%edx
c0108179:	76 02                	jbe    c010817d <insert_vma_struct+0x69>
                break;
c010817b:	eb 1d                	jmp    c010819a <insert_vma_struct+0x86>
            }
            le_prev = le;
c010817d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108180:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108183:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108186:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108189:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010818c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010818f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108192:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108195:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108198:	75 c8                	jne    c0108162 <insert_vma_struct+0x4e>
c010819a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010819d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01081a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01081a3:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01081a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01081a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01081af:	74 15                	je     c01081c6 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01081b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081b4:	8d 50 f0             	lea    -0x10(%eax),%edx
c01081b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081be:	89 14 24             	mov    %edx,(%esp)
c01081c1:	e8 aa fe ff ff       	call   c0108070 <check_vma_overlap>
    }
    if (le_next != list) {
c01081c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01081c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01081cc:	74 15                	je     c01081e3 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01081ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01081d1:	83 e8 10             	sub    $0x10,%eax
c01081d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081db:	89 04 24             	mov    %eax,(%esp)
c01081de:	e8 8d fe ff ff       	call   c0108070 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01081e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081e6:	8b 55 08             	mov    0x8(%ebp),%edx
c01081e9:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01081eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ee:	8d 50 10             	lea    0x10(%eax),%edx
c01081f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081f4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01081f7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01081fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01081fd:	8b 40 04             	mov    0x4(%eax),%eax
c0108200:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108203:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108206:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108209:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010820c:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010820f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108212:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108215:	89 10                	mov    %edx,(%eax)
c0108217:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010821a:	8b 10                	mov    (%eax),%edx
c010821c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010821f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108222:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108225:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108228:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010822b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010822e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108231:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108233:	8b 45 08             	mov    0x8(%ebp),%eax
c0108236:	8b 40 10             	mov    0x10(%eax),%eax
c0108239:	8d 50 01             	lea    0x1(%eax),%edx
c010823c:	8b 45 08             	mov    0x8(%ebp),%eax
c010823f:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108242:	c9                   	leave  
c0108243:	c3                   	ret    

c0108244 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108244:	55                   	push   %ebp
c0108245:	89 e5                	mov    %esp,%ebp
c0108247:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010824a:	8b 45 08             	mov    0x8(%ebp),%eax
c010824d:	89 04 24             	mov    %eax,(%esp)
c0108250:	e8 20 fc ff ff       	call   c0107e75 <mm_count>
c0108255:	85 c0                	test   %eax,%eax
c0108257:	74 24                	je     c010827d <mm_destroy+0x39>
c0108259:	c7 44 24 0c 35 e2 10 	movl   $0xc010e235,0xc(%esp)
c0108260:	c0 
c0108261:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108268:	c0 
c0108269:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108270:	00 
c0108271:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108278:	e8 5d 8b ff ff       	call   c0100dda <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010827d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108280:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108283:	eb 36                	jmp    c01082bb <mm_destroy+0x77>
c0108285:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108288:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010828b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010828e:	8b 40 04             	mov    0x4(%eax),%eax
c0108291:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108294:	8b 12                	mov    (%edx),%edx
c0108296:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108299:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010829c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010829f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01082a2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01082a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082a8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01082ab:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01082ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082b0:	83 e8 10             	sub    $0x10,%eax
c01082b3:	89 04 24             	mov    %eax,(%esp)
c01082b6:	e8 4b c9 ff ff       	call   c0104c06 <kfree>
c01082bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082be:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01082c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082c4:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01082c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082cd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01082d0:	75 b3                	jne    c0108285 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01082d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01082d5:	89 04 24             	mov    %eax,(%esp)
c01082d8:	e8 29 c9 ff ff       	call   c0104c06 <kfree>
    mm=NULL;
c01082dd:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01082e4:	c9                   	leave  
c01082e5:	c3                   	ret    

c01082e6 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01082e6:	55                   	push   %ebp
c01082e7:	89 e5                	mov    %esp,%ebp
c01082e9:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01082ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082f5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01082fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01082fd:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108304:	8b 45 10             	mov    0x10(%ebp),%eax
c0108307:	8b 55 0c             	mov    0xc(%ebp),%edx
c010830a:	01 c2                	add    %eax,%edx
c010830c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010830f:	01 d0                	add    %edx,%eax
c0108311:	83 e8 01             	sub    $0x1,%eax
c0108314:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108317:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010831a:	ba 00 00 00 00       	mov    $0x0,%edx
c010831f:	f7 75 e8             	divl   -0x18(%ebp)
c0108322:	89 d0                	mov    %edx,%eax
c0108324:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108327:	29 c2                	sub    %eax,%edx
c0108329:	89 d0                	mov    %edx,%eax
c010832b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010832e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108335:	76 11                	jbe    c0108348 <mm_map+0x62>
c0108337:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010833a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010833d:	73 09                	jae    c0108348 <mm_map+0x62>
c010833f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108346:	76 0a                	jbe    c0108352 <mm_map+0x6c>
        return -E_INVAL;
c0108348:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010834d:	e9 ae 00 00 00       	jmp    c0108400 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0108352:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108356:	75 24                	jne    c010837c <mm_map+0x96>
c0108358:	c7 44 24 0c 47 e2 10 	movl   $0xc010e247,0xc(%esp)
c010835f:	c0 
c0108360:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108367:	c0 
c0108368:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010836f:	00 
c0108370:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108377:	e8 5e 8a ff ff       	call   c0100dda <__panic>

    int ret = -E_INVAL;
c010837c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108383:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108386:	89 44 24 04          	mov    %eax,0x4(%esp)
c010838a:	8b 45 08             	mov    0x8(%ebp),%eax
c010838d:	89 04 24             	mov    %eax,(%esp)
c0108390:	e8 2a fc ff ff       	call   c0107fbf <find_vma>
c0108395:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108398:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010839c:	74 0d                	je     c01083ab <mm_map+0xc5>
c010839e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01083a1:	8b 40 04             	mov    0x4(%eax),%eax
c01083a4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01083a7:	73 02                	jae    c01083ab <mm_map+0xc5>
        goto out;
c01083a9:	eb 52                	jmp    c01083fd <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c01083ab:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01083b2:	8b 45 14             	mov    0x14(%ebp),%eax
c01083b5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01083b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01083bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083c3:	89 04 24             	mov    %eax,(%esp)
c01083c6:	e8 b9 fb ff ff       	call   c0107f84 <vma_create>
c01083cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01083ce:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01083d2:	75 02                	jne    c01083d6 <mm_map+0xf0>
        goto out;
c01083d4:	eb 27                	jmp    c01083fd <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c01083d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01083d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01083e0:	89 04 24             	mov    %eax,(%esp)
c01083e3:	e8 2c fd ff ff       	call   c0108114 <insert_vma_struct>
    if (vma_store != NULL) {
c01083e8:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01083ec:	74 08                	je     c01083f6 <mm_map+0x110>
        *vma_store = vma;
c01083ee:	8b 45 18             	mov    0x18(%ebp),%eax
c01083f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01083f4:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01083f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c01083fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108400:	c9                   	leave  
c0108401:	c3                   	ret    

c0108402 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108402:	55                   	push   %ebp
c0108403:	89 e5                	mov    %esp,%ebp
c0108405:	56                   	push   %esi
c0108406:	53                   	push   %ebx
c0108407:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010840a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010840e:	74 06                	je     c0108416 <dup_mmap+0x14>
c0108410:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108414:	75 24                	jne    c010843a <dup_mmap+0x38>
c0108416:	c7 44 24 0c 52 e2 10 	movl   $0xc010e252,0xc(%esp)
c010841d:	c0 
c010841e:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108425:	c0 
c0108426:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010842d:	00 
c010842e:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108435:	e8 a0 89 ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010843a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010843d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108440:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108443:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0108446:	e9 92 00 00 00       	jmp    c01084dd <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010844b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010844e:	83 e8 10             	sub    $0x10,%eax
c0108451:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108454:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108457:	8b 48 0c             	mov    0xc(%eax),%ecx
c010845a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010845d:	8b 50 08             	mov    0x8(%eax),%edx
c0108460:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108463:	8b 40 04             	mov    0x4(%eax),%eax
c0108466:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010846a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010846e:	89 04 24             	mov    %eax,(%esp)
c0108471:	e8 0e fb ff ff       	call   c0107f84 <vma_create>
c0108476:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108479:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010847d:	75 07                	jne    c0108486 <dup_mmap+0x84>
            return -E_NO_MEM;
c010847f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108484:	eb 76                	jmp    c01084fc <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108486:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108489:	89 44 24 04          	mov    %eax,0x4(%esp)
c010848d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108490:	89 04 24             	mov    %eax,(%esp)
c0108493:	e8 7c fc ff ff       	call   c0108114 <insert_vma_struct>

        bool share = 0;
c0108498:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010849f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084a2:	8b 58 08             	mov    0x8(%eax),%ebx
c01084a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084a8:	8b 48 04             	mov    0x4(%eax),%ecx
c01084ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084ae:	8b 50 0c             	mov    0xc(%eax),%edx
c01084b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01084b4:	8b 40 0c             	mov    0xc(%eax),%eax
c01084b7:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01084ba:	89 74 24 10          	mov    %esi,0x10(%esp)
c01084be:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01084c2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01084c6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084ca:	89 04 24             	mov    %eax,(%esp)
c01084cd:	e8 e2 d6 ff ff       	call   c0105bb4 <copy_range>
c01084d2:	85 c0                	test   %eax,%eax
c01084d4:	74 07                	je     c01084dd <dup_mmap+0xdb>
            return -E_NO_MEM;
c01084d6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01084db:	eb 1f                	jmp    c01084fc <dup_mmap+0xfa>
c01084dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01084e3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084e6:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01084e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01084eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084ee:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01084f1:	0f 85 54 ff ff ff    	jne    c010844b <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01084f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01084fc:	83 c4 40             	add    $0x40,%esp
c01084ff:	5b                   	pop    %ebx
c0108500:	5e                   	pop    %esi
c0108501:	5d                   	pop    %ebp
c0108502:	c3                   	ret    

c0108503 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108503:	55                   	push   %ebp
c0108504:	89 e5                	mov    %esp,%ebp
c0108506:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0108509:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010850d:	74 0f                	je     c010851e <exit_mmap+0x1b>
c010850f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108512:	89 04 24             	mov    %eax,(%esp)
c0108515:	e8 5b f9 ff ff       	call   c0107e75 <mm_count>
c010851a:	85 c0                	test   %eax,%eax
c010851c:	74 24                	je     c0108542 <exit_mmap+0x3f>
c010851e:	c7 44 24 0c 70 e2 10 	movl   $0xc010e270,0xc(%esp)
c0108525:	c0 
c0108526:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c010852d:	c0 
c010852e:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108535:	00 
c0108536:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c010853d:	e8 98 88 ff ff       	call   c0100dda <__panic>
    pde_t *pgdir = mm->pgdir;
c0108542:	8b 45 08             	mov    0x8(%ebp),%eax
c0108545:	8b 40 0c             	mov    0xc(%eax),%eax
c0108548:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010854b:	8b 45 08             	mov    0x8(%ebp),%eax
c010854e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108551:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108554:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108557:	eb 28                	jmp    c0108581 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0108559:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010855c:	83 e8 10             	sub    $0x10,%eax
c010855f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108562:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108565:	8b 50 08             	mov    0x8(%eax),%edx
c0108568:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010856b:	8b 40 04             	mov    0x4(%eax),%eax
c010856e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108572:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108576:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108579:	89 04 24             	mov    %eax,(%esp)
c010857c:	e8 38 d4 ff ff       	call   c01059b9 <unmap_range>
c0108581:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108584:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108587:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010858a:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010858d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108590:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108593:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108596:	75 c1                	jne    c0108559 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108598:	eb 28                	jmp    c01085c2 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c010859a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010859d:	83 e8 10             	sub    $0x10,%eax
c01085a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01085a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085a6:	8b 50 08             	mov    0x8(%eax),%edx
c01085a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085ac:	8b 40 04             	mov    0x4(%eax),%eax
c01085af:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085ba:	89 04 24             	mov    %eax,(%esp)
c01085bd:	e8 eb d4 ff ff       	call   c0105aad <exit_range>
c01085c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01085c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01085cb:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01085ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01085d7:	75 c1                	jne    c010859a <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01085d9:	c9                   	leave  
c01085da:	c3                   	ret    

c01085db <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01085db:	55                   	push   %ebp
c01085dc:	89 e5                	mov    %esp,%ebp
c01085de:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01085e1:	8b 45 10             	mov    0x10(%ebp),%eax
c01085e4:	8b 55 18             	mov    0x18(%ebp),%edx
c01085e7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01085eb:	8b 55 14             	mov    0x14(%ebp),%edx
c01085ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01085f9:	89 04 24             	mov    %eax,(%esp)
c01085fc:	e8 e5 09 00 00       	call   c0108fe6 <user_mem_check>
c0108601:	85 c0                	test   %eax,%eax
c0108603:	75 07                	jne    c010860c <copy_from_user+0x31>
        return 0;
c0108605:	b8 00 00 00 00       	mov    $0x0,%eax
c010860a:	eb 1e                	jmp    c010862a <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c010860c:	8b 45 14             	mov    0x14(%ebp),%eax
c010860f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108613:	8b 45 10             	mov    0x10(%ebp),%eax
c0108616:	89 44 24 04          	mov    %eax,0x4(%esp)
c010861a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010861d:	89 04 24             	mov    %eax,(%esp)
c0108620:	e8 fe 3f 00 00       	call   c010c623 <memcpy>
    return 1;
c0108625:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010862a:	c9                   	leave  
c010862b:	c3                   	ret    

c010862c <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c010862c:	55                   	push   %ebp
c010862d:	89 e5                	mov    %esp,%ebp
c010862f:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108632:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108635:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010863c:	00 
c010863d:	8b 55 14             	mov    0x14(%ebp),%edx
c0108640:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108644:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108648:	8b 45 08             	mov    0x8(%ebp),%eax
c010864b:	89 04 24             	mov    %eax,(%esp)
c010864e:	e8 93 09 00 00       	call   c0108fe6 <user_mem_check>
c0108653:	85 c0                	test   %eax,%eax
c0108655:	75 07                	jne    c010865e <copy_to_user+0x32>
        return 0;
c0108657:	b8 00 00 00 00       	mov    $0x0,%eax
c010865c:	eb 1e                	jmp    c010867c <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c010865e:	8b 45 14             	mov    0x14(%ebp),%eax
c0108661:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108665:	8b 45 10             	mov    0x10(%ebp),%eax
c0108668:	89 44 24 04          	mov    %eax,0x4(%esp)
c010866c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010866f:	89 04 24             	mov    %eax,(%esp)
c0108672:	e8 ac 3f 00 00       	call   c010c623 <memcpy>
    return 1;
c0108677:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010867c:	c9                   	leave  
c010867d:	c3                   	ret    

c010867e <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010867e:	55                   	push   %ebp
c010867f:	89 e5                	mov    %esp,%ebp
c0108681:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108684:	e8 02 00 00 00       	call   c010868b <check_vmm>
}
c0108689:	c9                   	leave  
c010868a:	c3                   	ret    

c010868b <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010868b:	55                   	push   %ebp
c010868c:	89 e5                	mov    %esp,%ebp
c010868e:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108691:	e8 67 ca ff ff       	call   c01050fd <nr_free_pages>
c0108696:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108699:	e8 13 00 00 00       	call   c01086b1 <check_vma_struct>
    check_pgfault();
c010869e:	e8 a7 04 00 00       	call   c0108b4a <check_pgfault>

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c01086a3:	c7 04 24 90 e2 10 c0 	movl   $0xc010e290,(%esp)
c01086aa:	e8 a9 7c ff ff       	call   c0100358 <cprintf>
}
c01086af:	c9                   	leave  
c01086b0:	c3                   	ret    

c01086b1 <check_vma_struct>:

static void
check_vma_struct(void) {
c01086b1:	55                   	push   %ebp
c01086b2:	89 e5                	mov    %esp,%ebp
c01086b4:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01086b7:	e8 41 ca ff ff       	call   c01050fd <nr_free_pages>
c01086bc:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01086bf:	e8 27 f8 ff ff       	call   c0107eeb <mm_create>
c01086c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01086c7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01086cb:	75 24                	jne    c01086f1 <check_vma_struct+0x40>
c01086cd:	c7 44 24 0c 47 e2 10 	movl   $0xc010e247,0xc(%esp)
c01086d4:	c0 
c01086d5:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c01086dc:	c0 
c01086dd:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01086e4:	00 
c01086e5:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c01086ec:	e8 e9 86 ff ff       	call   c0100dda <__panic>

    int step1 = 10, step2 = step1 * 10;
c01086f1:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01086f8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01086fb:	89 d0                	mov    %edx,%eax
c01086fd:	c1 e0 02             	shl    $0x2,%eax
c0108700:	01 d0                	add    %edx,%eax
c0108702:	01 c0                	add    %eax,%eax
c0108704:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108707:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010870a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010870d:	eb 70                	jmp    c010877f <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010870f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108712:	89 d0                	mov    %edx,%eax
c0108714:	c1 e0 02             	shl    $0x2,%eax
c0108717:	01 d0                	add    %edx,%eax
c0108719:	83 c0 02             	add    $0x2,%eax
c010871c:	89 c1                	mov    %eax,%ecx
c010871e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108721:	89 d0                	mov    %edx,%eax
c0108723:	c1 e0 02             	shl    $0x2,%eax
c0108726:	01 d0                	add    %edx,%eax
c0108728:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010872f:	00 
c0108730:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108734:	89 04 24             	mov    %eax,(%esp)
c0108737:	e8 48 f8 ff ff       	call   c0107f84 <vma_create>
c010873c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c010873f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108743:	75 24                	jne    c0108769 <check_vma_struct+0xb8>
c0108745:	c7 44 24 0c a8 e2 10 	movl   $0xc010e2a8,0xc(%esp)
c010874c:	c0 
c010874d:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108754:	c0 
c0108755:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c010875c:	00 
c010875d:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108764:	e8 71 86 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c0108769:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010876c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108770:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108773:	89 04 24             	mov    %eax,(%esp)
c0108776:	e8 99 f9 ff ff       	call   c0108114 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c010877b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010877f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108783:	7f 8a                	jg     c010870f <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108785:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108788:	83 c0 01             	add    $0x1,%eax
c010878b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010878e:	eb 70                	jmp    c0108800 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108790:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108793:	89 d0                	mov    %edx,%eax
c0108795:	c1 e0 02             	shl    $0x2,%eax
c0108798:	01 d0                	add    %edx,%eax
c010879a:	83 c0 02             	add    $0x2,%eax
c010879d:	89 c1                	mov    %eax,%ecx
c010879f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087a2:	89 d0                	mov    %edx,%eax
c01087a4:	c1 e0 02             	shl    $0x2,%eax
c01087a7:	01 d0                	add    %edx,%eax
c01087a9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01087b0:	00 
c01087b1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01087b5:	89 04 24             	mov    %eax,(%esp)
c01087b8:	e8 c7 f7 ff ff       	call   c0107f84 <vma_create>
c01087bd:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01087c0:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01087c4:	75 24                	jne    c01087ea <check_vma_struct+0x139>
c01087c6:	c7 44 24 0c a8 e2 10 	movl   $0xc010e2a8,0xc(%esp)
c01087cd:	c0 
c01087ce:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c01087d5:	c0 
c01087d6:	c7 44 24 04 1b 01 00 	movl   $0x11b,0x4(%esp)
c01087dd:	00 
c01087de:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c01087e5:	e8 f0 85 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c01087ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01087ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087f4:	89 04 24             	mov    %eax,(%esp)
c01087f7:	e8 18 f9 ff ff       	call   c0108114 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01087fc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108800:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108803:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108806:	7e 88                	jle    c0108790 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108808:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010880b:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010880e:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108811:	8b 40 04             	mov    0x4(%eax),%eax
c0108814:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108817:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010881e:	e9 97 00 00 00       	jmp    c01088ba <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108823:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108826:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108829:	75 24                	jne    c010884f <check_vma_struct+0x19e>
c010882b:	c7 44 24 0c b4 e2 10 	movl   $0xc010e2b4,0xc(%esp)
c0108832:	c0 
c0108833:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c010883a:	c0 
c010883b:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108842:	00 
c0108843:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c010884a:	e8 8b 85 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c010884f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108852:	83 e8 10             	sub    $0x10,%eax
c0108855:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108858:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010885b:	8b 48 04             	mov    0x4(%eax),%ecx
c010885e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108861:	89 d0                	mov    %edx,%eax
c0108863:	c1 e0 02             	shl    $0x2,%eax
c0108866:	01 d0                	add    %edx,%eax
c0108868:	39 c1                	cmp    %eax,%ecx
c010886a:	75 17                	jne    c0108883 <check_vma_struct+0x1d2>
c010886c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010886f:	8b 48 08             	mov    0x8(%eax),%ecx
c0108872:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108875:	89 d0                	mov    %edx,%eax
c0108877:	c1 e0 02             	shl    $0x2,%eax
c010887a:	01 d0                	add    %edx,%eax
c010887c:	83 c0 02             	add    $0x2,%eax
c010887f:	39 c1                	cmp    %eax,%ecx
c0108881:	74 24                	je     c01088a7 <check_vma_struct+0x1f6>
c0108883:	c7 44 24 0c cc e2 10 	movl   $0xc010e2cc,0xc(%esp)
c010888a:	c0 
c010888b:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108892:	c0 
c0108893:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010889a:	00 
c010889b:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c01088a2:	e8 33 85 ff ff       	call   c0100dda <__panic>
c01088a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088aa:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01088ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01088b0:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01088b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c01088b6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01088ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088bd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01088c0:	0f 8e 5d ff ff ff    	jle    c0108823 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01088c6:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c01088cd:	e9 cd 01 00 00       	jmp    c0108a9f <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c01088d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088dc:	89 04 24             	mov    %eax,(%esp)
c01088df:	e8 db f6 ff ff       	call   c0107fbf <find_vma>
c01088e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c01088e7:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01088eb:	75 24                	jne    c0108911 <check_vma_struct+0x260>
c01088ed:	c7 44 24 0c 01 e3 10 	movl   $0xc010e301,0xc(%esp)
c01088f4:	c0 
c01088f5:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c01088fc:	c0 
c01088fd:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108904:	00 
c0108905:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c010890c:	e8 c9 84 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108914:	83 c0 01             	add    $0x1,%eax
c0108917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010891b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010891e:	89 04 24             	mov    %eax,(%esp)
c0108921:	e8 99 f6 ff ff       	call   c0107fbf <find_vma>
c0108926:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108929:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010892d:	75 24                	jne    c0108953 <check_vma_struct+0x2a2>
c010892f:	c7 44 24 0c 0e e3 10 	movl   $0xc010e30e,0xc(%esp)
c0108936:	c0 
c0108937:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c010893e:	c0 
c010893f:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108946:	00 
c0108947:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c010894e:	e8 87 84 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108953:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108956:	83 c0 02             	add    $0x2,%eax
c0108959:	89 44 24 04          	mov    %eax,0x4(%esp)
c010895d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108960:	89 04 24             	mov    %eax,(%esp)
c0108963:	e8 57 f6 ff ff       	call   c0107fbf <find_vma>
c0108968:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c010896b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010896f:	74 24                	je     c0108995 <check_vma_struct+0x2e4>
c0108971:	c7 44 24 0c 1b e3 10 	movl   $0xc010e31b,0xc(%esp)
c0108978:	c0 
c0108979:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108980:	c0 
c0108981:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108988:	00 
c0108989:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108990:	e8 45 84 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108995:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108998:	83 c0 03             	add    $0x3,%eax
c010899b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010899f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089a2:	89 04 24             	mov    %eax,(%esp)
c01089a5:	e8 15 f6 ff ff       	call   c0107fbf <find_vma>
c01089aa:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c01089ad:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01089b1:	74 24                	je     c01089d7 <check_vma_struct+0x326>
c01089b3:	c7 44 24 0c 28 e3 10 	movl   $0xc010e328,0xc(%esp)
c01089ba:	c0 
c01089bb:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c01089c2:	c0 
c01089c3:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c01089ca:	00 
c01089cb:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c01089d2:	e8 03 84 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c01089d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089da:	83 c0 04             	add    $0x4,%eax
c01089dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089e4:	89 04 24             	mov    %eax,(%esp)
c01089e7:	e8 d3 f5 ff ff       	call   c0107fbf <find_vma>
c01089ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c01089ef:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c01089f3:	74 24                	je     c0108a19 <check_vma_struct+0x368>
c01089f5:	c7 44 24 0c 35 e3 10 	movl   $0xc010e335,0xc(%esp)
c01089fc:	c0 
c01089fd:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108a04:	c0 
c0108a05:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108a0c:	00 
c0108a0d:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108a14:	e8 c1 83 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108a19:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a1c:	8b 50 04             	mov    0x4(%eax),%edx
c0108a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a22:	39 c2                	cmp    %eax,%edx
c0108a24:	75 10                	jne    c0108a36 <check_vma_struct+0x385>
c0108a26:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a29:	8b 50 08             	mov    0x8(%eax),%edx
c0108a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a2f:	83 c0 02             	add    $0x2,%eax
c0108a32:	39 c2                	cmp    %eax,%edx
c0108a34:	74 24                	je     c0108a5a <check_vma_struct+0x3a9>
c0108a36:	c7 44 24 0c 44 e3 10 	movl   $0xc010e344,0xc(%esp)
c0108a3d:	c0 
c0108a3e:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108a45:	c0 
c0108a46:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0108a4d:	00 
c0108a4e:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108a55:	e8 80 83 ff ff       	call   c0100dda <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108a5a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a5d:	8b 50 04             	mov    0x4(%eax),%edx
c0108a60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a63:	39 c2                	cmp    %eax,%edx
c0108a65:	75 10                	jne    c0108a77 <check_vma_struct+0x3c6>
c0108a67:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a6a:	8b 50 08             	mov    0x8(%eax),%edx
c0108a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a70:	83 c0 02             	add    $0x2,%eax
c0108a73:	39 c2                	cmp    %eax,%edx
c0108a75:	74 24                	je     c0108a9b <check_vma_struct+0x3ea>
c0108a77:	c7 44 24 0c 74 e3 10 	movl   $0xc010e374,0xc(%esp)
c0108a7e:	c0 
c0108a7f:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108a86:	c0 
c0108a87:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c0108a8e:	00 
c0108a8f:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108a96:	e8 3f 83 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108a9b:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108a9f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108aa2:	89 d0                	mov    %edx,%eax
c0108aa4:	c1 e0 02             	shl    $0x2,%eax
c0108aa7:	01 d0                	add    %edx,%eax
c0108aa9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108aac:	0f 8d 20 fe ff ff    	jge    c01088d2 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108ab2:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108ab9:	eb 70                	jmp    c0108b2b <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108abe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ac2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ac5:	89 04 24             	mov    %eax,(%esp)
c0108ac8:	e8 f2 f4 ff ff       	call   c0107fbf <find_vma>
c0108acd:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108ad0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108ad4:	74 27                	je     c0108afd <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108ad6:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108ad9:	8b 50 08             	mov    0x8(%eax),%edx
c0108adc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108adf:	8b 40 04             	mov    0x4(%eax),%eax
c0108ae2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108ae6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aed:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108af1:	c7 04 24 a4 e3 10 c0 	movl   $0xc010e3a4,(%esp)
c0108af8:	e8 5b 78 ff ff       	call   c0100358 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108afd:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108b01:	74 24                	je     c0108b27 <check_vma_struct+0x476>
c0108b03:	c7 44 24 0c c9 e3 10 	movl   $0xc010e3c9,0xc(%esp)
c0108b0a:	c0 
c0108b0b:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108b12:	c0 
c0108b13:	c7 44 24 04 3d 01 00 	movl   $0x13d,0x4(%esp)
c0108b1a:	00 
c0108b1b:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108b22:	e8 b3 82 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b27:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108b2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108b2f:	79 8a                	jns    c0108abb <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108b31:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b34:	89 04 24             	mov    %eax,(%esp)
c0108b37:	e8 08 f7 ff ff       	call   c0108244 <mm_destroy>

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0108b3c:	c7 04 24 e0 e3 10 c0 	movl   $0xc010e3e0,(%esp)
c0108b43:	e8 10 78 ff ff       	call   c0100358 <cprintf>
}
c0108b48:	c9                   	leave  
c0108b49:	c3                   	ret    

c0108b4a <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108b4a:	55                   	push   %ebp
c0108b4b:	89 e5                	mov    %esp,%ebp
c0108b4d:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108b50:	e8 a8 c5 ff ff       	call   c01050fd <nr_free_pages>
c0108b55:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108b58:	e8 8e f3 ff ff       	call   c0107eeb <mm_create>
c0108b5d:	a3 6c 1f 1b c0       	mov    %eax,0xc01b1f6c
    assert(check_mm_struct != NULL);
c0108b62:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0108b67:	85 c0                	test   %eax,%eax
c0108b69:	75 24                	jne    c0108b8f <check_pgfault+0x45>
c0108b6b:	c7 44 24 0c ff e3 10 	movl   $0xc010e3ff,0xc(%esp)
c0108b72:	c0 
c0108b73:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108b7a:	c0 
c0108b7b:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108b82:	00 
c0108b83:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108b8a:	e8 4b 82 ff ff       	call   c0100dda <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108b8f:	a1 6c 1f 1b c0       	mov    0xc01b1f6c,%eax
c0108b94:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108b97:	8b 15 84 fd 1a c0    	mov    0xc01afd84,%edx
c0108b9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ba0:	89 50 0c             	mov    %edx,0xc(%eax)
c0108ba3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ba6:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ba9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108baf:	8b 00                	mov    (%eax),%eax
c0108bb1:	85 c0                	test   %eax,%eax
c0108bb3:	74 24                	je     c0108bd9 <check_pgfault+0x8f>
c0108bb5:	c7 44 24 0c 17 e4 10 	movl   $0xc010e417,0xc(%esp)
c0108bbc:	c0 
c0108bbd:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108bc4:	c0 
c0108bc5:	c7 44 24 04 53 01 00 	movl   $0x153,0x4(%esp)
c0108bcc:	00 
c0108bcd:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108bd4:	e8 01 82 ff ff       	call   c0100dda <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108bd9:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108be0:	00 
c0108be1:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108be8:	00 
c0108be9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108bf0:	e8 8f f3 ff ff       	call   c0107f84 <vma_create>
c0108bf5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108bf8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108bfc:	75 24                	jne    c0108c22 <check_pgfault+0xd8>
c0108bfe:	c7 44 24 0c a8 e2 10 	movl   $0xc010e2a8,0xc(%esp)
c0108c05:	c0 
c0108c06:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108c0d:	c0 
c0108c0e:	c7 44 24 04 56 01 00 	movl   $0x156,0x4(%esp)
c0108c15:	00 
c0108c16:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108c1d:	e8 b8 81 ff ff       	call   c0100dda <__panic>

    insert_vma_struct(mm, vma);
c0108c22:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108c25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c2c:	89 04 24             	mov    %eax,(%esp)
c0108c2f:	e8 e0 f4 ff ff       	call   c0108114 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108c34:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108c3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c45:	89 04 24             	mov    %eax,(%esp)
c0108c48:	e8 72 f3 ff ff       	call   c0107fbf <find_vma>
c0108c4d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108c50:	74 24                	je     c0108c76 <check_pgfault+0x12c>
c0108c52:	c7 44 24 0c 25 e4 10 	movl   $0xc010e425,0xc(%esp)
c0108c59:	c0 
c0108c5a:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108c61:	c0 
c0108c62:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
c0108c69:	00 
c0108c6a:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108c71:	e8 64 81 ff ff       	call   c0100dda <__panic>

    int i, sum = 0;
c0108c76:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108c7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c84:	eb 17                	jmp    c0108c9d <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108c86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c89:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c8c:	01 d0                	add    %edx,%eax
c0108c8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c91:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c96:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108c99:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c9d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108ca1:	7e e3                	jle    c0108c86 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108ca3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108caa:	eb 15                	jmp    c0108cc1 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108cac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108caf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cb2:	01 d0                	add    %edx,%eax
c0108cb4:	0f b6 00             	movzbl (%eax),%eax
c0108cb7:	0f be c0             	movsbl %al,%eax
c0108cba:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108cbd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108cc1:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108cc5:	7e e5                	jle    c0108cac <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108cc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108ccb:	74 24                	je     c0108cf1 <check_pgfault+0x1a7>
c0108ccd:	c7 44 24 0c 3f e4 10 	movl   $0xc010e43f,0xc(%esp)
c0108cd4:	c0 
c0108cd5:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108cdc:	c0 
c0108cdd:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
c0108ce4:	00 
c0108ce5:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108cec:	e8 e9 80 ff ff       	call   c0100dda <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108cf1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108cf4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108cf7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108cfa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108cff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d06:	89 04 24             	mov    %eax,(%esp)
c0108d09:	e8 c9 d0 ff ff       	call   c0105dd7 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108d0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d11:	8b 00                	mov    (%eax),%eax
c0108d13:	89 04 24             	mov    %eax,(%esp)
c0108d16:	e8 b8 f1 ff ff       	call   c0107ed3 <pde2page>
c0108d1b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d22:	00 
c0108d23:	89 04 24             	mov    %eax,(%esp)
c0108d26:	e8 a0 c3 ff ff       	call   c01050cb <free_pages>
    pgdir[0] = 0;
c0108d2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d2e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108d34:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d37:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108d3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d41:	89 04 24             	mov    %eax,(%esp)
c0108d44:	e8 fb f4 ff ff       	call   c0108244 <mm_destroy>
    check_mm_struct = NULL;
c0108d49:	c7 05 6c 1f 1b c0 00 	movl   $0x0,0xc01b1f6c
c0108d50:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108d53:	e8 a5 c3 ff ff       	call   c01050fd <nr_free_pages>
c0108d58:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108d5b:	74 24                	je     c0108d81 <check_pgfault+0x237>
c0108d5d:	c7 44 24 0c 48 e4 10 	movl   $0xc010e448,0xc(%esp)
c0108d64:	c0 
c0108d65:	c7 44 24 08 b7 e1 10 	movl   $0xc010e1b7,0x8(%esp)
c0108d6c:	c0 
c0108d6d:	c7 44 24 04 6f 01 00 	movl   $0x16f,0x4(%esp)
c0108d74:	00 
c0108d75:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108d7c:	e8 59 80 ff ff       	call   c0100dda <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108d81:	c7 04 24 6f e4 10 c0 	movl   $0xc010e46f,(%esp)
c0108d88:	e8 cb 75 ff ff       	call   c0100358 <cprintf>
}
c0108d8d:	c9                   	leave  
c0108d8e:	c3                   	ret    

c0108d8f <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108d8f:	55                   	push   %ebp
c0108d90:	89 e5                	mov    %esp,%ebp
c0108d92:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108d95:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108d9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108da3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108da6:	89 04 24             	mov    %eax,(%esp)
c0108da9:	e8 11 f2 ff ff       	call   c0107fbf <find_vma>
c0108dae:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108db1:	a1 18 fe 1a c0       	mov    0xc01afe18,%eax
c0108db6:	83 c0 01             	add    $0x1,%eax
c0108db9:	a3 18 fe 1a c0       	mov    %eax,0xc01afe18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108dbe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108dc2:	74 0b                	je     c0108dcf <do_pgfault+0x40>
c0108dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108dc7:	8b 40 04             	mov    0x4(%eax),%eax
c0108dca:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108dcd:	76 18                	jbe    c0108de7 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108dcf:	8b 45 10             	mov    0x10(%ebp),%eax
c0108dd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108dd6:	c7 04 24 8c e4 10 c0 	movl   $0xc010e48c,(%esp)
c0108ddd:	e8 76 75 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108de2:	e9 fa 01 00 00       	jmp    c0108fe1 <do_pgfault+0x252>
    }
    //check the error_code
    switch (error_code & 3) {
c0108de7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108dea:	83 e0 03             	and    $0x3,%eax
c0108ded:	85 c0                	test   %eax,%eax
c0108def:	74 36                	je     c0108e27 <do_pgfault+0x98>
c0108df1:	83 f8 01             	cmp    $0x1,%eax
c0108df4:	74 20                	je     c0108e16 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108df6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108df9:	8b 40 0c             	mov    0xc(%eax),%eax
c0108dfc:	83 e0 02             	and    $0x2,%eax
c0108dff:	85 c0                	test   %eax,%eax
c0108e01:	75 11                	jne    c0108e14 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108e03:	c7 04 24 bc e4 10 c0 	movl   $0xc010e4bc,(%esp)
c0108e0a:	e8 49 75 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108e0f:	e9 cd 01 00 00       	jmp    c0108fe1 <do_pgfault+0x252>
        }
        break;
c0108e14:	eb 2f                	jmp    c0108e45 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108e16:	c7 04 24 1c e5 10 c0 	movl   $0xc010e51c,(%esp)
c0108e1d:	e8 36 75 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108e22:	e9 ba 01 00 00       	jmp    c0108fe1 <do_pgfault+0x252>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108e27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e2a:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e2d:	83 e0 05             	and    $0x5,%eax
c0108e30:	85 c0                	test   %eax,%eax
c0108e32:	75 11                	jne    c0108e45 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108e34:	c7 04 24 54 e5 10 c0 	movl   $0xc010e554,(%esp)
c0108e3b:	e8 18 75 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108e40:	e9 9c 01 00 00       	jmp    c0108fe1 <do_pgfault+0x252>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108e45:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108e4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e4f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e52:	83 e0 02             	and    $0x2,%eax
c0108e55:	85 c0                	test   %eax,%eax
c0108e57:	74 04                	je     c0108e5d <do_pgfault+0xce>
        perm |= PTE_W;
c0108e59:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108e5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e60:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108e63:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e66:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108e6b:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108e6e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108e75:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108e7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e7f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e82:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108e89:	00 
c0108e8a:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e8d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e91:	89 04 24             	mov    %eax,(%esp)
c0108e94:	e8 2e c9 ff ff       	call   c01057c7 <get_pte>
c0108e99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108e9c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108ea0:	75 11                	jne    c0108eb3 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0108ea2:	c7 04 24 b7 e5 10 c0 	movl   $0xc010e5b7,(%esp)
c0108ea9:	e8 aa 74 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108eae:	e9 2e 01 00 00       	jmp    c0108fe1 <do_pgfault+0x252>
    }

    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0108eb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108eb6:	8b 00                	mov    (%eax),%eax
c0108eb8:	85 c0                	test   %eax,%eax
c0108eba:	75 35                	jne    c0108ef1 <do_pgfault+0x162>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0108ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ebf:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ec2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108ec5:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108ec9:	8b 55 10             	mov    0x10(%ebp),%edx
c0108ecc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ed0:	89 04 24             	mov    %eax,(%esp)
c0108ed3:	e8 59 d0 ff ff       	call   c0105f31 <pgdir_alloc_page>
c0108ed8:	85 c0                	test   %eax,%eax
c0108eda:	0f 85 fa 00 00 00    	jne    c0108fda <do_pgfault+0x24b>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108ee0:	c7 04 24 d8 e5 10 c0 	movl   $0xc010e5d8,(%esp)
c0108ee7:	e8 6c 74 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108eec:	e9 f0 00 00 00       	jmp    c0108fe1 <do_pgfault+0x252>
        }
    }
    else {
        struct Page *page=NULL;
c0108ef1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0108ef8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108efb:	8b 00                	mov    (%eax),%eax
c0108efd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f08:	c7 04 24 ff e5 10 c0 	movl   $0xc010e5ff,(%esp)
c0108f0f:	e8 44 74 ff ff       	call   c0100358 <cprintf>
        if (*ptep & PTE_P) {
c0108f14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f17:	8b 00                	mov    (%eax),%eax
c0108f19:	83 e0 01             	and    $0x1,%eax
c0108f1c:	85 c0                	test   %eax,%eax
c0108f1e:	74 1c                	je     c0108f3c <do_pgfault+0x1ad>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0108f20:	c7 44 24 08 1c e6 10 	movl   $0xc010e61c,0x8(%esp)
c0108f27:	c0 
c0108f28:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c0108f2f:	00 
c0108f30:	c7 04 24 cc e1 10 c0 	movl   $0xc010e1cc,(%esp)
c0108f37:	e8 9e 7e ff ff       	call   c0100dda <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {
c0108f3c:	a1 0c fe 1a c0       	mov    0xc01afe0c,%eax
c0108f41:	85 c0                	test   %eax,%eax
c0108f43:	74 30                	je     c0108f75 <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0108f45:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108f48:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f4c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f53:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f56:	89 04 24             	mov    %eax,(%esp)
c0108f59:	e8 7f e0 ff ff       	call   c0106fdd <swap_in>
c0108f5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f65:	74 26                	je     c0108f8d <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c0108f67:	c7 04 24 3b e6 10 c0 	movl   $0xc010e63b,(%esp)
c0108f6e:	e8 e5 73 ff ff       	call   c0100358 <cprintf>
                   goto failed;
c0108f73:	eb 6c                	jmp    c0108fe1 <do_pgfault+0x252>
               }

           }
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108f75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f78:	8b 00                	mov    (%eax),%eax
c0108f7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f7e:	c7 04 24 5c e6 10 c0 	movl   $0xc010e65c,(%esp)
c0108f85:	e8 ce 73 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108f8a:	90                   	nop
c0108f8b:	eb 54                	jmp    c0108fe1 <do_pgfault+0x252>
           }
       }
       page_insert(mm->pgdir, page, addr, perm);
c0108f8d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f90:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f93:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f96:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108f99:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108f9d:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108fa0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108fa4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fa8:	89 04 24             	mov    %eax,(%esp)
c0108fab:	e8 6b ce ff ff       	call   c0105e1b <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c0108fb0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fb3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108fba:	00 
c0108fbb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108fbf:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fc2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fc9:	89 04 24             	mov    %eax,(%esp)
c0108fcc:	e8 43 de ff ff       	call   c0106e14 <swap_map_swappable>
       page->pra_vaddr = addr;
c0108fd1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fd4:	8b 55 10             	mov    0x10(%ebp),%edx
c0108fd7:	89 50 1c             	mov    %edx,0x1c(%eax)
   }
   ret = 0;
c0108fda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108fe4:	c9                   	leave  
c0108fe5:	c3                   	ret    

c0108fe6 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108fe6:	55                   	push   %ebp
c0108fe7:	89 e5                	mov    %esp,%ebp
c0108fe9:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108fec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108ff0:	0f 84 e0 00 00 00    	je     c01090d6 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108ff6:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108ffd:	76 1c                	jbe    c010901b <user_mem_check+0x35>
c0108fff:	8b 45 10             	mov    0x10(%ebp),%eax
c0109002:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109005:	01 d0                	add    %edx,%eax
c0109007:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010900a:	76 0f                	jbe    c010901b <user_mem_check+0x35>
c010900c:	8b 45 10             	mov    0x10(%ebp),%eax
c010900f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109012:	01 d0                	add    %edx,%eax
c0109014:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0109019:	76 0a                	jbe    c0109025 <user_mem_check+0x3f>
            return 0;
c010901b:	b8 00 00 00 00       	mov    $0x0,%eax
c0109020:	e9 e2 00 00 00       	jmp    c0109107 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0109025:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109028:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010902b:	8b 45 10             	mov    0x10(%ebp),%eax
c010902e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109031:	01 d0                	add    %edx,%eax
c0109033:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0109036:	e9 88 00 00 00       	jmp    c01090c3 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c010903b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010903e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109042:	8b 45 08             	mov    0x8(%ebp),%eax
c0109045:	89 04 24             	mov    %eax,(%esp)
c0109048:	e8 72 ef ff ff       	call   c0107fbf <find_vma>
c010904d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109054:	74 0b                	je     c0109061 <user_mem_check+0x7b>
c0109056:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109059:	8b 40 04             	mov    0x4(%eax),%eax
c010905c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010905f:	76 0a                	jbe    c010906b <user_mem_check+0x85>
                return 0;
c0109061:	b8 00 00 00 00       	mov    $0x0,%eax
c0109066:	e9 9c 00 00 00       	jmp    c0109107 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c010906b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010906e:	8b 50 0c             	mov    0xc(%eax),%edx
c0109071:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109075:	74 07                	je     c010907e <user_mem_check+0x98>
c0109077:	b8 02 00 00 00       	mov    $0x2,%eax
c010907c:	eb 05                	jmp    c0109083 <user_mem_check+0x9d>
c010907e:	b8 01 00 00 00       	mov    $0x1,%eax
c0109083:	21 d0                	and    %edx,%eax
c0109085:	85 c0                	test   %eax,%eax
c0109087:	75 07                	jne    c0109090 <user_mem_check+0xaa>
                return 0;
c0109089:	b8 00 00 00 00       	mov    $0x0,%eax
c010908e:	eb 77                	jmp    c0109107 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109090:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109094:	74 24                	je     c01090ba <user_mem_check+0xd4>
c0109096:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109099:	8b 40 0c             	mov    0xc(%eax),%eax
c010909c:	83 e0 08             	and    $0x8,%eax
c010909f:	85 c0                	test   %eax,%eax
c01090a1:	74 17                	je     c01090ba <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c01090a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090a6:	8b 40 04             	mov    0x4(%eax),%eax
c01090a9:	05 00 10 00 00       	add    $0x1000,%eax
c01090ae:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01090b1:	76 07                	jbe    c01090ba <user_mem_check+0xd4>
                    return 0;
c01090b3:	b8 00 00 00 00       	mov    $0x0,%eax
c01090b8:	eb 4d                	jmp    c0109107 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c01090ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090bd:	8b 40 08             	mov    0x8(%eax),%eax
c01090c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c01090c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090c6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01090c9:	0f 82 6c ff ff ff    	jb     c010903b <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c01090cf:	b8 01 00 00 00       	mov    $0x1,%eax
c01090d4:	eb 31                	jmp    c0109107 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c01090d6:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c01090dd:	76 23                	jbe    c0109102 <user_mem_check+0x11c>
c01090df:	8b 45 10             	mov    0x10(%ebp),%eax
c01090e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090e5:	01 d0                	add    %edx,%eax
c01090e7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01090ea:	76 16                	jbe    c0109102 <user_mem_check+0x11c>
c01090ec:	8b 45 10             	mov    0x10(%ebp),%eax
c01090ef:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090f2:	01 d0                	add    %edx,%eax
c01090f4:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01090f9:	77 07                	ja     c0109102 <user_mem_check+0x11c>
c01090fb:	b8 01 00 00 00       	mov    $0x1,%eax
c0109100:	eb 05                	jmp    c0109107 <user_mem_check+0x121>
c0109102:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109107:	c9                   	leave  
c0109108:	c3                   	ret    

c0109109 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109109:	55                   	push   %ebp
c010910a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010910c:	8b 55 08             	mov    0x8(%ebp),%edx
c010910f:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0109114:	29 c2                	sub    %eax,%edx
c0109116:	89 d0                	mov    %edx,%eax
c0109118:	c1 f8 05             	sar    $0x5,%eax
}
c010911b:	5d                   	pop    %ebp
c010911c:	c3                   	ret    

c010911d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010911d:	55                   	push   %ebp
c010911e:	89 e5                	mov    %esp,%ebp
c0109120:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0109123:	8b 45 08             	mov    0x8(%ebp),%eax
c0109126:	89 04 24             	mov    %eax,(%esp)
c0109129:	e8 db ff ff ff       	call   c0109109 <page2ppn>
c010912e:	c1 e0 0c             	shl    $0xc,%eax
}
c0109131:	c9                   	leave  
c0109132:	c3                   	ret    

c0109133 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c0109133:	55                   	push   %ebp
c0109134:	89 e5                	mov    %esp,%ebp
c0109136:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109139:	8b 45 08             	mov    0x8(%ebp),%eax
c010913c:	89 04 24             	mov    %eax,(%esp)
c010913f:	e8 d9 ff ff ff       	call   c010911d <page2pa>
c0109144:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109147:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010914a:	c1 e8 0c             	shr    $0xc,%eax
c010914d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109150:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0109155:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109158:	72 23                	jb     c010917d <page2kva+0x4a>
c010915a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010915d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109161:	c7 44 24 08 84 e6 10 	movl   $0xc010e684,0x8(%esp)
c0109168:	c0 
c0109169:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0109170:	00 
c0109171:	c7 04 24 a7 e6 10 c0 	movl   $0xc010e6a7,(%esp)
c0109178:	e8 5d 7c ff ff       	call   c0100dda <__panic>
c010917d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109180:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109185:	c9                   	leave  
c0109186:	c3                   	ret    

c0109187 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109187:	55                   	push   %ebp
c0109188:	89 e5                	mov    %esp,%ebp
c010918a:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010918d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109194:	e8 91 89 ff ff       	call   c0101b2a <ide_device_valid>
c0109199:	85 c0                	test   %eax,%eax
c010919b:	75 1c                	jne    c01091b9 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010919d:	c7 44 24 08 b5 e6 10 	movl   $0xc010e6b5,0x8(%esp)
c01091a4:	c0 
c01091a5:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c01091ac:	00 
c01091ad:	c7 04 24 cf e6 10 c0 	movl   $0xc010e6cf,(%esp)
c01091b4:	e8 21 7c ff ff       	call   c0100dda <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c01091b9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01091c0:	e8 a4 89 ff ff       	call   c0101b69 <ide_device_size>
c01091c5:	c1 e8 03             	shr    $0x3,%eax
c01091c8:	a3 3c 1f 1b c0       	mov    %eax,0xc01b1f3c
}
c01091cd:	c9                   	leave  
c01091ce:	c3                   	ret    

c01091cf <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c01091cf:	55                   	push   %ebp
c01091d0:	89 e5                	mov    %esp,%ebp
c01091d2:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01091d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091d8:	89 04 24             	mov    %eax,(%esp)
c01091db:	e8 53 ff ff ff       	call   c0109133 <page2kva>
c01091e0:	8b 55 08             	mov    0x8(%ebp),%edx
c01091e3:	c1 ea 08             	shr    $0x8,%edx
c01091e6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01091e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01091ed:	74 0b                	je     c01091fa <swapfs_read+0x2b>
c01091ef:	8b 15 3c 1f 1b c0    	mov    0xc01b1f3c,%edx
c01091f5:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c01091f8:	72 23                	jb     c010921d <swapfs_read+0x4e>
c01091fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01091fd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109201:	c7 44 24 08 e0 e6 10 	movl   $0xc010e6e0,0x8(%esp)
c0109208:	c0 
c0109209:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c0109210:	00 
c0109211:	c7 04 24 cf e6 10 c0 	movl   $0xc010e6cf,(%esp)
c0109218:	e8 bd 7b ff ff       	call   c0100dda <__panic>
c010921d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109220:	c1 e2 03             	shl    $0x3,%edx
c0109223:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010922a:	00 
c010922b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010922f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109233:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010923a:	e8 69 89 ff ff       	call   c0101ba8 <ide_read_secs>
}
c010923f:	c9                   	leave  
c0109240:	c3                   	ret    

c0109241 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c0109241:	55                   	push   %ebp
c0109242:	89 e5                	mov    %esp,%ebp
c0109244:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109247:	8b 45 0c             	mov    0xc(%ebp),%eax
c010924a:	89 04 24             	mov    %eax,(%esp)
c010924d:	e8 e1 fe ff ff       	call   c0109133 <page2kva>
c0109252:	8b 55 08             	mov    0x8(%ebp),%edx
c0109255:	c1 ea 08             	shr    $0x8,%edx
c0109258:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010925b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010925f:	74 0b                	je     c010926c <swapfs_write+0x2b>
c0109261:	8b 15 3c 1f 1b c0    	mov    0xc01b1f3c,%edx
c0109267:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010926a:	72 23                	jb     c010928f <swapfs_write+0x4e>
c010926c:	8b 45 08             	mov    0x8(%ebp),%eax
c010926f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109273:	c7 44 24 08 e0 e6 10 	movl   $0xc010e6e0,0x8(%esp)
c010927a:	c0 
c010927b:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109282:	00 
c0109283:	c7 04 24 cf e6 10 c0 	movl   $0xc010e6cf,(%esp)
c010928a:	e8 4b 7b ff ff       	call   c0100dda <__panic>
c010928f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109292:	c1 e2 03             	shl    $0x3,%edx
c0109295:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010929c:	00 
c010929d:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092a1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092a5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01092ac:	e8 39 8b ff ff       	call   c0101dea <ide_write_secs>
}
c01092b1:	c9                   	leave  
c01092b2:	c3                   	ret    

c01092b3 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c01092b3:	52                   	push   %edx
    call *%ebx              # call fn
c01092b4:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c01092b6:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c01092b7:	e8 cc 0c 00 00       	call   c0109f88 <do_exit>

c01092bc <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c01092bc:	55                   	push   %ebp
c01092bd:	89 e5                	mov    %esp,%ebp
c01092bf:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c01092c2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01092c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01092c8:	0f ab 02             	bts    %eax,(%edx)
c01092cb:	19 c0                	sbb    %eax,%eax
c01092cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c01092d0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01092d4:	0f 95 c0             	setne  %al
c01092d7:	0f b6 c0             	movzbl %al,%eax
}
c01092da:	c9                   	leave  
c01092db:	c3                   	ret    

c01092dc <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c01092dc:	55                   	push   %ebp
c01092dd:	89 e5                	mov    %esp,%ebp
c01092df:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c01092e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01092e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01092e8:	0f b3 02             	btr    %eax,(%edx)
c01092eb:	19 c0                	sbb    %eax,%eax
c01092ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c01092f0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01092f4:	0f 95 c0             	setne  %al
c01092f7:	0f b6 c0             	movzbl %al,%eax
}
c01092fa:	c9                   	leave  
c01092fb:	c3                   	ret    

c01092fc <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01092fc:	55                   	push   %ebp
c01092fd:	89 e5                	mov    %esp,%ebp
c01092ff:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109302:	9c                   	pushf  
c0109303:	58                   	pop    %eax
c0109304:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109307:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010930a:	25 00 02 00 00       	and    $0x200,%eax
c010930f:	85 c0                	test   %eax,%eax
c0109311:	74 0c                	je     c010931f <__intr_save+0x23>
        intr_disable();
c0109313:	e8 1a 8d ff ff       	call   c0102032 <intr_disable>
        return 1;
c0109318:	b8 01 00 00 00       	mov    $0x1,%eax
c010931d:	eb 05                	jmp    c0109324 <__intr_save+0x28>
    }
    return 0;
c010931f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109324:	c9                   	leave  
c0109325:	c3                   	ret    

c0109326 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109326:	55                   	push   %ebp
c0109327:	89 e5                	mov    %esp,%ebp
c0109329:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010932c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109330:	74 05                	je     c0109337 <__intr_restore+0x11>
        intr_enable();
c0109332:	e8 f5 8c ff ff       	call   c010202c <intr_enable>
    }
}
c0109337:	c9                   	leave  
c0109338:	c3                   	ret    

c0109339 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c0109339:	55                   	push   %ebp
c010933a:	89 e5                	mov    %esp,%ebp
c010933c:	83 ec 08             	sub    $0x8,%esp
    return !test_and_set_bit(0, lock);
c010933f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109342:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109346:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010934d:	e8 6a ff ff ff       	call   c01092bc <test_and_set_bit>
c0109352:	85 c0                	test   %eax,%eax
c0109354:	0f 94 c0             	sete   %al
c0109357:	0f b6 c0             	movzbl %al,%eax
}
c010935a:	c9                   	leave  
c010935b:	c3                   	ret    

c010935c <lock>:

static inline void
lock(lock_t *lock) {
c010935c:	55                   	push   %ebp
c010935d:	89 e5                	mov    %esp,%ebp
c010935f:	83 ec 18             	sub    $0x18,%esp
    while (!try_lock(lock)) {
c0109362:	eb 05                	jmp    c0109369 <lock+0xd>
        schedule();
c0109364:	e8 40 21 00 00       	call   c010b4a9 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0109369:	8b 45 08             	mov    0x8(%ebp),%eax
c010936c:	89 04 24             	mov    %eax,(%esp)
c010936f:	e8 c5 ff ff ff       	call   c0109339 <try_lock>
c0109374:	85 c0                	test   %eax,%eax
c0109376:	74 ec                	je     c0109364 <lock+0x8>
        schedule();
    }
}
c0109378:	c9                   	leave  
c0109379:	c3                   	ret    

c010937a <unlock>:

static inline void
unlock(lock_t *lock) {
c010937a:	55                   	push   %ebp
c010937b:	89 e5                	mov    %esp,%ebp
c010937d:	83 ec 18             	sub    $0x18,%esp
    if (!test_and_clear_bit(0, lock)) {
c0109380:	8b 45 08             	mov    0x8(%ebp),%eax
c0109383:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109387:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010938e:	e8 49 ff ff ff       	call   c01092dc <test_and_clear_bit>
c0109393:	85 c0                	test   %eax,%eax
c0109395:	75 1c                	jne    c01093b3 <unlock+0x39>
        panic("Unlock failed.\n");
c0109397:	c7 44 24 08 00 e7 10 	movl   $0xc010e700,0x8(%esp)
c010939e:	c0 
c010939f:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c01093a6:	00 
c01093a7:	c7 04 24 10 e7 10 c0 	movl   $0xc010e710,(%esp)
c01093ae:	e8 27 7a ff ff       	call   c0100dda <__panic>
    }
}
c01093b3:	c9                   	leave  
c01093b4:	c3                   	ret    

c01093b5 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01093b5:	55                   	push   %ebp
c01093b6:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01093b8:	8b 55 08             	mov    0x8(%ebp),%edx
c01093bb:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c01093c0:	29 c2                	sub    %eax,%edx
c01093c2:	89 d0                	mov    %edx,%eax
c01093c4:	c1 f8 05             	sar    $0x5,%eax
}
c01093c7:	5d                   	pop    %ebp
c01093c8:	c3                   	ret    

c01093c9 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01093c9:	55                   	push   %ebp
c01093ca:	89 e5                	mov    %esp,%ebp
c01093cc:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01093cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01093d2:	89 04 24             	mov    %eax,(%esp)
c01093d5:	e8 db ff ff ff       	call   c01093b5 <page2ppn>
c01093da:	c1 e0 0c             	shl    $0xc,%eax
}
c01093dd:	c9                   	leave  
c01093de:	c3                   	ret    

c01093df <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01093df:	55                   	push   %ebp
c01093e0:	89 e5                	mov    %esp,%ebp
c01093e2:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01093e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e8:	c1 e8 0c             	shr    $0xc,%eax
c01093eb:	89 c2                	mov    %eax,%edx
c01093ed:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c01093f2:	39 c2                	cmp    %eax,%edx
c01093f4:	72 1c                	jb     c0109412 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01093f6:	c7 44 24 08 24 e7 10 	movl   $0xc010e724,0x8(%esp)
c01093fd:	c0 
c01093fe:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0109405:	00 
c0109406:	c7 04 24 43 e7 10 c0 	movl   $0xc010e743,(%esp)
c010940d:	e8 c8 79 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0109412:	a1 90 1e 1b c0       	mov    0xc01b1e90,%eax
c0109417:	8b 55 08             	mov    0x8(%ebp),%edx
c010941a:	c1 ea 0c             	shr    $0xc,%edx
c010941d:	c1 e2 05             	shl    $0x5,%edx
c0109420:	01 d0                	add    %edx,%eax
}
c0109422:	c9                   	leave  
c0109423:	c3                   	ret    

c0109424 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0109424:	55                   	push   %ebp
c0109425:	89 e5                	mov    %esp,%ebp
c0109427:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010942a:	8b 45 08             	mov    0x8(%ebp),%eax
c010942d:	89 04 24             	mov    %eax,(%esp)
c0109430:	e8 94 ff ff ff       	call   c01093c9 <page2pa>
c0109435:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109438:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010943b:	c1 e8 0c             	shr    $0xc,%eax
c010943e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109441:	a1 80 fd 1a c0       	mov    0xc01afd80,%eax
c0109446:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109449:	72 23                	jb     c010946e <page2kva+0x4a>
c010944b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010944e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109452:	c7 44 24 08 54 e7 10 	movl   $0xc010e754,0x8(%esp)
c0109459:	c0 
c010945a:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0109461:	00 
c0109462:	c7 04 24 43 e7 10 c0 	movl   $0xc010e743,(%esp)
c0109469:	e8 6c 79 ff ff       	call   c0100dda <__panic>
c010946e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109471:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109476:	c9                   	leave  
c0109477:	c3                   	ret    

c0109478 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0109478:	55                   	push   %ebp
c0109479:	89 e5                	mov    %esp,%ebp
c010947b:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010947e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109481:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109484:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010948b:	77 23                	ja     c01094b0 <kva2page+0x38>
c010948d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109490:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109494:	c7 44 24 08 78 e7 10 	movl   $0xc010e778,0x8(%esp)
c010949b:	c0 
c010949c:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01094a3:	00 
c01094a4:	c7 04 24 43 e7 10 c0 	movl   $0xc010e743,(%esp)
c01094ab:	e8 2a 79 ff ff       	call   c0100dda <__panic>
c01094b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094b3:	05 00 00 00 40       	add    $0x40000000,%eax
c01094b8:	89 04 24             	mov    %eax,(%esp)
c01094bb:	e8 1f ff ff ff       	call   c01093df <pa2page>
}
c01094c0:	c9                   	leave  
c01094c1:	c3                   	ret    

c01094c2 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c01094c2:	55                   	push   %ebp
c01094c3:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c01094c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01094c8:	8b 40 18             	mov    0x18(%eax),%eax
c01094cb:	8d 50 01             	lea    0x1(%eax),%edx
c01094ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d1:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c01094d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d7:	8b 40 18             	mov    0x18(%eax),%eax
}
c01094da:	5d                   	pop    %ebp
c01094db:	c3                   	ret    

c01094dc <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c01094dc:	55                   	push   %ebp
c01094dd:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c01094df:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e2:	8b 40 18             	mov    0x18(%eax),%eax
c01094e5:	8d 50 ff             	lea    -0x1(%eax),%edx
c01094e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01094eb:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c01094ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01094f1:	8b 40 18             	mov    0x18(%eax),%eax
}
c01094f4:	5d                   	pop    %ebp
c01094f5:	c3                   	ret    

c01094f6 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c01094f6:	55                   	push   %ebp
c01094f7:	89 e5                	mov    %esp,%ebp
c01094f9:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01094fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109500:	74 0e                	je     c0109510 <lock_mm+0x1a>
        lock(&(mm->mm_lock));
c0109502:	8b 45 08             	mov    0x8(%ebp),%eax
c0109505:	83 c0 1c             	add    $0x1c,%eax
c0109508:	89 04 24             	mov    %eax,(%esp)
c010950b:	e8 4c fe ff ff       	call   c010935c <lock>
    }
}
c0109510:	c9                   	leave  
c0109511:	c3                   	ret    

c0109512 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0109512:	55                   	push   %ebp
c0109513:	89 e5                	mov    %esp,%ebp
c0109515:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109518:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010951c:	74 0e                	je     c010952c <unlock_mm+0x1a>
        unlock(&(mm->mm_lock));
c010951e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109521:	83 c0 1c             	add    $0x1c,%eax
c0109524:	89 04 24             	mov    %eax,(%esp)
c0109527:	e8 4e fe ff ff       	call   c010937a <unlock>
    }
}
c010952c:	c9                   	leave  
c010952d:	c3                   	ret    

c010952e <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010952e:	55                   	push   %ebp
c010952f:	89 e5                	mov    %esp,%ebp
c0109531:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0109534:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c010953b:	e8 ab b6 ff ff       	call   c0104beb <kmalloc>
c0109540:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0109543:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109547:	0f 84 2d 01 00 00    	je     c010967a <alloc_proc+0x14c>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    	proc->state = PROC_UNINIT;
c010954d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109550:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    	proc->pid = -1;
c0109556:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109559:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
    	proc->runs = 0;
c0109560:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109563:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    	proc->kstack = 0;
c010956a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010956d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    	proc->need_resched = 0;
c0109574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109577:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    	proc->parent = NULL;
c010957e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109581:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    	proc->mm = NULL;
c0109588:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010958b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    	memset(&(proc->context), 0, sizeof(struct context));
c0109592:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109595:	83 c0 1c             	add    $0x1c,%eax
c0109598:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010959f:	00 
c01095a0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01095a7:	00 
c01095a8:	89 04 24             	mov    %eax,(%esp)
c01095ab:	e8 91 2f 00 00       	call   c010c541 <memset>
    	proc->tf = NULL;
c01095b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095b3:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    	proc->cr3 = boot_cr3;
c01095ba:	8b 15 8c 1e 1b c0    	mov    0xc01b1e8c,%edx
c01095c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095c3:	89 50 40             	mov    %edx,0x40(%eax)
    	proc->flags = 0;
c01095c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095c9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
    	memset(proc->name, 0, PROC_NAME_LEN);
c01095d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095d3:	83 c0 48             	add    $0x48,%eax
c01095d6:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01095dd:	00 
c01095de:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01095e5:	00 
c01095e6:	89 04 24             	mov    %eax,(%esp)
c01095e9:	e8 53 2f 00 00       	call   c010c541 <memset>
    	proc->wait_state = 0;
c01095ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095f1:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
    	proc->cptr = proc->optr = proc->yptr = NULL;
c01095f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095fb:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
c0109602:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109605:	8b 50 74             	mov    0x74(%eax),%edx
c0109608:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010960b:	89 50 78             	mov    %edx,0x78(%eax)
c010960e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109611:	8b 50 78             	mov    0x78(%eax),%edx
c0109614:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109617:	89 50 70             	mov    %edx,0x70(%eax)
    	proc->rq = NULL;
c010961a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010961d:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
    	list_init(&(proc->run_link));
c0109624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109627:	83 e8 80             	sub    $0xffffff80,%eax
c010962a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010962d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109630:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109633:	89 50 04             	mov    %edx,0x4(%eax)
c0109636:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109639:	8b 50 04             	mov    0x4(%eax),%edx
c010963c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010963f:	89 10                	mov    %edx,(%eax)
    	proc->time_slice = 0;
c0109641:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109644:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c010964b:	00 00 00 
    	proc->lab6_run_pool.left = proc->lab6_run_pool.right;
c010964e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109651:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c0109657:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010965a:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    	proc->lab6_stride = 0;
c0109660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109663:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010966a:	00 00 00 
    	proc->lab6_priority = 0;
c010966d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109670:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c0109677:	00 00 00 
    }
    return proc;
c010967a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010967d:	c9                   	leave  
c010967e:	c3                   	ret    

c010967f <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010967f:	55                   	push   %ebp
c0109680:	89 e5                	mov    %esp,%ebp
c0109682:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0109685:	8b 45 08             	mov    0x8(%ebp),%eax
c0109688:	83 c0 48             	add    $0x48,%eax
c010968b:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0109692:	00 
c0109693:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010969a:	00 
c010969b:	89 04 24             	mov    %eax,(%esp)
c010969e:	e8 9e 2e 00 00       	call   c010c541 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c01096a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a6:	8d 50 48             	lea    0x48(%eax),%edx
c01096a9:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01096b0:	00 
c01096b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01096b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096b8:	89 14 24             	mov    %edx,(%esp)
c01096bb:	e8 63 2f 00 00       	call   c010c623 <memcpy>
}
c01096c0:	c9                   	leave  
c01096c1:	c3                   	ret    

c01096c2 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c01096c2:	55                   	push   %ebp
c01096c3:	89 e5                	mov    %esp,%ebp
c01096c5:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c01096c8:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01096cf:	00 
c01096d0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01096d7:	00 
c01096d8:	c7 04 24 44 1e 1b c0 	movl   $0xc01b1e44,(%esp)
c01096df:	e8 5d 2e 00 00       	call   c010c541 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c01096e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e7:	83 c0 48             	add    $0x48,%eax
c01096ea:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01096f1:	00 
c01096f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096f6:	c7 04 24 44 1e 1b c0 	movl   $0xc01b1e44,(%esp)
c01096fd:	e8 21 2f 00 00       	call   c010c623 <memcpy>
}
c0109702:	c9                   	leave  
c0109703:	c3                   	ret    

c0109704 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c0109704:	55                   	push   %ebp
c0109705:	89 e5                	mov    %esp,%ebp
c0109707:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010970a:	8b 45 08             	mov    0x8(%ebp),%eax
c010970d:	83 c0 58             	add    $0x58,%eax
c0109710:	c7 45 fc 70 1f 1b c0 	movl   $0xc01b1f70,-0x4(%ebp)
c0109717:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010971a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010971d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109720:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109723:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109729:	8b 40 04             	mov    0x4(%eax),%eax
c010972c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010972f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109732:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109735:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109738:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010973b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010973e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109741:	89 10                	mov    %edx,(%eax)
c0109743:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109746:	8b 10                	mov    (%eax),%edx
c0109748:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010974b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010974e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109751:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109754:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109757:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010975a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010975d:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010975f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109762:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0109769:	8b 45 08             	mov    0x8(%ebp),%eax
c010976c:	8b 40 14             	mov    0x14(%eax),%eax
c010976f:	8b 50 70             	mov    0x70(%eax),%edx
c0109772:	8b 45 08             	mov    0x8(%ebp),%eax
c0109775:	89 50 78             	mov    %edx,0x78(%eax)
c0109778:	8b 45 08             	mov    0x8(%ebp),%eax
c010977b:	8b 40 78             	mov    0x78(%eax),%eax
c010977e:	85 c0                	test   %eax,%eax
c0109780:	74 0c                	je     c010978e <set_links+0x8a>
        proc->optr->yptr = proc;
c0109782:	8b 45 08             	mov    0x8(%ebp),%eax
c0109785:	8b 40 78             	mov    0x78(%eax),%eax
c0109788:	8b 55 08             	mov    0x8(%ebp),%edx
c010978b:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c010978e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109791:	8b 40 14             	mov    0x14(%eax),%eax
c0109794:	8b 55 08             	mov    0x8(%ebp),%edx
c0109797:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010979a:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c010979f:	83 c0 01             	add    $0x1,%eax
c01097a2:	a3 40 1e 1b c0       	mov    %eax,0xc01b1e40
}
c01097a7:	c9                   	leave  
c01097a8:	c3                   	ret    

c01097a9 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c01097a9:	55                   	push   %ebp
c01097aa:	89 e5                	mov    %esp,%ebp
c01097ac:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c01097af:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b2:	83 c0 58             	add    $0x58,%eax
c01097b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01097b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097bb:	8b 40 04             	mov    0x4(%eax),%eax
c01097be:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01097c1:	8b 12                	mov    (%edx),%edx
c01097c3:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01097c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01097c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01097cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01097cf:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01097d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097d5:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01097d8:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c01097da:	8b 45 08             	mov    0x8(%ebp),%eax
c01097dd:	8b 40 78             	mov    0x78(%eax),%eax
c01097e0:	85 c0                	test   %eax,%eax
c01097e2:	74 0f                	je     c01097f3 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c01097e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01097e7:	8b 40 78             	mov    0x78(%eax),%eax
c01097ea:	8b 55 08             	mov    0x8(%ebp),%edx
c01097ed:	8b 52 74             	mov    0x74(%edx),%edx
c01097f0:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c01097f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01097f6:	8b 40 74             	mov    0x74(%eax),%eax
c01097f9:	85 c0                	test   %eax,%eax
c01097fb:	74 11                	je     c010980e <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c01097fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109800:	8b 40 74             	mov    0x74(%eax),%eax
c0109803:	8b 55 08             	mov    0x8(%ebp),%edx
c0109806:	8b 52 78             	mov    0x78(%edx),%edx
c0109809:	89 50 78             	mov    %edx,0x78(%eax)
c010980c:	eb 0f                	jmp    c010981d <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010980e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109811:	8b 40 14             	mov    0x14(%eax),%eax
c0109814:	8b 55 08             	mov    0x8(%ebp),%edx
c0109817:	8b 52 78             	mov    0x78(%edx),%edx
c010981a:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010981d:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c0109822:	83 e8 01             	sub    $0x1,%eax
c0109825:	a3 40 1e 1b c0       	mov    %eax,0xc01b1e40
}
c010982a:	c9                   	leave  
c010982b:	c3                   	ret    

c010982c <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010982c:	55                   	push   %ebp
c010982d:	89 e5                	mov    %esp,%ebp
c010982f:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109832:	c7 45 f8 70 1f 1b c0 	movl   $0xc01b1f70,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c0109839:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010983e:	83 c0 01             	add    $0x1,%eax
c0109841:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c0109846:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010984b:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109850:	7e 0c                	jle    c010985e <get_pid+0x32>
        last_pid = 1;
c0109852:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c0109859:	00 00 00 
        goto inside;
c010985c:	eb 13                	jmp    c0109871 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010985e:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c0109864:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c0109869:	39 c2                	cmp    %eax,%edx
c010986b:	0f 8c ac 00 00 00    	jl     c010991d <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c0109871:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c0109878:	20 00 00 
    repeat:
        le = list;
c010987b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010987e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c0109881:	eb 7f                	jmp    c0109902 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c0109883:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109886:	83 e8 58             	sub    $0x58,%eax
c0109889:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010988c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010988f:	8b 50 04             	mov    0x4(%eax),%edx
c0109892:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c0109897:	39 c2                	cmp    %eax,%edx
c0109899:	75 3e                	jne    c01098d9 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010989b:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01098a0:	83 c0 01             	add    $0x1,%eax
c01098a3:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c01098a8:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c01098ae:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c01098b3:	39 c2                	cmp    %eax,%edx
c01098b5:	7c 4b                	jl     c0109902 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c01098b7:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01098bc:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01098c1:	7e 0a                	jle    c01098cd <get_pid+0xa1>
                        last_pid = 1;
c01098c3:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c01098ca:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01098cd:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c01098d4:	20 00 00 
                    goto repeat;
c01098d7:	eb a2                	jmp    c010987b <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c01098d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098dc:	8b 50 04             	mov    0x4(%eax),%edx
c01098df:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01098e4:	39 c2                	cmp    %eax,%edx
c01098e6:	7e 1a                	jle    c0109902 <get_pid+0xd6>
c01098e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098eb:	8b 50 04             	mov    0x4(%eax),%edx
c01098ee:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c01098f3:	39 c2                	cmp    %eax,%edx
c01098f5:	7d 0b                	jge    c0109902 <get_pid+0xd6>
                next_safe = proc->pid;
c01098f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098fa:	8b 40 04             	mov    0x4(%eax),%eax
c01098fd:	a3 84 da 12 c0       	mov    %eax,0xc012da84
c0109902:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109905:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109908:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010990b:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010990e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109911:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109914:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109917:	0f 85 66 ff ff ff    	jne    c0109883 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010991d:	a1 80 da 12 c0       	mov    0xc012da80,%eax
}
c0109922:	c9                   	leave  
c0109923:	c3                   	ret    

c0109924 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109924:	55                   	push   %ebp
c0109925:	89 e5                	mov    %esp,%ebp
c0109927:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010992a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010992f:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109932:	74 63                	je     c0109997 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109934:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109939:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010993c:	8b 45 08             	mov    0x8(%ebp),%eax
c010993f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109942:	e8 b5 f9 ff ff       	call   c01092fc <__intr_save>
c0109947:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010994a:	8b 45 08             	mov    0x8(%ebp),%eax
c010994d:	a3 28 fe 1a c0       	mov    %eax,0xc01afe28
            load_esp0(next->kstack + KSTACKSIZE);
c0109952:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109955:	8b 40 0c             	mov    0xc(%eax),%eax
c0109958:	05 00 20 00 00       	add    $0x2000,%eax
c010995d:	89 04 24             	mov    %eax,(%esp)
c0109960:	e8 ad b5 ff ff       	call   c0104f12 <load_esp0>
            lcr3(next->cr3);
c0109965:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109968:	8b 40 40             	mov    0x40(%eax),%eax
c010996b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010996e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109971:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c0109974:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109977:	8d 50 1c             	lea    0x1c(%eax),%edx
c010997a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010997d:	83 c0 1c             	add    $0x1c,%eax
c0109980:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109984:	89 04 24             	mov    %eax,(%esp)
c0109987:	e8 93 15 00 00       	call   c010af1f <switch_to>
        }
        local_intr_restore(intr_flag);
c010998c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010998f:	89 04 24             	mov    %eax,(%esp)
c0109992:	e8 8f f9 ff ff       	call   c0109326 <__intr_restore>
    }
}
c0109997:	c9                   	leave  
c0109998:	c3                   	ret    

c0109999 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c0109999:	55                   	push   %ebp
c010999a:	89 e5                	mov    %esp,%ebp
c010999c:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010999f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c01099a4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01099a7:	89 04 24             	mov    %eax,(%esp)
c01099aa:	e8 c3 90 ff ff       	call   c0102a72 <forkrets>
}
c01099af:	c9                   	leave  
c01099b0:	c3                   	ret    

c01099b1 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c01099b1:	55                   	push   %ebp
c01099b2:	89 e5                	mov    %esp,%ebp
c01099b4:	53                   	push   %ebx
c01099b5:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c01099b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099bb:	8d 58 60             	lea    0x60(%eax),%ebx
c01099be:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c1:	8b 40 04             	mov    0x4(%eax),%eax
c01099c4:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c01099cb:	00 
c01099cc:	89 04 24             	mov    %eax,(%esp)
c01099cf:	e8 c0 20 00 00       	call   c010ba94 <hash32>
c01099d4:	c1 e0 03             	shl    $0x3,%eax
c01099d7:	05 40 fe 1a c0       	add    $0xc01afe40,%eax
c01099dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099df:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c01099e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01099e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01099ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099f1:	8b 40 04             	mov    0x4(%eax),%eax
c01099f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01099f7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01099fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01099fd:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0109a00:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109a03:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109a06:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109a09:	89 10                	mov    %edx,(%eax)
c0109a0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109a0e:	8b 10                	mov    (%eax),%edx
c0109a10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109a13:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109a16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a19:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109a1c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109a1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109a22:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109a25:	89 10                	mov    %edx,(%eax)
}
c0109a27:	83 c4 34             	add    $0x34,%esp
c0109a2a:	5b                   	pop    %ebx
c0109a2b:	5d                   	pop    %ebp
c0109a2c:	c3                   	ret    

c0109a2d <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c0109a2d:	55                   	push   %ebp
c0109a2e:	89 e5                	mov    %esp,%ebp
c0109a30:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0109a33:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a36:	83 c0 60             	add    $0x60,%eax
c0109a39:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109a3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a3f:	8b 40 04             	mov    0x4(%eax),%eax
c0109a42:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109a45:	8b 12                	mov    (%edx),%edx
c0109a47:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109a4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109a4d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109a50:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109a53:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a59:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109a5c:	89 10                	mov    %edx,(%eax)
}
c0109a5e:	c9                   	leave  
c0109a5f:	c3                   	ret    

c0109a60 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c0109a60:	55                   	push   %ebp
c0109a61:	89 e5                	mov    %esp,%ebp
c0109a63:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c0109a66:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109a6a:	7e 5f                	jle    c0109acb <find_proc+0x6b>
c0109a6c:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c0109a73:	7f 56                	jg     c0109acb <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c0109a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a78:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0109a7f:	00 
c0109a80:	89 04 24             	mov    %eax,(%esp)
c0109a83:	e8 0c 20 00 00       	call   c010ba94 <hash32>
c0109a88:	c1 e0 03             	shl    $0x3,%eax
c0109a8b:	05 40 fe 1a c0       	add    $0xc01afe40,%eax
c0109a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a96:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0109a99:	eb 19                	jmp    c0109ab4 <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c0109a9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a9e:	83 e8 60             	sub    $0x60,%eax
c0109aa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c0109aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109aa7:	8b 40 04             	mov    0x4(%eax),%eax
c0109aaa:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109aad:	75 05                	jne    c0109ab4 <find_proc+0x54>
                return proc;
c0109aaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ab2:	eb 1c                	jmp    c0109ad0 <find_proc+0x70>
c0109ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ab7:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109aba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109abd:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c0109ac0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ac6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109ac9:	75 d0                	jne    c0109a9b <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c0109acb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ad0:	c9                   	leave  
c0109ad1:	c3                   	ret    

c0109ad2 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c0109ad2:	55                   	push   %ebp
c0109ad3:	89 e5                	mov    %esp,%ebp
c0109ad5:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c0109ad8:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c0109adf:	00 
c0109ae0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109ae7:	00 
c0109ae8:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109aeb:	89 04 24             	mov    %eax,(%esp)
c0109aee:	e8 4e 2a 00 00       	call   c010c541 <memset>
    tf.tf_cs = KERNEL_CS;
c0109af3:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c0109af9:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0109aff:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0109b03:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c0109b07:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c0109b0b:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0109b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b12:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c0109b15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b18:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c0109b1b:	b8 b3 92 10 c0       	mov    $0xc01092b3,%eax
c0109b20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109b23:	8b 45 10             	mov    0x10(%ebp),%eax
c0109b26:	80 cc 01             	or     $0x1,%ah
c0109b29:	89 c2                	mov    %eax,%edx
c0109b2b:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109b2e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b32:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109b39:	00 
c0109b3a:	89 14 24             	mov    %edx,(%esp)
c0109b3d:	e8 25 03 00 00       	call   c0109e67 <do_fork>
}
c0109b42:	c9                   	leave  
c0109b43:	c3                   	ret    

c0109b44 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109b44:	55                   	push   %ebp
c0109b45:	89 e5                	mov    %esp,%ebp
c0109b47:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c0109b4a:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0109b51:	e8 0a b5 ff ff       	call   c0105060 <alloc_pages>
c0109b56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0109b59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109b5d:	74 1a                	je     c0109b79 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c0109b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b62:	89 04 24             	mov    %eax,(%esp)
c0109b65:	e8 ba f8 ff ff       	call   c0109424 <page2kva>
c0109b6a:	89 c2                	mov    %eax,%edx
c0109b6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b6f:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0109b72:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b77:	eb 05                	jmp    c0109b7e <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c0109b79:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0109b7e:	c9                   	leave  
c0109b7f:	c3                   	ret    

c0109b80 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0109b80:	55                   	push   %ebp
c0109b81:	89 e5                	mov    %esp,%ebp
c0109b83:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c0109b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b89:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b8c:	89 04 24             	mov    %eax,(%esp)
c0109b8f:	e8 e4 f8 ff ff       	call   c0109478 <kva2page>
c0109b94:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0109b9b:	00 
c0109b9c:	89 04 24             	mov    %eax,(%esp)
c0109b9f:	e8 27 b5 ff ff       	call   c01050cb <free_pages>
}
c0109ba4:	c9                   	leave  
c0109ba5:	c3                   	ret    

c0109ba6 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c0109ba6:	55                   	push   %ebp
c0109ba7:	89 e5                	mov    %esp,%ebp
c0109ba9:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c0109bac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109bb3:	e8 a8 b4 ff ff       	call   c0105060 <alloc_pages>
c0109bb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109bbf:	75 0a                	jne    c0109bcb <setup_pgdir+0x25>
        return -E_NO_MEM;
c0109bc1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109bc6:	e9 80 00 00 00       	jmp    c0109c4b <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c0109bcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bce:	89 04 24             	mov    %eax,(%esp)
c0109bd1:	e8 4e f8 ff ff       	call   c0109424 <page2kva>
c0109bd6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c0109bd9:	a1 84 fd 1a c0       	mov    0xc01afd84,%eax
c0109bde:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0109be5:	00 
c0109be6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bed:	89 04 24             	mov    %eax,(%esp)
c0109bf0:	e8 2e 2a 00 00       	call   c010c623 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c0109bf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bf8:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0109bfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c01:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109c04:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c0109c0b:	77 23                	ja     c0109c30 <setup_pgdir+0x8a>
c0109c0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c10:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109c14:	c7 44 24 08 78 e7 10 	movl   $0xc010e778,0x8(%esp)
c0109c1b:	c0 
c0109c1c:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0109c23:	00 
c0109c24:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c0109c2b:	e8 aa 71 ff ff       	call   c0100dda <__panic>
c0109c30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c33:	05 00 00 00 40       	add    $0x40000000,%eax
c0109c38:	83 c8 03             	or     $0x3,%eax
c0109c3b:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109c3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c40:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109c43:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0109c46:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c4b:	c9                   	leave  
c0109c4c:	c3                   	ret    

c0109c4d <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109c4d:	55                   	push   %ebp
c0109c4e:	89 e5                	mov    %esp,%ebp
c0109c50:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c0109c53:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c56:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c59:	89 04 24             	mov    %eax,(%esp)
c0109c5c:	e8 17 f8 ff ff       	call   c0109478 <kva2page>
c0109c61:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109c68:	00 
c0109c69:	89 04 24             	mov    %eax,(%esp)
c0109c6c:	e8 5a b4 ff ff       	call   c01050cb <free_pages>
}
c0109c71:	c9                   	leave  
c0109c72:	c3                   	ret    

c0109c73 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c0109c73:	55                   	push   %ebp
c0109c74:	89 e5                	mov    %esp,%ebp
c0109c76:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c0109c79:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109c7e:	8b 40 18             	mov    0x18(%eax),%eax
c0109c81:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c0109c84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109c88:	75 0a                	jne    c0109c94 <copy_mm+0x21>
        return 0;
c0109c8a:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c8f:	e9 f9 00 00 00       	jmp    c0109d8d <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c0109c94:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c97:	25 00 01 00 00       	and    $0x100,%eax
c0109c9c:	85 c0                	test   %eax,%eax
c0109c9e:	74 08                	je     c0109ca8 <copy_mm+0x35>
        mm = oldmm;
c0109ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c0109ca6:	eb 78                	jmp    c0109d20 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c0109ca8:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c0109caf:	e8 37 e2 ff ff       	call   c0107eeb <mm_create>
c0109cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109cb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109cbb:	75 05                	jne    c0109cc2 <copy_mm+0x4f>
        goto bad_mm;
c0109cbd:	e9 c8 00 00 00       	jmp    c0109d8a <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c0109cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cc5:	89 04 24             	mov    %eax,(%esp)
c0109cc8:	e8 d9 fe ff ff       	call   c0109ba6 <setup_pgdir>
c0109ccd:	85 c0                	test   %eax,%eax
c0109ccf:	74 05                	je     c0109cd6 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c0109cd1:	e9 a9 00 00 00       	jmp    c0109d7f <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c0109cd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109cd9:	89 04 24             	mov    %eax,(%esp)
c0109cdc:	e8 15 f8 ff ff       	call   c01094f6 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c0109ce1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ce4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ceb:	89 04 24             	mov    %eax,(%esp)
c0109cee:	e8 0f e7 ff ff       	call   c0108402 <dup_mmap>
c0109cf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109cf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109cf9:	89 04 24             	mov    %eax,(%esp)
c0109cfc:	e8 11 f8 ff ff       	call   c0109512 <unlock_mm>

    if (ret != 0) {
c0109d01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109d05:	74 19                	je     c0109d20 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c0109d07:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0109d08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d0b:	89 04 24             	mov    %eax,(%esp)
c0109d0e:	e8 f0 e7 ff ff       	call   c0108503 <exit_mmap>
    put_pgdir(mm);
c0109d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d16:	89 04 24             	mov    %eax,(%esp)
c0109d19:	e8 2f ff ff ff       	call   c0109c4d <put_pgdir>
c0109d1e:	eb 5f                	jmp    c0109d7f <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d23:	89 04 24             	mov    %eax,(%esp)
c0109d26:	e8 97 f7 ff ff       	call   c01094c2 <mm_count_inc>
    proc->mm = mm;
c0109d2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109d31:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0109d34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d37:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109d3d:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0109d44:	77 23                	ja     c0109d69 <copy_mm+0xf6>
c0109d46:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d49:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109d4d:	c7 44 24 08 78 e7 10 	movl   $0xc010e778,0x8(%esp)
c0109d54:	c0 
c0109d55:	c7 44 24 04 6d 01 00 	movl   $0x16d,0x4(%esp)
c0109d5c:	00 
c0109d5d:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c0109d64:	e8 71 70 ff ff       	call   c0100dda <__panic>
c0109d69:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d6c:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109d72:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d75:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109d78:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d7d:	eb 0e                	jmp    c0109d8d <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d82:	89 04 24             	mov    %eax,(%esp)
c0109d85:	e8 ba e4 ff ff       	call   c0108244 <mm_destroy>
bad_mm:
    return ret;
c0109d8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109d8d:	c9                   	leave  
c0109d8e:	c3                   	ret    

c0109d8f <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c0109d8f:	55                   	push   %ebp
c0109d90:	89 e5                	mov    %esp,%ebp
c0109d92:	57                   	push   %edi
c0109d93:	56                   	push   %esi
c0109d94:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c0109d95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d98:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d9b:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c0109da0:	89 c2                	mov    %eax,%edx
c0109da2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109da5:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c0109da8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dab:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109dae:	8b 55 10             	mov    0x10(%ebp),%edx
c0109db1:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c0109db6:	89 c1                	mov    %eax,%ecx
c0109db8:	83 e1 01             	and    $0x1,%ecx
c0109dbb:	85 c9                	test   %ecx,%ecx
c0109dbd:	74 0e                	je     c0109dcd <copy_thread+0x3e>
c0109dbf:	0f b6 0a             	movzbl (%edx),%ecx
c0109dc2:	88 08                	mov    %cl,(%eax)
c0109dc4:	83 c0 01             	add    $0x1,%eax
c0109dc7:	83 c2 01             	add    $0x1,%edx
c0109dca:	83 eb 01             	sub    $0x1,%ebx
c0109dcd:	89 c1                	mov    %eax,%ecx
c0109dcf:	83 e1 02             	and    $0x2,%ecx
c0109dd2:	85 c9                	test   %ecx,%ecx
c0109dd4:	74 0f                	je     c0109de5 <copy_thread+0x56>
c0109dd6:	0f b7 0a             	movzwl (%edx),%ecx
c0109dd9:	66 89 08             	mov    %cx,(%eax)
c0109ddc:	83 c0 02             	add    $0x2,%eax
c0109ddf:	83 c2 02             	add    $0x2,%edx
c0109de2:	83 eb 02             	sub    $0x2,%ebx
c0109de5:	89 d9                	mov    %ebx,%ecx
c0109de7:	c1 e9 02             	shr    $0x2,%ecx
c0109dea:	89 c7                	mov    %eax,%edi
c0109dec:	89 d6                	mov    %edx,%esi
c0109dee:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0109df0:	89 f2                	mov    %esi,%edx
c0109df2:	89 f8                	mov    %edi,%eax
c0109df4:	b9 00 00 00 00       	mov    $0x0,%ecx
c0109df9:	89 de                	mov    %ebx,%esi
c0109dfb:	83 e6 02             	and    $0x2,%esi
c0109dfe:	85 f6                	test   %esi,%esi
c0109e00:	74 0b                	je     c0109e0d <copy_thread+0x7e>
c0109e02:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0109e06:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0109e0a:	83 c1 02             	add    $0x2,%ecx
c0109e0d:	83 e3 01             	and    $0x1,%ebx
c0109e10:	85 db                	test   %ebx,%ebx
c0109e12:	74 07                	je     c0109e1b <copy_thread+0x8c>
c0109e14:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0109e18:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c0109e1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e1e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e21:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109e28:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e2b:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e2e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109e31:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0109e34:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e37:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e3a:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e3d:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109e40:	8b 52 40             	mov    0x40(%edx),%edx
c0109e43:	80 ce 02             	or     $0x2,%dh
c0109e46:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109e49:	ba 99 99 10 c0       	mov    $0xc0109999,%edx
c0109e4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e51:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0109e54:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e57:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e5a:	89 c2                	mov    %eax,%edx
c0109e5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e5f:	89 50 20             	mov    %edx,0x20(%eax)
}
c0109e62:	5b                   	pop    %ebx
c0109e63:	5e                   	pop    %esi
c0109e64:	5f                   	pop    %edi
c0109e65:	5d                   	pop    %ebp
c0109e66:	c3                   	ret    

c0109e67 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109e67:	55                   	push   %ebp
c0109e68:	89 e5                	mov    %esp,%ebp
c0109e6a:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c0109e6d:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c0109e74:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c0109e79:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109e7e:	7e 05                	jle    c0109e85 <do_fork+0x1e>
        goto fork_out;
c0109e80:	e9 ef 00 00 00       	jmp    c0109f74 <do_fork+0x10d>
    }
    ret = -E_NO_MEM;
c0109e85:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c0109e8c:	e8 9d f6 ff ff       	call   c010952e <alloc_proc>
c0109e91:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e94:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109e98:	75 05                	jne    c0109e9f <do_fork+0x38>
            goto fork_out;
c0109e9a:	e9 d5 00 00 00       	jmp    c0109f74 <do_fork+0x10d>
        }

        proc->parent = current;
c0109e9f:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c0109ea5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ea8:	89 50 14             	mov    %edx,0x14(%eax)
        assert(current->wait_state == 0);
c0109eab:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109eb0:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109eb3:	85 c0                	test   %eax,%eax
c0109eb5:	74 24                	je     c0109edb <do_fork+0x74>
c0109eb7:	c7 44 24 0c b0 e7 10 	movl   $0xc010e7b0,0xc(%esp)
c0109ebe:	c0 
c0109ebf:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c0109ec6:	c0 
c0109ec7:	c7 44 24 04 b9 01 00 	movl   $0x1b9,0x4(%esp)
c0109ece:	00 
c0109ecf:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c0109ed6:	e8 ff 6e ff ff       	call   c0100dda <__panic>

        if (setup_kstack(proc) != 0) {
c0109edb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ede:	89 04 24             	mov    %eax,(%esp)
c0109ee1:	e8 5e fc ff ff       	call   c0109b44 <setup_kstack>
c0109ee6:	85 c0                	test   %eax,%eax
c0109ee8:	74 05                	je     c0109eef <do_fork+0x88>
            goto bad_fork_cleanup_proc;
c0109eea:	e9 8a 00 00 00       	jmp    c0109f79 <do_fork+0x112>
        }
        if (copy_mm(clone_flags, proc) != 0) {
c0109eef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ef2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ef6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef9:	89 04 24             	mov    %eax,(%esp)
c0109efc:	e8 72 fd ff ff       	call   c0109c73 <copy_mm>
c0109f01:	85 c0                	test   %eax,%eax
c0109f03:	74 0e                	je     c0109f13 <do_fork+0xac>
            goto bad_fork_cleanup_kstack;
c0109f05:	90                   	nop
        ret = proc->pid;
    fork_out:
        return ret;

    bad_fork_cleanup_kstack:
        put_kstack(proc);
c0109f06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f09:	89 04 24             	mov    %eax,(%esp)
c0109f0c:	e8 6f fc ff ff       	call   c0109b80 <put_kstack>
c0109f11:	eb 66                	jmp    c0109f79 <do_fork+0x112>
            goto bad_fork_cleanup_proc;
        }
        if (copy_mm(clone_flags, proc) != 0) {
            goto bad_fork_cleanup_kstack;
        }
        copy_thread(proc, stack, tf);
c0109f13:	8b 45 10             	mov    0x10(%ebp),%eax
c0109f16:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f24:	89 04 24             	mov    %eax,(%esp)
c0109f27:	e8 63 fe ff ff       	call   c0109d8f <copy_thread>

        bool intr_flag;
        local_intr_save(intr_flag);
c0109f2c:	e8 cb f3 ff ff       	call   c01092fc <__intr_save>
c0109f31:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            proc->pid = get_pid();
c0109f34:	e8 f3 f8 ff ff       	call   c010982c <get_pid>
c0109f39:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109f3c:	89 42 04             	mov    %eax,0x4(%edx)
            hash_proc(proc);
c0109f3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f42:	89 04 24             	mov    %eax,(%esp)
c0109f45:	e8 67 fa ff ff       	call   c01099b1 <hash_proc>
            set_links(proc);
c0109f4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f4d:	89 04 24             	mov    %eax,(%esp)
c0109f50:	e8 af f7 ff ff       	call   c0109704 <set_links>

        }
        local_intr_restore(intr_flag);
c0109f55:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f58:	89 04 24             	mov    %eax,(%esp)
c0109f5b:	e8 c6 f3 ff ff       	call   c0109326 <__intr_restore>

        wakeup_proc(proc);
c0109f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f63:	89 04 24             	mov    %eax,(%esp)
c0109f66:	e8 a5 14 00 00       	call   c010b410 <wakeup_proc>

        ret = proc->pid;
c0109f6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f6e:	8b 40 04             	mov    0x4(%eax),%eax
c0109f71:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fork_out:
        return ret;
c0109f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f77:	eb 0d                	jmp    c0109f86 <do_fork+0x11f>

    bad_fork_cleanup_kstack:
        put_kstack(proc);
    bad_fork_cleanup_proc:
        kfree(proc);
c0109f79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f7c:	89 04 24             	mov    %eax,(%esp)
c0109f7f:	e8 82 ac ff ff       	call   c0104c06 <kfree>
        goto fork_out;
c0109f84:	eb ee                	jmp    c0109f74 <do_fork+0x10d>
}
c0109f86:	c9                   	leave  
c0109f87:	c3                   	ret    

c0109f88 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c0109f88:	55                   	push   %ebp
c0109f89:	89 e5                	mov    %esp,%ebp
c0109f8b:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c0109f8e:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c0109f94:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c0109f99:	39 c2                	cmp    %eax,%edx
c0109f9b:	75 1c                	jne    c0109fb9 <do_exit+0x31>
        panic("idleproc exit.\n");
c0109f9d:	c7 44 24 08 de e7 10 	movl   $0xc010e7de,0x8(%esp)
c0109fa4:	c0 
c0109fa5:	c7 44 24 04 e1 01 00 	movl   $0x1e1,0x4(%esp)
c0109fac:	00 
c0109fad:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c0109fb4:	e8 21 6e ff ff       	call   c0100dda <__panic>
    }
    if (current == initproc) {
c0109fb9:	8b 15 28 fe 1a c0    	mov    0xc01afe28,%edx
c0109fbf:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c0109fc4:	39 c2                	cmp    %eax,%edx
c0109fc6:	75 1c                	jne    c0109fe4 <do_exit+0x5c>
        panic("initproc exit.\n");
c0109fc8:	c7 44 24 08 ee e7 10 	movl   $0xc010e7ee,0x8(%esp)
c0109fcf:	c0 
c0109fd0:	c7 44 24 04 e4 01 00 	movl   $0x1e4,0x4(%esp)
c0109fd7:	00 
c0109fd8:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c0109fdf:	e8 f6 6d ff ff       	call   c0100dda <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c0109fe4:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c0109fe9:	8b 40 18             	mov    0x18(%eax),%eax
c0109fec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c0109fef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ff3:	74 4a                	je     c010a03f <do_exit+0xb7>
        lcr3(boot_cr3);
c0109ff5:	a1 8c 1e 1b c0       	mov    0xc01b1e8c,%eax
c0109ffa:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109ffd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a000:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a003:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a006:	89 04 24             	mov    %eax,(%esp)
c010a009:	e8 ce f4 ff ff       	call   c01094dc <mm_count_dec>
c010a00e:	85 c0                	test   %eax,%eax
c010a010:	75 21                	jne    c010a033 <do_exit+0xab>
            exit_mmap(mm);
c010a012:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a015:	89 04 24             	mov    %eax,(%esp)
c010a018:	e8 e6 e4 ff ff       	call   c0108503 <exit_mmap>
            put_pgdir(mm);
c010a01d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a020:	89 04 24             	mov    %eax,(%esp)
c010a023:	e8 25 fc ff ff       	call   c0109c4d <put_pgdir>
            mm_destroy(mm);
c010a028:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a02b:	89 04 24             	mov    %eax,(%esp)
c010a02e:	e8 11 e2 ff ff       	call   c0108244 <mm_destroy>
        }
        current->mm = NULL;
c010a033:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a038:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010a03f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a044:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010a04a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a04f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a052:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010a055:	e8 a2 f2 ff ff       	call   c01092fc <__intr_save>
c010a05a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010a05d:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a062:	8b 40 14             	mov    0x14(%eax),%eax
c010a065:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010a068:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a06b:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a06e:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a073:	75 10                	jne    c010a085 <do_exit+0xfd>
            wakeup_proc(proc);
c010a075:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a078:	89 04 24             	mov    %eax,(%esp)
c010a07b:	e8 90 13 00 00       	call   c010b410 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010a080:	e9 8b 00 00 00       	jmp    c010a110 <do_exit+0x188>
c010a085:	e9 86 00 00 00       	jmp    c010a110 <do_exit+0x188>
            proc = current->cptr;
c010a08a:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a08f:	8b 40 70             	mov    0x70(%eax),%eax
c010a092:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010a095:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a09a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a09d:	8b 52 78             	mov    0x78(%edx),%edx
c010a0a0:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010a0a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0a6:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c010a0ad:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a0b2:	8b 50 70             	mov    0x70(%eax),%edx
c010a0b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0b8:	89 50 78             	mov    %edx,0x78(%eax)
c010a0bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0be:	8b 40 78             	mov    0x78(%eax),%eax
c010a0c1:	85 c0                	test   %eax,%eax
c010a0c3:	74 0e                	je     c010a0d3 <do_exit+0x14b>
                initproc->cptr->yptr = proc;
c010a0c5:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a0ca:	8b 40 70             	mov    0x70(%eax),%eax
c010a0cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a0d0:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010a0d3:	8b 15 24 fe 1a c0    	mov    0xc01afe24,%edx
c010a0d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0dc:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010a0df:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a0e4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a0e7:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010a0ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0ed:	8b 00                	mov    (%eax),%eax
c010a0ef:	83 f8 03             	cmp    $0x3,%eax
c010a0f2:	75 1c                	jne    c010a110 <do_exit+0x188>
                if (initproc->wait_state == WT_CHILD) {
c010a0f4:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a0f9:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a0fc:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a101:	75 0d                	jne    c010a110 <do_exit+0x188>
                    wakeup_proc(initproc);
c010a103:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010a108:	89 04 24             	mov    %eax,(%esp)
c010a10b:	e8 00 13 00 00       	call   c010b410 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010a110:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a115:	8b 40 70             	mov    0x70(%eax),%eax
c010a118:	85 c0                	test   %eax,%eax
c010a11a:	0f 85 6a ff ff ff    	jne    c010a08a <do_exit+0x102>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010a120:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a123:	89 04 24             	mov    %eax,(%esp)
c010a126:	e8 fb f1 ff ff       	call   c0109326 <__intr_restore>
    
    schedule();
c010a12b:	e8 79 13 00 00       	call   c010b4a9 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010a130:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a135:	8b 40 04             	mov    0x4(%eax),%eax
c010a138:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a13c:	c7 44 24 08 00 e8 10 	movl   $0xc010e800,0x8(%esp)
c010a143:	c0 
c010a144:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c010a14b:	00 
c010a14c:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a153:	e8 82 6c ff ff       	call   c0100dda <__panic>

c010a158 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010a158:	55                   	push   %ebp
c010a159:	89 e5                	mov    %esp,%ebp
c010a15b:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010a15e:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a163:	8b 40 18             	mov    0x18(%eax),%eax
c010a166:	85 c0                	test   %eax,%eax
c010a168:	74 1c                	je     c010a186 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010a16a:	c7 44 24 08 20 e8 10 	movl   $0xc010e820,0x8(%esp)
c010a171:	c0 
c010a172:	c7 44 24 04 1a 02 00 	movl   $0x21a,0x4(%esp)
c010a179:	00 
c010a17a:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a181:	e8 54 6c ff ff       	call   c0100dda <__panic>
    }

    int ret = -E_NO_MEM;
c010a186:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010a18d:	e8 59 dd ff ff       	call   c0107eeb <mm_create>
c010a192:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a195:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010a199:	75 06                	jne    c010a1a1 <load_icode+0x49>
        goto bad_mm;
c010a19b:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010a19c:	e9 ef 05 00 00       	jmp    c010a790 <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010a1a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a1a4:	89 04 24             	mov    %eax,(%esp)
c010a1a7:	e8 fa f9 ff ff       	call   c0109ba6 <setup_pgdir>
c010a1ac:	85 c0                	test   %eax,%eax
c010a1ae:	74 05                	je     c010a1b5 <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010a1b0:	e9 f6 05 00 00       	jmp    c010a7ab <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010a1b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010a1bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a1be:	8b 50 1c             	mov    0x1c(%eax),%edx
c010a1c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c4:	01 d0                	add    %edx,%eax
c010a1c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010a1c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a1cc:	8b 00                	mov    (%eax),%eax
c010a1ce:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010a1d3:	74 0c                	je     c010a1e1 <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010a1d5:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010a1dc:	e9 bf 05 00 00       	jmp    c010a7a0 <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010a1e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a1e4:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010a1e8:	0f b7 c0             	movzwl %ax,%eax
c010a1eb:	c1 e0 05             	shl    $0x5,%eax
c010a1ee:	89 c2                	mov    %eax,%edx
c010a1f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1f3:	01 d0                	add    %edx,%eax
c010a1f5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010a1f8:	e9 13 03 00 00       	jmp    c010a510 <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010a1fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a200:	8b 00                	mov    (%eax),%eax
c010a202:	83 f8 01             	cmp    $0x1,%eax
c010a205:	74 05                	je     c010a20c <load_icode+0xb4>
            continue ;
c010a207:	e9 00 03 00 00       	jmp    c010a50c <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010a20c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a20f:	8b 50 10             	mov    0x10(%eax),%edx
c010a212:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a215:	8b 40 14             	mov    0x14(%eax),%eax
c010a218:	39 c2                	cmp    %eax,%edx
c010a21a:	76 0c                	jbe    c010a228 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010a21c:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a223:	e9 6d 05 00 00       	jmp    c010a795 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010a228:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a22b:	8b 40 10             	mov    0x10(%eax),%eax
c010a22e:	85 c0                	test   %eax,%eax
c010a230:	75 05                	jne    c010a237 <load_icode+0xdf>
            continue ;
c010a232:	e9 d5 02 00 00       	jmp    c010a50c <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a237:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a23e:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a245:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a248:	8b 40 18             	mov    0x18(%eax),%eax
c010a24b:	83 e0 01             	and    $0x1,%eax
c010a24e:	85 c0                	test   %eax,%eax
c010a250:	74 04                	je     c010a256 <load_icode+0xfe>
c010a252:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a256:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a259:	8b 40 18             	mov    0x18(%eax),%eax
c010a25c:	83 e0 02             	and    $0x2,%eax
c010a25f:	85 c0                	test   %eax,%eax
c010a261:	74 04                	je     c010a267 <load_icode+0x10f>
c010a263:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a267:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a26a:	8b 40 18             	mov    0x18(%eax),%eax
c010a26d:	83 e0 04             	and    $0x4,%eax
c010a270:	85 c0                	test   %eax,%eax
c010a272:	74 04                	je     c010a278 <load_icode+0x120>
c010a274:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010a278:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a27b:	83 e0 02             	and    $0x2,%eax
c010a27e:	85 c0                	test   %eax,%eax
c010a280:	74 04                	je     c010a286 <load_icode+0x12e>
c010a282:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010a286:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a289:	8b 50 14             	mov    0x14(%eax),%edx
c010a28c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a28f:	8b 40 08             	mov    0x8(%eax),%eax
c010a292:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a299:	00 
c010a29a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a29d:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010a2a1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a2a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a2ac:	89 04 24             	mov    %eax,(%esp)
c010a2af:	e8 32 e0 ff ff       	call   c01082e6 <mm_map>
c010a2b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2bb:	74 05                	je     c010a2c2 <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010a2bd:	e9 d3 04 00 00       	jmp    c010a795 <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010a2c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2c5:	8b 50 04             	mov    0x4(%eax),%edx
c010a2c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2cb:	01 d0                	add    %edx,%eax
c010a2cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010a2d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2d3:	8b 40 08             	mov    0x8(%eax),%eax
c010a2d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a2d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a2dc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010a2df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010a2e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a2e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010a2ea:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010a2f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2f4:	8b 50 08             	mov    0x8(%eax),%edx
c010a2f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2fa:	8b 40 10             	mov    0x10(%eax),%eax
c010a2fd:	01 d0                	add    %edx,%eax
c010a2ff:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a302:	e9 90 00 00 00       	jmp    c010a397 <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a307:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a30a:	8b 40 0c             	mov    0xc(%eax),%eax
c010a30d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a310:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a314:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a317:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a31b:	89 04 24             	mov    %eax,(%esp)
c010a31e:	e8 0e bc ff ff       	call   c0105f31 <pgdir_alloc_page>
c010a323:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a326:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a32a:	75 05                	jne    c010a331 <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010a32c:	e9 64 04 00 00       	jmp    c010a795 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a331:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a334:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a337:	29 c2                	sub    %eax,%edx
c010a339:	89 d0                	mov    %edx,%eax
c010a33b:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a33e:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a343:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a346:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a349:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a350:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a353:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a356:	73 0d                	jae    c010a365 <load_icode+0x20d>
                size -= la - end;
c010a358:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a35b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a35e:	29 c2                	sub    %eax,%edx
c010a360:	89 d0                	mov    %edx,%eax
c010a362:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010a365:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a368:	89 04 24             	mov    %eax,(%esp)
c010a36b:	e8 b4 f0 ff ff       	call   c0109424 <page2kva>
c010a370:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a373:	01 c2                	add    %eax,%edx
c010a375:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a378:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a37c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a37f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a383:	89 14 24             	mov    %edx,(%esp)
c010a386:	e8 98 22 00 00       	call   c010c623 <memcpy>
            start += size, from += size;
c010a38b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a38e:	01 45 d8             	add    %eax,-0x28(%ebp)
c010a391:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a394:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a397:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a39a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a39d:	0f 82 64 ff ff ff    	jb     c010a307 <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010a3a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3a6:	8b 50 08             	mov    0x8(%eax),%edx
c010a3a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3ac:	8b 40 14             	mov    0x14(%eax),%eax
c010a3af:	01 d0                	add    %edx,%eax
c010a3b1:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010a3b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a3b7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a3ba:	0f 83 b0 00 00 00    	jae    c010a470 <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010a3c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a3c3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a3c6:	75 05                	jne    c010a3cd <load_icode+0x275>
                continue ;
c010a3c8:	e9 3f 01 00 00       	jmp    c010a50c <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010a3cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a3d0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a3d3:	29 c2                	sub    %eax,%edx
c010a3d5:	89 d0                	mov    %edx,%eax
c010a3d7:	05 00 10 00 00       	add    $0x1000,%eax
c010a3dc:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a3df:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a3e4:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a3e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010a3ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a3ed:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a3f0:	73 0d                	jae    c010a3ff <load_icode+0x2a7>
                size -= la - end;
c010a3f2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a3f5:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a3f8:	29 c2                	sub    %eax,%edx
c010a3fa:	89 d0                	mov    %edx,%eax
c010a3fc:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a3ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a402:	89 04 24             	mov    %eax,(%esp)
c010a405:	e8 1a f0 ff ff       	call   c0109424 <page2kva>
c010a40a:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a40d:	01 c2                	add    %eax,%edx
c010a40f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a412:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a416:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a41d:	00 
c010a41e:	89 14 24             	mov    %edx,(%esp)
c010a421:	e8 1b 21 00 00       	call   c010c541 <memset>
            start += size;
c010a426:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a429:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010a42c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a42f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a432:	73 08                	jae    c010a43c <load_icode+0x2e4>
c010a434:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a437:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a43a:	74 34                	je     c010a470 <load_icode+0x318>
c010a43c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a43f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a442:	72 08                	jb     c010a44c <load_icode+0x2f4>
c010a444:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a447:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a44a:	74 24                	je     c010a470 <load_icode+0x318>
c010a44c:	c7 44 24 0c 48 e8 10 	movl   $0xc010e848,0xc(%esp)
c010a453:	c0 
c010a454:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010a45b:	c0 
c010a45c:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c010a463:	00 
c010a464:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a46b:	e8 6a 69 ff ff       	call   c0100dda <__panic>
        }
        while (start < end) {
c010a470:	e9 8b 00 00 00       	jmp    c010a500 <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a475:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a478:	8b 40 0c             	mov    0xc(%eax),%eax
c010a47b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a47e:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a482:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a485:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a489:	89 04 24             	mov    %eax,(%esp)
c010a48c:	e8 a0 ba ff ff       	call   c0105f31 <pgdir_alloc_page>
c010a491:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a494:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a498:	75 05                	jne    c010a49f <load_icode+0x347>
                goto bad_cleanup_mmap;
c010a49a:	e9 f6 02 00 00       	jmp    c010a795 <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a49f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a4a2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a4a5:	29 c2                	sub    %eax,%edx
c010a4a7:	89 d0                	mov    %edx,%eax
c010a4a9:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a4ac:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a4b1:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a4b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a4b7:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a4be:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a4c1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a4c4:	73 0d                	jae    c010a4d3 <load_icode+0x37b>
                size -= la - end;
c010a4c6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a4c9:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a4cc:	29 c2                	sub    %eax,%edx
c010a4ce:	89 d0                	mov    %edx,%eax
c010a4d0:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a4d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4d6:	89 04 24             	mov    %eax,(%esp)
c010a4d9:	e8 46 ef ff ff       	call   c0109424 <page2kva>
c010a4de:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010a4e1:	01 c2                	add    %eax,%edx
c010a4e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a4e6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a4ea:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a4f1:	00 
c010a4f2:	89 14 24             	mov    %edx,(%esp)
c010a4f5:	e8 47 20 00 00       	call   c010c541 <memset>
            start += size;
c010a4fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a4fd:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010a500:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a503:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a506:	0f 82 69 ff ff ff    	jb     c010a475 <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010a50c:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010a510:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a513:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010a516:	0f 82 e1 fc ff ff    	jb     c010a1fd <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010a51c:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010a523:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a52a:	00 
c010a52b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a52e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a532:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010a539:	00 
c010a53a:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010a541:	af 
c010a542:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a545:	89 04 24             	mov    %eax,(%esp)
c010a548:	e8 99 dd ff ff       	call   c01082e6 <mm_map>
c010a54d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a554:	74 05                	je     c010a55b <load_icode+0x403>
        goto bad_cleanup_mmap;
c010a556:	e9 3a 02 00 00       	jmp    c010a795 <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010a55b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a55e:	8b 40 0c             	mov    0xc(%eax),%eax
c010a561:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a568:	00 
c010a569:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010a570:	af 
c010a571:	89 04 24             	mov    %eax,(%esp)
c010a574:	e8 b8 b9 ff ff       	call   c0105f31 <pgdir_alloc_page>
c010a579:	85 c0                	test   %eax,%eax
c010a57b:	75 24                	jne    c010a5a1 <load_icode+0x449>
c010a57d:	c7 44 24 0c 84 e8 10 	movl   $0xc010e884,0xc(%esp)
c010a584:	c0 
c010a585:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010a58c:	c0 
c010a58d:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c010a594:	00 
c010a595:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a59c:	e8 39 68 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010a5a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a5a4:	8b 40 0c             	mov    0xc(%eax),%eax
c010a5a7:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a5ae:	00 
c010a5af:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010a5b6:	af 
c010a5b7:	89 04 24             	mov    %eax,(%esp)
c010a5ba:	e8 72 b9 ff ff       	call   c0105f31 <pgdir_alloc_page>
c010a5bf:	85 c0                	test   %eax,%eax
c010a5c1:	75 24                	jne    c010a5e7 <load_icode+0x48f>
c010a5c3:	c7 44 24 0c c8 e8 10 	movl   $0xc010e8c8,0xc(%esp)
c010a5ca:	c0 
c010a5cb:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010a5d2:	c0 
c010a5d3:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010a5da:	00 
c010a5db:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a5e2:	e8 f3 67 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010a5e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a5ea:	8b 40 0c             	mov    0xc(%eax),%eax
c010a5ed:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a5f4:	00 
c010a5f5:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010a5fc:	af 
c010a5fd:	89 04 24             	mov    %eax,(%esp)
c010a600:	e8 2c b9 ff ff       	call   c0105f31 <pgdir_alloc_page>
c010a605:	85 c0                	test   %eax,%eax
c010a607:	75 24                	jne    c010a62d <load_icode+0x4d5>
c010a609:	c7 44 24 0c 0c e9 10 	movl   $0xc010e90c,0xc(%esp)
c010a610:	c0 
c010a611:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010a618:	c0 
c010a619:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010a620:	00 
c010a621:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a628:	e8 ad 67 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010a62d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a630:	8b 40 0c             	mov    0xc(%eax),%eax
c010a633:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a63a:	00 
c010a63b:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010a642:	af 
c010a643:	89 04 24             	mov    %eax,(%esp)
c010a646:	e8 e6 b8 ff ff       	call   c0105f31 <pgdir_alloc_page>
c010a64b:	85 c0                	test   %eax,%eax
c010a64d:	75 24                	jne    c010a673 <load_icode+0x51b>
c010a64f:	c7 44 24 0c 50 e9 10 	movl   $0xc010e950,0xc(%esp)
c010a656:	c0 
c010a657:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010a65e:	c0 
c010a65f:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010a666:	00 
c010a667:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a66e:	e8 67 67 ff ff       	call   c0100dda <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010a673:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a676:	89 04 24             	mov    %eax,(%esp)
c010a679:	e8 44 ee ff ff       	call   c01094c2 <mm_count_inc>
    current->mm = mm;
c010a67e:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a683:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a686:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010a689:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a68e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a691:	8b 52 0c             	mov    0xc(%edx),%edx
c010a694:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010a697:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010a69e:	77 23                	ja     c010a6c3 <load_icode+0x56b>
c010a6a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010a6a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a6a7:	c7 44 24 08 78 e7 10 	movl   $0xc010e778,0x8(%esp)
c010a6ae:	c0 
c010a6af:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c010a6b6:	00 
c010a6b7:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a6be:	e8 17 67 ff ff       	call   c0100dda <__panic>
c010a6c3:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010a6c6:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010a6cc:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010a6cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a6d2:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6d5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010a6d8:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010a6df:	77 23                	ja     c010a704 <load_icode+0x5ac>
c010a6e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a6e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a6e8:	c7 44 24 08 78 e7 10 	movl   $0xc010e778,0x8(%esp)
c010a6ef:	c0 
c010a6f0:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010a6f7:	00 
c010a6f8:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a6ff:	e8 d6 66 ff ff       	call   c0100dda <__panic>
c010a704:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a707:	05 00 00 00 40       	add    $0x40000000,%eax
c010a70c:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010a70f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010a712:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010a715:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a71a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a71d:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010a720:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010a727:	00 
c010a728:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a72f:	00 
c010a730:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a733:	89 04 24             	mov    %eax,(%esp)
c010a736:	e8 06 1e 00 00       	call   c010c541 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010a73b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a73e:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
        tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010a744:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a747:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010a74d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a750:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010a754:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a757:	66 89 50 28          	mov    %dx,0x28(%eax)
c010a75b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a75e:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010a762:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a765:	66 89 50 2c          	mov    %dx,0x2c(%eax)
        tf->tf_esp = USTACKTOP;
c010a769:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a76c:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
        tf->tf_eip = elf->e_entry;
c010a773:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a776:	8b 50 18             	mov    0x18(%eax),%edx
c010a779:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a77c:	89 50 38             	mov    %edx,0x38(%eax)
        tf->tf_eflags = FL_IF;
c010a77f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a782:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010a789:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010a790:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a793:	eb 23                	jmp    c010a7b8 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010a795:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a798:	89 04 24             	mov    %eax,(%esp)
c010a79b:	e8 63 dd ff ff       	call   c0108503 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010a7a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a7a3:	89 04 24             	mov    %eax,(%esp)
c010a7a6:	e8 a2 f4 ff ff       	call   c0109c4d <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a7ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a7ae:	89 04 24             	mov    %eax,(%esp)
c010a7b1:	e8 8e da ff ff       	call   c0108244 <mm_destroy>
bad_mm:
    goto out;
c010a7b6:	eb d8                	jmp    c010a790 <load_icode+0x638>
}
c010a7b8:	c9                   	leave  
c010a7b9:	c3                   	ret    

c010a7ba <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010a7ba:	55                   	push   %ebp
c010a7bb:	89 e5                	mov    %esp,%ebp
c010a7bd:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010a7c0:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a7c5:	8b 40 18             	mov    0x18(%eax),%eax
c010a7c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010a7cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ce:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a7d5:	00 
c010a7d6:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a7d9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a7dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a7e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7e4:	89 04 24             	mov    %eax,(%esp)
c010a7e7:	e8 fa e7 ff ff       	call   c0108fe6 <user_mem_check>
c010a7ec:	85 c0                	test   %eax,%eax
c010a7ee:	75 0a                	jne    c010a7fa <do_execve+0x40>
        return -E_INVAL;
c010a7f0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a7f5:	e9 f4 00 00 00       	jmp    c010a8ee <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010a7fa:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010a7fe:	76 07                	jbe    c010a807 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010a800:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010a807:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010a80e:	00 
c010a80f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a816:	00 
c010a817:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a81a:	89 04 24             	mov    %eax,(%esp)
c010a81d:	e8 1f 1d 00 00       	call   c010c541 <memset>
    memcpy(local_name, name, len);
c010a822:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a825:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a829:	8b 45 08             	mov    0x8(%ebp),%eax
c010a82c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a830:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a833:	89 04 24             	mov    %eax,(%esp)
c010a836:	e8 e8 1d 00 00       	call   c010c623 <memcpy>

    if (mm != NULL) {
c010a83b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a83f:	74 4a                	je     c010a88b <do_execve+0xd1>
        lcr3(boot_cr3);
c010a841:	a1 8c 1e 1b c0       	mov    0xc01b1e8c,%eax
c010a846:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a849:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a84c:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a84f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a852:	89 04 24             	mov    %eax,(%esp)
c010a855:	e8 82 ec ff ff       	call   c01094dc <mm_count_dec>
c010a85a:	85 c0                	test   %eax,%eax
c010a85c:	75 21                	jne    c010a87f <do_execve+0xc5>
            exit_mmap(mm);
c010a85e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a861:	89 04 24             	mov    %eax,(%esp)
c010a864:	e8 9a dc ff ff       	call   c0108503 <exit_mmap>
            put_pgdir(mm);
c010a869:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a86c:	89 04 24             	mov    %eax,(%esp)
c010a86f:	e8 d9 f3 ff ff       	call   c0109c4d <put_pgdir>
            mm_destroy(mm);
c010a874:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a877:	89 04 24             	mov    %eax,(%esp)
c010a87a:	e8 c5 d9 ff ff       	call   c0108244 <mm_destroy>
        }
        current->mm = NULL;
c010a87f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a884:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010a88b:	8b 45 14             	mov    0x14(%ebp),%eax
c010a88e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a892:	8b 45 10             	mov    0x10(%ebp),%eax
c010a895:	89 04 24             	mov    %eax,(%esp)
c010a898:	e8 bb f8 ff ff       	call   c010a158 <load_icode>
c010a89d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a8a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a8a4:	74 2f                	je     c010a8d5 <do_execve+0x11b>
        goto execve_exit;
c010a8a6:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a8a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8aa:	89 04 24             	mov    %eax,(%esp)
c010a8ad:	e8 d6 f6 ff ff       	call   c0109f88 <do_exit>
    panic("already exit: %e.\n", ret);
c010a8b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a8b9:	c7 44 24 08 93 e9 10 	movl   $0xc010e993,0x8(%esp)
c010a8c0:	c0 
c010a8c1:	c7 44 24 04 ca 02 00 	movl   $0x2ca,0x4(%esp)
c010a8c8:	00 
c010a8c9:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010a8d0:	e8 05 65 ff ff       	call   c0100dda <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a8d5:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a8da:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a8dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a8e1:	89 04 24             	mov    %eax,(%esp)
c010a8e4:	e8 96 ed ff ff       	call   c010967f <set_proc_name>
    return 0;
c010a8e9:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010a8ee:	c9                   	leave  
c010a8ef:	c3                   	ret    

c010a8f0 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a8f0:	55                   	push   %ebp
c010a8f1:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a8f3:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a8f8:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a8ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a904:	5d                   	pop    %ebp
c010a905:	c3                   	ret    

c010a906 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a906:	55                   	push   %ebp
c010a907:	89 e5                	mov    %esp,%ebp
c010a909:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a90c:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a911:	8b 40 18             	mov    0x18(%eax),%eax
c010a914:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a917:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a91b:	74 30                	je     c010a94d <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a91d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a920:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a927:	00 
c010a928:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010a92f:	00 
c010a930:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a934:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a937:	89 04 24             	mov    %eax,(%esp)
c010a93a:	e8 a7 e6 ff ff       	call   c0108fe6 <user_mem_check>
c010a93f:	85 c0                	test   %eax,%eax
c010a941:	75 0a                	jne    c010a94d <do_wait+0x47>
            return -E_INVAL;
c010a943:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a948:	e9 4b 01 00 00       	jmp    c010aa98 <do_wait+0x192>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010a94d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010a954:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a958:	74 39                	je     c010a993 <do_wait+0x8d>
        proc = find_proc(pid);
c010a95a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a95d:	89 04 24             	mov    %eax,(%esp)
c010a960:	e8 fb f0 ff ff       	call   c0109a60 <find_proc>
c010a965:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010a968:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a96c:	74 54                	je     c010a9c2 <do_wait+0xbc>
c010a96e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a971:	8b 50 14             	mov    0x14(%eax),%edx
c010a974:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a979:	39 c2                	cmp    %eax,%edx
c010a97b:	75 45                	jne    c010a9c2 <do_wait+0xbc>
            haskid = 1;
c010a97d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a984:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a987:	8b 00                	mov    (%eax),%eax
c010a989:	83 f8 03             	cmp    $0x3,%eax
c010a98c:	75 34                	jne    c010a9c2 <do_wait+0xbc>
                goto found;
c010a98e:	e9 80 00 00 00       	jmp    c010aa13 <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
c010a993:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a998:	8b 40 70             	mov    0x70(%eax),%eax
c010a99b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010a99e:	eb 1c                	jmp    c010a9bc <do_wait+0xb6>
            haskid = 1;
c010a9a0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a9a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9aa:	8b 00                	mov    (%eax),%eax
c010a9ac:	83 f8 03             	cmp    $0x3,%eax
c010a9af:	75 02                	jne    c010a9b3 <do_wait+0xad>
                goto found;
c010a9b1:	eb 60                	jmp    c010aa13 <do_wait+0x10d>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010a9b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9b6:	8b 40 78             	mov    0x78(%eax),%eax
c010a9b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9c0:	75 de                	jne    c010a9a0 <do_wait+0x9a>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010a9c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a9c6:	74 41                	je     c010aa09 <do_wait+0x103>
        current->state = PROC_SLEEPING;
c010a9c8:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a9cd:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010a9d3:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a9d8:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010a9df:	e8 c5 0a 00 00       	call   c010b4a9 <schedule>
        if (current->flags & PF_EXITING) {
c010a9e4:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010a9e9:	8b 40 44             	mov    0x44(%eax),%eax
c010a9ec:	83 e0 01             	and    $0x1,%eax
c010a9ef:	85 c0                	test   %eax,%eax
c010a9f1:	74 11                	je     c010aa04 <do_wait+0xfe>
            do_exit(-E_KILLED);
c010a9f3:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010a9fa:	e8 89 f5 ff ff       	call   c0109f88 <do_exit>
        }
        goto repeat;
c010a9ff:	e9 49 ff ff ff       	jmp    c010a94d <do_wait+0x47>
c010aa04:	e9 44 ff ff ff       	jmp    c010a94d <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010aa09:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010aa0e:	e9 85 00 00 00       	jmp    c010aa98 <do_wait+0x192>

found:
    if (proc == idleproc || proc == initproc) {
c010aa13:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010aa18:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010aa1b:	74 0a                	je     c010aa27 <do_wait+0x121>
c010aa1d:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010aa22:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010aa25:	75 1c                	jne    c010aa43 <do_wait+0x13d>
        panic("wait idleproc or initproc.\n");
c010aa27:	c7 44 24 08 a6 e9 10 	movl   $0xc010e9a6,0x8(%esp)
c010aa2e:	c0 
c010aa2f:	c7 44 24 04 03 03 00 	movl   $0x303,0x4(%esp)
c010aa36:	00 
c010aa37:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010aa3e:	e8 97 63 ff ff       	call   c0100dda <__panic>
    }
    if (code_store != NULL) {
c010aa43:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010aa47:	74 0b                	je     c010aa54 <do_wait+0x14e>
        *code_store = proc->exit_code;
c010aa49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa4c:	8b 50 68             	mov    0x68(%eax),%edx
c010aa4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa52:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010aa54:	e8 a3 e8 ff ff       	call   c01092fc <__intr_save>
c010aa59:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010aa5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa5f:	89 04 24             	mov    %eax,(%esp)
c010aa62:	e8 c6 ef ff ff       	call   c0109a2d <unhash_proc>
        remove_links(proc);
c010aa67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa6a:	89 04 24             	mov    %eax,(%esp)
c010aa6d:	e8 37 ed ff ff       	call   c01097a9 <remove_links>
    }
    local_intr_restore(intr_flag);
c010aa72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa75:	89 04 24             	mov    %eax,(%esp)
c010aa78:	e8 a9 e8 ff ff       	call   c0109326 <__intr_restore>
    put_kstack(proc);
c010aa7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa80:	89 04 24             	mov    %eax,(%esp)
c010aa83:	e8 f8 f0 ff ff       	call   c0109b80 <put_kstack>
    kfree(proc);
c010aa88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa8b:	89 04 24             	mov    %eax,(%esp)
c010aa8e:	e8 73 a1 ff ff       	call   c0104c06 <kfree>
    return 0;
c010aa93:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aa98:	c9                   	leave  
c010aa99:	c3                   	ret    

c010aa9a <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010aa9a:	55                   	push   %ebp
c010aa9b:	89 e5                	mov    %esp,%ebp
c010aa9d:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010aaa0:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaa3:	89 04 24             	mov    %eax,(%esp)
c010aaa6:	e8 b5 ef ff ff       	call   c0109a60 <find_proc>
c010aaab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aaae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aab2:	74 41                	je     c010aaf5 <do_kill+0x5b>
        if (!(proc->flags & PF_EXITING)) {
c010aab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aab7:	8b 40 44             	mov    0x44(%eax),%eax
c010aaba:	83 e0 01             	and    $0x1,%eax
c010aabd:	85 c0                	test   %eax,%eax
c010aabf:	75 2d                	jne    c010aaee <do_kill+0x54>
            proc->flags |= PF_EXITING;
c010aac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aac4:	8b 40 44             	mov    0x44(%eax),%eax
c010aac7:	83 c8 01             	or     $0x1,%eax
c010aaca:	89 c2                	mov    %eax,%edx
c010aacc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aacf:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010aad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aad5:	8b 40 6c             	mov    0x6c(%eax),%eax
c010aad8:	85 c0                	test   %eax,%eax
c010aada:	79 0b                	jns    c010aae7 <do_kill+0x4d>
                wakeup_proc(proc);
c010aadc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aadf:	89 04 24             	mov    %eax,(%esp)
c010aae2:	e8 29 09 00 00       	call   c010b410 <wakeup_proc>
            }
            return 0;
c010aae7:	b8 00 00 00 00       	mov    $0x0,%eax
c010aaec:	eb 0c                	jmp    c010aafa <do_kill+0x60>
        }
        return -E_KILLED;
c010aaee:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010aaf3:	eb 05                	jmp    c010aafa <do_kill+0x60>
    }
    return -E_INVAL;
c010aaf5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010aafa:	c9                   	leave  
c010aafb:	c3                   	ret    

c010aafc <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010aafc:	55                   	push   %ebp
c010aafd:	89 e5                	mov    %esp,%ebp
c010aaff:	57                   	push   %edi
c010ab00:	56                   	push   %esi
c010ab01:	53                   	push   %ebx
c010ab02:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010ab05:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab08:	89 04 24             	mov    %eax,(%esp)
c010ab0b:	e8 02 17 00 00       	call   c010c212 <strlen>
c010ab10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010ab13:	b8 04 00 00 00       	mov    $0x4,%eax
c010ab18:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab1b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010ab1e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010ab21:	8b 75 10             	mov    0x10(%ebp),%esi
c010ab24:	89 f7                	mov    %esi,%edi
c010ab26:	cd 80                	int    $0x80
c010ab28:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010ab2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010ab2e:	83 c4 2c             	add    $0x2c,%esp
c010ab31:	5b                   	pop    %ebx
c010ab32:	5e                   	pop    %esi
c010ab33:	5f                   	pop    %edi
c010ab34:	5d                   	pop    %ebp
c010ab35:	c3                   	ret    

c010ab36 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010ab36:	55                   	push   %ebp
c010ab37:	89 e5                	mov    %esp,%ebp
c010ab39:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010ab3c:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010ab41:	8b 40 04             	mov    0x4(%eax),%eax
c010ab44:	c7 44 24 08 c2 e9 10 	movl   $0xc010e9c2,0x8(%esp)
c010ab4b:	c0 
c010ab4c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab50:	c7 04 24 cc e9 10 c0 	movl   $0xc010e9cc,(%esp)
c010ab57:	e8 fc 57 ff ff       	call   c0100358 <cprintf>
c010ab5c:	b8 c7 79 00 00       	mov    $0x79c7,%eax
c010ab61:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ab65:	c7 44 24 04 11 15 18 	movl   $0xc0181511,0x4(%esp)
c010ab6c:	c0 
c010ab6d:	c7 04 24 c2 e9 10 c0 	movl   $0xc010e9c2,(%esp)
c010ab74:	e8 83 ff ff ff       	call   c010aafc <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010ab79:	c7 44 24 08 f3 e9 10 	movl   $0xc010e9f3,0x8(%esp)
c010ab80:	c0 
c010ab81:	c7 44 24 04 4c 03 00 	movl   $0x34c,0x4(%esp)
c010ab88:	00 
c010ab89:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010ab90:	e8 45 62 ff ff       	call   c0100dda <__panic>

c010ab95 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010ab95:	55                   	push   %ebp
c010ab96:	89 e5                	mov    %esp,%ebp
c010ab98:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010ab9b:	e8 5d a5 ff ff       	call   c01050fd <nr_free_pages>
c010aba0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010aba3:	e8 26 9f ff ff       	call   c0104ace <kallocated>
c010aba8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010abab:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010abb2:	00 
c010abb3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010abba:	00 
c010abbb:	c7 04 24 36 ab 10 c0 	movl   $0xc010ab36,(%esp)
c010abc2:	e8 0b ef ff ff       	call   c0109ad2 <kernel_thread>
c010abc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010abca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010abce:	7f 1c                	jg     c010abec <init_main+0x57>
        panic("create user_main failed.\n");
c010abd0:	c7 44 24 08 0d ea 10 	movl   $0xc010ea0d,0x8(%esp)
c010abd7:	c0 
c010abd8:	c7 44 24 04 57 03 00 	movl   $0x357,0x4(%esp)
c010abdf:	00 
c010abe0:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010abe7:	e8 ee 61 ff ff       	call   c0100dda <__panic>
    }

    while (do_wait(0, NULL) == 0) {
c010abec:	eb 05                	jmp    c010abf3 <init_main+0x5e>
        schedule();
c010abee:	e8 b6 08 00 00       	call   c010b4a9 <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010abf3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010abfa:	00 
c010abfb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ac02:	e8 ff fc ff ff       	call   c010a906 <do_wait>
c010ac07:	85 c0                	test   %eax,%eax
c010ac09:	74 e3                	je     c010abee <init_main+0x59>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010ac0b:	c7 04 24 28 ea 10 c0 	movl   $0xc010ea28,(%esp)
c010ac12:	e8 41 57 ff ff       	call   c0100358 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010ac17:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ac1c:	8b 40 70             	mov    0x70(%eax),%eax
c010ac1f:	85 c0                	test   %eax,%eax
c010ac21:	75 18                	jne    c010ac3b <init_main+0xa6>
c010ac23:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ac28:	8b 40 74             	mov    0x74(%eax),%eax
c010ac2b:	85 c0                	test   %eax,%eax
c010ac2d:	75 0c                	jne    c010ac3b <init_main+0xa6>
c010ac2f:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ac34:	8b 40 78             	mov    0x78(%eax),%eax
c010ac37:	85 c0                	test   %eax,%eax
c010ac39:	74 24                	je     c010ac5f <init_main+0xca>
c010ac3b:	c7 44 24 0c 4c ea 10 	movl   $0xc010ea4c,0xc(%esp)
c010ac42:	c0 
c010ac43:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010ac4a:	c0 
c010ac4b:	c7 44 24 04 5f 03 00 	movl   $0x35f,0x4(%esp)
c010ac52:	00 
c010ac53:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010ac5a:	e8 7b 61 ff ff       	call   c0100dda <__panic>
    assert(nr_process == 2);
c010ac5f:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c010ac64:	83 f8 02             	cmp    $0x2,%eax
c010ac67:	74 24                	je     c010ac8d <init_main+0xf8>
c010ac69:	c7 44 24 0c 97 ea 10 	movl   $0xc010ea97,0xc(%esp)
c010ac70:	c0 
c010ac71:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010ac78:	c0 
c010ac79:	c7 44 24 04 60 03 00 	movl   $0x360,0x4(%esp)
c010ac80:	00 
c010ac81:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010ac88:	e8 4d 61 ff ff       	call   c0100dda <__panic>
c010ac8d:	c7 45 e8 70 1f 1b c0 	movl   $0xc01b1f70,-0x18(%ebp)
c010ac94:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac97:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010ac9a:	8b 15 24 fe 1a c0    	mov    0xc01afe24,%edx
c010aca0:	83 c2 58             	add    $0x58,%edx
c010aca3:	39 d0                	cmp    %edx,%eax
c010aca5:	74 24                	je     c010accb <init_main+0x136>
c010aca7:	c7 44 24 0c a8 ea 10 	movl   $0xc010eaa8,0xc(%esp)
c010acae:	c0 
c010acaf:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010acb6:	c0 
c010acb7:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010acbe:	00 
c010acbf:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010acc6:	e8 0f 61 ff ff       	call   c0100dda <__panic>
c010accb:	c7 45 e4 70 1f 1b c0 	movl   $0xc01b1f70,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010acd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010acd5:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010acd7:	8b 15 24 fe 1a c0    	mov    0xc01afe24,%edx
c010acdd:	83 c2 58             	add    $0x58,%edx
c010ace0:	39 d0                	cmp    %edx,%eax
c010ace2:	74 24                	je     c010ad08 <init_main+0x173>
c010ace4:	c7 44 24 0c d8 ea 10 	movl   $0xc010ead8,0xc(%esp)
c010aceb:	c0 
c010acec:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010acf3:	c0 
c010acf4:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
c010acfb:	00 
c010acfc:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010ad03:	e8 d2 60 ff ff       	call   c0100dda <__panic>

    cprintf("init check memory pass.\n");
c010ad08:	c7 04 24 08 eb 10 c0 	movl   $0xc010eb08,(%esp)
c010ad0f:	e8 44 56 ff ff       	call   c0100358 <cprintf>
    return 0;
c010ad14:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ad19:	c9                   	leave  
c010ad1a:	c3                   	ret    

c010ad1b <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010ad1b:	55                   	push   %ebp
c010ad1c:	89 e5                	mov    %esp,%ebp
c010ad1e:	83 ec 28             	sub    $0x28,%esp
c010ad21:	c7 45 ec 70 1f 1b c0 	movl   $0xc01b1f70,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ad28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad2b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ad2e:	89 50 04             	mov    %edx,0x4(%eax)
c010ad31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad34:	8b 50 04             	mov    0x4(%eax),%edx
c010ad37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad3a:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ad3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ad43:	eb 26                	jmp    c010ad6b <proc_init+0x50>
        list_init(hash_list + i);
c010ad45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad48:	c1 e0 03             	shl    $0x3,%eax
c010ad4b:	05 40 fe 1a c0       	add    $0xc01afe40,%eax
c010ad50:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ad53:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad56:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ad59:	89 50 04             	mov    %edx,0x4(%eax)
c010ad5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad5f:	8b 50 04             	mov    0x4(%eax),%edx
c010ad62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad65:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ad67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ad6b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010ad72:	7e d1                	jle    c010ad45 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010ad74:	e8 b5 e7 ff ff       	call   c010952e <alloc_proc>
c010ad79:	a3 20 fe 1a c0       	mov    %eax,0xc01afe20
c010ad7e:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ad83:	85 c0                	test   %eax,%eax
c010ad85:	75 1c                	jne    c010ada3 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010ad87:	c7 44 24 08 21 eb 10 	movl   $0xc010eb21,0x8(%esp)
c010ad8e:	c0 
c010ad8f:	c7 44 24 04 74 03 00 	movl   $0x374,0x4(%esp)
c010ad96:	00 
c010ad97:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010ad9e:	e8 37 60 ff ff       	call   c0100dda <__panic>
    }

    idleproc->pid = 0;
c010ada3:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ada8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010adaf:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010adb4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010adba:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010adbf:	ba 00 b0 12 c0       	mov    $0xc012b000,%edx
c010adc4:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010adc7:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010adcc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010add3:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010add8:	c7 44 24 04 39 eb 10 	movl   $0xc010eb39,0x4(%esp)
c010addf:	c0 
c010ade0:	89 04 24             	mov    %eax,(%esp)
c010ade3:	e8 97 e8 ff ff       	call   c010967f <set_proc_name>
    nr_process ++;
c010ade8:	a1 40 1e 1b c0       	mov    0xc01b1e40,%eax
c010aded:	83 c0 01             	add    $0x1,%eax
c010adf0:	a3 40 1e 1b c0       	mov    %eax,0xc01b1e40

    current = idleproc;
c010adf5:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010adfa:	a3 28 fe 1a c0       	mov    %eax,0xc01afe28

    int pid = kernel_thread(init_main, NULL, 0);
c010adff:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ae06:	00 
c010ae07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ae0e:	00 
c010ae0f:	c7 04 24 95 ab 10 c0 	movl   $0xc010ab95,(%esp)
c010ae16:	e8 b7 ec ff ff       	call   c0109ad2 <kernel_thread>
c010ae1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010ae1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae22:	7f 1c                	jg     c010ae40 <proc_init+0x125>
        panic("create init_main failed.\n");
c010ae24:	c7 44 24 08 3e eb 10 	movl   $0xc010eb3e,0x8(%esp)
c010ae2b:	c0 
c010ae2c:	c7 44 24 04 82 03 00 	movl   $0x382,0x4(%esp)
c010ae33:	00 
c010ae34:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010ae3b:	e8 9a 5f ff ff       	call   c0100dda <__panic>
    }

    initproc = find_proc(pid);
c010ae40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae43:	89 04 24             	mov    %eax,(%esp)
c010ae46:	e8 15 ec ff ff       	call   c0109a60 <find_proc>
c010ae4b:	a3 24 fe 1a c0       	mov    %eax,0xc01afe24
    set_proc_name(initproc, "init");
c010ae50:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010ae55:	c7 44 24 04 58 eb 10 	movl   $0xc010eb58,0x4(%esp)
c010ae5c:	c0 
c010ae5d:	89 04 24             	mov    %eax,(%esp)
c010ae60:	e8 1a e8 ff ff       	call   c010967f <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010ae65:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ae6a:	85 c0                	test   %eax,%eax
c010ae6c:	74 0c                	je     c010ae7a <proc_init+0x15f>
c010ae6e:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010ae73:	8b 40 04             	mov    0x4(%eax),%eax
c010ae76:	85 c0                	test   %eax,%eax
c010ae78:	74 24                	je     c010ae9e <proc_init+0x183>
c010ae7a:	c7 44 24 0c 60 eb 10 	movl   $0xc010eb60,0xc(%esp)
c010ae81:	c0 
c010ae82:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010ae89:	c0 
c010ae8a:	c7 44 24 04 88 03 00 	movl   $0x388,0x4(%esp)
c010ae91:	00 
c010ae92:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010ae99:	e8 3c 5f ff ff       	call   c0100dda <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010ae9e:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010aea3:	85 c0                	test   %eax,%eax
c010aea5:	74 0d                	je     c010aeb4 <proc_init+0x199>
c010aea7:	a1 24 fe 1a c0       	mov    0xc01afe24,%eax
c010aeac:	8b 40 04             	mov    0x4(%eax),%eax
c010aeaf:	83 f8 01             	cmp    $0x1,%eax
c010aeb2:	74 24                	je     c010aed8 <proc_init+0x1bd>
c010aeb4:	c7 44 24 0c 88 eb 10 	movl   $0xc010eb88,0xc(%esp)
c010aebb:	c0 
c010aebc:	c7 44 24 08 c9 e7 10 	movl   $0xc010e7c9,0x8(%esp)
c010aec3:	c0 
c010aec4:	c7 44 24 04 89 03 00 	movl   $0x389,0x4(%esp)
c010aecb:	00 
c010aecc:	c7 04 24 9c e7 10 c0 	movl   $0xc010e79c,(%esp)
c010aed3:	e8 02 5f ff ff       	call   c0100dda <__panic>
}
c010aed8:	c9                   	leave  
c010aed9:	c3                   	ret    

c010aeda <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010aeda:	55                   	push   %ebp
c010aedb:	89 e5                	mov    %esp,%ebp
c010aedd:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010aee0:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010aee5:	8b 40 10             	mov    0x10(%eax),%eax
c010aee8:	85 c0                	test   %eax,%eax
c010aeea:	74 07                	je     c010aef3 <cpu_idle+0x19>
            schedule();
c010aeec:	e8 b8 05 00 00       	call   c010b4a9 <schedule>
        }
    }
c010aef1:	eb ed                	jmp    c010aee0 <cpu_idle+0x6>
c010aef3:	eb eb                	jmp    c010aee0 <cpu_idle+0x6>

c010aef5 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010aef5:	55                   	push   %ebp
c010aef6:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010aef8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aefc:	75 11                	jne    c010af0f <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010aefe:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010af03:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010af0a:	00 00 00 
c010af0d:	eb 0e                	jmp    c010af1d <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010af0f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010af14:	8b 55 08             	mov    0x8(%ebp),%edx
c010af17:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010af1d:	5d                   	pop    %ebp
c010af1e:	c3                   	ret    

c010af1f <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010af1f:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010af23:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010af25:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010af28:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010af2b:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010af2e:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010af31:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010af34:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010af37:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010af3a:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010af3e:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010af41:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010af44:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010af47:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010af4a:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010af4d:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010af50:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010af53:	ff 30                	pushl  (%eax)

    ret
c010af55:	c3                   	ret    

c010af56 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010af56:	55                   	push   %ebp
c010af57:	89 e5                	mov    %esp,%ebp
c010af59:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010af5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010af60:	75 08                	jne    c010af6a <skew_heap_merge+0x14>
c010af62:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af65:	e9 bd 00 00 00       	jmp    c010b027 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010af6a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010af6e:	75 08                	jne    c010af78 <skew_heap_merge+0x22>
c010af70:	8b 45 08             	mov    0x8(%ebp),%eax
c010af73:	e9 af 00 00 00       	jmp    c010b027 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010af78:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af7b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af82:	89 04 24             	mov    %eax,(%esp)
c010af85:	8b 45 10             	mov    0x10(%ebp),%eax
c010af88:	ff d0                	call   *%eax
c010af8a:	83 f8 ff             	cmp    $0xffffffff,%eax
c010af8d:	75 4d                	jne    c010afdc <skew_heap_merge+0x86>
     {
          r = a->left;
c010af8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af92:	8b 40 04             	mov    0x4(%eax),%eax
c010af95:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010af98:	8b 45 08             	mov    0x8(%ebp),%eax
c010af9b:	8b 40 08             	mov    0x8(%eax),%eax
c010af9e:	8b 55 10             	mov    0x10(%ebp),%edx
c010afa1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010afa5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010afa8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010afac:	89 04 24             	mov    %eax,(%esp)
c010afaf:	e8 a2 ff ff ff       	call   c010af56 <skew_heap_merge>
c010afb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010afb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010afba:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010afbd:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010afc0:	8b 45 08             	mov    0x8(%ebp),%eax
c010afc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010afc6:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010afc9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010afcd:	74 08                	je     c010afd7 <skew_heap_merge+0x81>
c010afcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afd2:	8b 55 08             	mov    0x8(%ebp),%edx
c010afd5:	89 10                	mov    %edx,(%eax)

          return a;
c010afd7:	8b 45 08             	mov    0x8(%ebp),%eax
c010afda:	eb 4b                	jmp    c010b027 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010afdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afdf:	8b 40 04             	mov    0x4(%eax),%eax
c010afe2:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010afe5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afe8:	8b 40 08             	mov    0x8(%eax),%eax
c010afeb:	8b 55 10             	mov    0x10(%ebp),%edx
c010afee:	89 54 24 08          	mov    %edx,0x8(%esp)
c010aff2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aff6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aff9:	89 04 24             	mov    %eax,(%esp)
c010affc:	e8 55 ff ff ff       	call   c010af56 <skew_heap_merge>
c010b001:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010b004:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b007:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b00a:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010b00d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b010:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b013:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010b016:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b01a:	74 08                	je     c010b024 <skew_heap_merge+0xce>
c010b01c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b01f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b022:	89 10                	mov    %edx,(%eax)

          return b;
c010b024:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010b027:	c9                   	leave  
c010b028:	c3                   	ret    

c010b029 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010b029:	55                   	push   %ebp
c010b02a:	89 e5                	mov    %esp,%ebp
c010b02c:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010b02f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b032:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b037:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010b03a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b03d:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b042:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010b045:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b048:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b04e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b051:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b057:	29 c2                	sub    %eax,%edx
c010b059:	89 d0                	mov    %edx,%eax
c010b05b:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010b05e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b062:	7e 07                	jle    c010b06b <proc_stride_comp_f+0x42>
c010b064:	b8 01 00 00 00       	mov    $0x1,%eax
c010b069:	eb 12                	jmp    c010b07d <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010b06b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b06f:	75 07                	jne    c010b078 <proc_stride_comp_f+0x4f>
c010b071:	b8 00 00 00 00       	mov    $0x0,%eax
c010b076:	eb 05                	jmp    c010b07d <proc_stride_comp_f+0x54>
     else return -1;
c010b078:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010b07d:	c9                   	leave  
c010b07e:	c3                   	ret    

c010b07f <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010b07f:	55                   	push   %ebp
c010b080:	89 e5                	mov    %esp,%ebp
c010b082:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: 2013011296
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0
      */
	list_init(&(rq->run_list));
c010b085:	8b 45 08             	mov    0x8(%ebp),%eax
c010b088:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010b08b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b08e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b091:	89 50 04             	mov    %edx,0x4(%eax)
c010b094:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b097:	8b 50 04             	mov    0x4(%eax),%edx
c010b09a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b09d:	89 10                	mov    %edx,(%eax)
	rq->lab6_run_pool = NULL;
c010b09f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0a2:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	rq->proc_num = 0;
c010b0a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ac:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010b0b3:	c9                   	leave  
c010b0b4:	c3                   	ret    

c010b0b5 <stride_enqueue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010b0b5:	55                   	push   %ebp
c010b0b6:	89 e5                	mov    %esp,%ebp
c010b0b8:	83 ec 28             	sub    $0x28,%esp
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
	rq->lab6_run_pool =
			skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010b0bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0be:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010b0c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c7:	8b 40 10             	mov    0x10(%eax),%eax
c010b0ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0cd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b0d0:	c7 45 ec 29 b0 10 c0 	movl   $0xc010b029,-0x14(%ebp)
c010b0d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0da:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010b0dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010b0e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0e9:	8b 10                	mov    (%eax),%edx
c010b0eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0ee:	89 50 08             	mov    %edx,0x8(%eax)
c010b0f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0f4:	8b 50 08             	mov    0x8(%eax),%edx
c010b0f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0fa:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010b0fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b100:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b104:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b107:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b10b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b10e:	89 04 24             	mov    %eax,(%esp)
c010b111:	e8 40 fe ff ff       	call   c010af56 <skew_heap_merge>
c010b116:	89 c2                	mov    %eax,%edx
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
	rq->lab6_run_pool =
c010b118:	8b 45 08             	mov    0x8(%ebp),%eax
c010b11b:	89 50 10             	mov    %edx,0x10(%eax)
			skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
	assert(list_empty(&(proc->run_link)));
	list_add_before(&(rq->run_list), &(proc->run_link));
#endif
	if(proc->time_slice == 0 || proc->time_slice > rq->max_time_slice){
c010b11e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b121:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b127:	85 c0                	test   %eax,%eax
c010b129:	74 13                	je     c010b13e <stride_enqueue+0x89>
c010b12b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b12e:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010b134:	8b 45 08             	mov    0x8(%ebp),%eax
c010b137:	8b 40 0c             	mov    0xc(%eax),%eax
c010b13a:	39 c2                	cmp    %eax,%edx
c010b13c:	7e 0f                	jle    c010b14d <stride_enqueue+0x98>
		proc->time_slice = rq->max_time_slice;
c010b13e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b141:	8b 50 0c             	mov    0xc(%eax),%edx
c010b144:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b147:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
	}
	proc->rq = rq;
c010b14d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b150:	8b 55 08             	mov    0x8(%ebp),%edx
c010b153:	89 50 7c             	mov    %edx,0x7c(%eax)
	rq->proc_num++;
c010b156:	8b 45 08             	mov    0x8(%ebp),%eax
c010b159:	8b 40 08             	mov    0x8(%eax),%eax
c010b15c:	8d 50 01             	lea    0x1(%eax),%edx
c010b15f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b162:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b165:	c9                   	leave  
c010b166:	c3                   	ret    

c010b167 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010b167:	55                   	push   %ebp
c010b168:	89 e5                	mov    %esp,%ebp
c010b16a:	83 ec 38             	sub    $0x38,%esp
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
	rq->lab6_run_pool =
			skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010b16d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b170:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010b176:	8b 45 08             	mov    0x8(%ebp),%eax
c010b179:	8b 40 10             	mov    0x10(%eax),%eax
c010b17c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b17f:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b182:	c7 45 ec 29 b0 10 c0 	movl   $0xc010b029,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010b189:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b18c:	8b 00                	mov    (%eax),%eax
c010b18e:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010b191:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b194:	8b 50 08             	mov    0x8(%eax),%edx
c010b197:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b19a:	8b 40 04             	mov    0x4(%eax),%eax
c010b19d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b1a0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b1a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b1a8:	89 04 24             	mov    %eax,(%esp)
c010b1ab:	e8 a6 fd ff ff       	call   c010af56 <skew_heap_merge>
c010b1b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010b1b3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b1b7:	74 08                	je     c010b1c1 <stride_dequeue+0x5a>
c010b1b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b1bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b1bf:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010b1c1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b1c5:	74 24                	je     c010b1eb <stride_dequeue+0x84>
     {
          if (p->left == b)
c010b1c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1ca:	8b 40 04             	mov    0x4(%eax),%eax
c010b1cd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b1d0:	75 0b                	jne    c010b1dd <stride_dequeue+0x76>
               p->left = rep;
c010b1d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b1d8:	89 50 04             	mov    %edx,0x4(%eax)
c010b1db:	eb 09                	jmp    c010b1e6 <stride_dequeue+0x7f>
          else p->right = rep;
c010b1dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1e0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b1e3:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010b1e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1e9:	eb 03                	jmp    c010b1ee <stride_dequeue+0x87>
     }
     else return rep;
c010b1eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b1ee:	89 c2                	mov    %eax,%edx
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
	rq->lab6_run_pool =
c010b1f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1f3:	89 50 10             	mov    %edx,0x10(%eax)
			skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
	assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
	list_del_init(&(proc->run_link));
#endif
	rq->proc_num--;
c010b1f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1f9:	8b 40 08             	mov    0x8(%eax),%eax
c010b1fc:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b1ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b202:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b205:	c9                   	leave  
c010b206:	c3                   	ret    

c010b207 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010b207:	55                   	push   %ebp
c010b208:	89 e5                	mov    %esp,%ebp
c010b20a:	53                   	push   %ebx
c010b20b:	83 ec 10             	sub    $0x10,%esp
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
#if USE_SKEW_HEAP
	if(rq->lab6_run_pool == NULL)	return NULL;
c010b20e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b211:	8b 40 10             	mov    0x10(%eax),%eax
c010b214:	85 c0                	test   %eax,%eax
c010b216:	75 07                	jne    c010b21f <stride_pick_next+0x18>
c010b218:	b8 00 00 00 00       	mov    $0x0,%eax
c010b21d:	eb 62                	jmp    c010b281 <stride_pick_next+0x7a>
	struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010b21f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b222:	8b 40 10             	mov    0x10(%eax),%eax
c010b225:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b22a:	89 45 f8             	mov    %eax,-0x8(%ebp)
		if((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
			p = q;
		le = list_next(le);
	}
#endif
	if(p->lab6_priority == 0)
c010b22d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b230:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b236:	85 c0                	test   %eax,%eax
c010b238:	75 1a                	jne    c010b254 <stride_pick_next+0x4d>
		p->lab6_priority += BIG_STRIDE;
c010b23a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b23d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b243:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010b249:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b24c:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b252:	eb 2a                	jmp    c010b27e <stride_pick_next+0x77>
	else
		p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010b254:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b257:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
c010b25d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b260:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
c010b266:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010b26b:	ba 00 00 00 00       	mov    $0x0,%edx
c010b270:	f7 f3                	div    %ebx
c010b272:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010b275:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b278:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

	return p;
c010b27e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b281:	83 c4 10             	add    $0x10,%esp
c010b284:	5b                   	pop    %ebx
c010b285:	5d                   	pop    %ebp
c010b286:	c3                   	ret    

c010b287 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010b287:	55                   	push   %ebp
c010b288:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2013011296 */
	if(proc->time_slice > 0)
c010b28a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b28d:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b293:	85 c0                	test   %eax,%eax
c010b295:	7e 15                	jle    c010b2ac <stride_proc_tick+0x25>
		proc->time_slice--;
c010b297:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b29a:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b2a0:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b2a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2a6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
	if(proc->time_slice == 0)
c010b2ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2af:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b2b5:	85 c0                	test   %eax,%eax
c010b2b7:	75 0a                	jne    c010b2c3 <stride_proc_tick+0x3c>
		proc->need_resched = 1;
c010b2b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2bc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
c010b2c3:	5d                   	pop    %ebp
c010b2c4:	c3                   	ret    

c010b2c5 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b2c5:	55                   	push   %ebp
c010b2c6:	89 e5                	mov    %esp,%ebp
c010b2c8:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b2cb:	9c                   	pushf  
c010b2cc:	58                   	pop    %eax
c010b2cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b2d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b2d3:	25 00 02 00 00       	and    $0x200,%eax
c010b2d8:	85 c0                	test   %eax,%eax
c010b2da:	74 0c                	je     c010b2e8 <__intr_save+0x23>
        intr_disable();
c010b2dc:	e8 51 6d ff ff       	call   c0102032 <intr_disable>
        return 1;
c010b2e1:	b8 01 00 00 00       	mov    $0x1,%eax
c010b2e6:	eb 05                	jmp    c010b2ed <__intr_save+0x28>
    }
    return 0;
c010b2e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b2ed:	c9                   	leave  
c010b2ee:	c3                   	ret    

c010b2ef <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b2ef:	55                   	push   %ebp
c010b2f0:	89 e5                	mov    %esp,%ebp
c010b2f2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b2f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b2f9:	74 05                	je     c010b300 <__intr_restore+0x11>
        intr_enable();
c010b2fb:	e8 2c 6d ff ff       	call   c010202c <intr_enable>
    }
}
c010b300:	c9                   	leave  
c010b301:	c3                   	ret    

c010b302 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010b302:	55                   	push   %ebp
c010b303:	89 e5                	mov    %esp,%ebp
c010b305:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b308:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010b30d:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b310:	74 1a                	je     c010b32c <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010b312:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b317:	8b 40 08             	mov    0x8(%eax),%eax
c010b31a:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b320:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b323:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b327:	89 14 24             	mov    %edx,(%esp)
c010b32a:	ff d0                	call   *%eax
    }
}
c010b32c:	c9                   	leave  
c010b32d:	c3                   	ret    

c010b32e <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010b32e:	55                   	push   %ebp
c010b32f:	89 e5                	mov    %esp,%ebp
c010b331:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010b334:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b339:	8b 40 0c             	mov    0xc(%eax),%eax
c010b33c:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b342:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b345:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b349:	89 14 24             	mov    %edx,(%esp)
c010b34c:	ff d0                	call   *%eax
}
c010b34e:	c9                   	leave  
c010b34f:	c3                   	ret    

c010b350 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010b350:	55                   	push   %ebp
c010b351:	89 e5                	mov    %esp,%ebp
c010b353:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010b356:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b35b:	8b 40 10             	mov    0x10(%eax),%eax
c010b35e:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b364:	89 14 24             	mov    %edx,(%esp)
c010b367:	ff d0                	call   *%eax
}
c010b369:	c9                   	leave  
c010b36a:	c3                   	ret    

c010b36b <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010b36b:	55                   	push   %ebp
c010b36c:	89 e5                	mov    %esp,%ebp
c010b36e:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b371:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010b376:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b379:	74 1c                	je     c010b397 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010b37b:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b380:	8b 40 14             	mov    0x14(%eax),%eax
c010b383:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b389:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010b38c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010b390:	89 14 24             	mov    %edx,(%esp)
c010b393:	ff d0                	call   *%eax
c010b395:	eb 0a                	jmp    c010b3a1 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010b397:	8b 45 08             	mov    0x8(%ebp),%eax
c010b39a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b3a1:	c9                   	leave  
c010b3a2:	c3                   	ret    

c010b3a3 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010b3a3:	55                   	push   %ebp
c010b3a4:	89 e5                	mov    %esp,%ebp
c010b3a6:	83 ec 28             	sub    $0x28,%esp
c010b3a9:	c7 45 f4 54 1e 1b c0 	movl   $0xc01b1e54,-0xc(%ebp)
c010b3b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b3b6:	89 50 04             	mov    %edx,0x4(%eax)
c010b3b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3bc:	8b 50 04             	mov    0x4(%eax),%edx
c010b3bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3c2:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010b3c4:	c7 05 5c 1e 1b c0 88 	movl   $0xc012da88,0xc01b1e5c
c010b3cb:	da 12 c0 

    rq = &__rq;
c010b3ce:	c7 05 60 1e 1b c0 64 	movl   $0xc01b1e64,0xc01b1e60
c010b3d5:	1e 1b c0 
    rq->max_time_slice = 5;
c010b3d8:	a1 60 1e 1b c0       	mov    0xc01b1e60,%eax
c010b3dd:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010b3e4:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b3e9:	8b 40 04             	mov    0x4(%eax),%eax
c010b3ec:	8b 15 60 1e 1b c0    	mov    0xc01b1e60,%edx
c010b3f2:	89 14 24             	mov    %edx,(%esp)
c010b3f5:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010b3f7:	a1 5c 1e 1b c0       	mov    0xc01b1e5c,%eax
c010b3fc:	8b 00                	mov    (%eax),%eax
c010b3fe:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b402:	c7 04 24 c0 eb 10 c0 	movl   $0xc010ebc0,(%esp)
c010b409:	e8 4a 4f ff ff       	call   c0100358 <cprintf>
}
c010b40e:	c9                   	leave  
c010b40f:	c3                   	ret    

c010b410 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010b410:	55                   	push   %ebp
c010b411:	89 e5                	mov    %esp,%ebp
c010b413:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010b416:	8b 45 08             	mov    0x8(%ebp),%eax
c010b419:	8b 00                	mov    (%eax),%eax
c010b41b:	83 f8 03             	cmp    $0x3,%eax
c010b41e:	75 24                	jne    c010b444 <wakeup_proc+0x34>
c010b420:	c7 44 24 0c d1 eb 10 	movl   $0xc010ebd1,0xc(%esp)
c010b427:	c0 
c010b428:	c7 44 24 08 ec eb 10 	movl   $0xc010ebec,0x8(%esp)
c010b42f:	c0 
c010b430:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010b437:	00 
c010b438:	c7 04 24 01 ec 10 c0 	movl   $0xc010ec01,(%esp)
c010b43f:	e8 96 59 ff ff       	call   c0100dda <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010b444:	e8 7c fe ff ff       	call   c010b2c5 <__intr_save>
c010b449:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010b44c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b44f:	8b 00                	mov    (%eax),%eax
c010b451:	83 f8 02             	cmp    $0x2,%eax
c010b454:	74 2a                	je     c010b480 <wakeup_proc+0x70>
            proc->state = PROC_RUNNABLE;
c010b456:	8b 45 08             	mov    0x8(%ebp),%eax
c010b459:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010b45f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b462:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010b469:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b46e:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b471:	74 29                	je     c010b49c <wakeup_proc+0x8c>
                sched_class_enqueue(proc);
c010b473:	8b 45 08             	mov    0x8(%ebp),%eax
c010b476:	89 04 24             	mov    %eax,(%esp)
c010b479:	e8 84 fe ff ff       	call   c010b302 <sched_class_enqueue>
c010b47e:	eb 1c                	jmp    c010b49c <wakeup_proc+0x8c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010b480:	c7 44 24 08 17 ec 10 	movl   $0xc010ec17,0x8(%esp)
c010b487:	c0 
c010b488:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
c010b48f:	00 
c010b490:	c7 04 24 01 ec 10 c0 	movl   $0xc010ec01,(%esp)
c010b497:	e8 aa 59 ff ff       	call   c0100e46 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010b49c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b49f:	89 04 24             	mov    %eax,(%esp)
c010b4a2:	e8 48 fe ff ff       	call   c010b2ef <__intr_restore>
}
c010b4a7:	c9                   	leave  
c010b4a8:	c3                   	ret    

c010b4a9 <schedule>:

void
schedule(void) {
c010b4a9:	55                   	push   %ebp
c010b4aa:	89 e5                	mov    %esp,%ebp
c010b4ac:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010b4af:	e8 11 fe ff ff       	call   c010b2c5 <__intr_save>
c010b4b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010b4b7:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b4bc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010b4c3:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b4c8:	8b 00                	mov    (%eax),%eax
c010b4ca:	83 f8 02             	cmp    $0x2,%eax
c010b4cd:	75 0d                	jne    c010b4dc <schedule+0x33>
            sched_class_enqueue(current);
c010b4cf:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b4d4:	89 04 24             	mov    %eax,(%esp)
c010b4d7:	e8 26 fe ff ff       	call   c010b302 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010b4dc:	e8 6f fe ff ff       	call   c010b350 <sched_class_pick_next>
c010b4e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b4e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4e8:	74 0b                	je     c010b4f5 <schedule+0x4c>
            sched_class_dequeue(next);
c010b4ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4ed:	89 04 24             	mov    %eax,(%esp)
c010b4f0:	e8 39 fe ff ff       	call   c010b32e <sched_class_dequeue>
        }
        if (next == NULL) {
c010b4f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b4f9:	75 08                	jne    c010b503 <schedule+0x5a>
            next = idleproc;
c010b4fb:	a1 20 fe 1a c0       	mov    0xc01afe20,%eax
c010b500:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010b503:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b506:	8b 40 08             	mov    0x8(%eax),%eax
c010b509:	8d 50 01             	lea    0x1(%eax),%edx
c010b50c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b50f:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010b512:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b517:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b51a:	74 0b                	je     c010b527 <schedule+0x7e>
            proc_run(next);
c010b51c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b51f:	89 04 24             	mov    %eax,(%esp)
c010b522:	e8 fd e3 ff ff       	call   c0109924 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010b527:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b52a:	89 04 24             	mov    %eax,(%esp)
c010b52d:	e8 bd fd ff ff       	call   c010b2ef <__intr_restore>
}
c010b532:	c9                   	leave  
c010b533:	c3                   	ret    

c010b534 <add_timer>:

void
add_timer(timer_t *timer) {
c010b534:	55                   	push   %ebp
c010b535:	89 e5                	mov    %esp,%ebp
c010b537:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b53a:	e8 86 fd ff ff       	call   c010b2c5 <__intr_save>
c010b53f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010b542:	8b 45 08             	mov    0x8(%ebp),%eax
c010b545:	8b 00                	mov    (%eax),%eax
c010b547:	85 c0                	test   %eax,%eax
c010b549:	74 0a                	je     c010b555 <add_timer+0x21>
c010b54b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b54e:	8b 40 04             	mov    0x4(%eax),%eax
c010b551:	85 c0                	test   %eax,%eax
c010b553:	75 24                	jne    c010b579 <add_timer+0x45>
c010b555:	c7 44 24 0c 34 ec 10 	movl   $0xc010ec34,0xc(%esp)
c010b55c:	c0 
c010b55d:	c7 44 24 08 ec eb 10 	movl   $0xc010ebec,0x8(%esp)
c010b564:	c0 
c010b565:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010b56c:	00 
c010b56d:	c7 04 24 01 ec 10 c0 	movl   $0xc010ec01,(%esp)
c010b574:	e8 61 58 ff ff       	call   c0100dda <__panic>
        assert(list_empty(&(timer->timer_link)));
c010b579:	8b 45 08             	mov    0x8(%ebp),%eax
c010b57c:	83 c0 08             	add    $0x8,%eax
c010b57f:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b582:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b585:	8b 40 04             	mov    0x4(%eax),%eax
c010b588:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010b58b:	0f 94 c0             	sete   %al
c010b58e:	0f b6 c0             	movzbl %al,%eax
c010b591:	85 c0                	test   %eax,%eax
c010b593:	75 24                	jne    c010b5b9 <add_timer+0x85>
c010b595:	c7 44 24 0c 60 ec 10 	movl   $0xc010ec60,0xc(%esp)
c010b59c:	c0 
c010b59d:	c7 44 24 08 ec eb 10 	movl   $0xc010ebec,0x8(%esp)
c010b5a4:	c0 
c010b5a5:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010b5ac:	00 
c010b5ad:	c7 04 24 01 ec 10 c0 	movl   $0xc010ec01,(%esp)
c010b5b4:	e8 21 58 ff ff       	call   c0100dda <__panic>
c010b5b9:	c7 45 e4 54 1e 1b c0 	movl   $0xc01b1e54,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b5c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5c3:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010b5c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010b5c9:	eb 4a                	jmp    c010b615 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010b5cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5ce:	83 e8 08             	sub    $0x8,%eax
c010b5d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010b5d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5d7:	8b 10                	mov    (%eax),%edx
c010b5d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5dc:	8b 00                	mov    (%eax),%eax
c010b5de:	39 c2                	cmp    %eax,%edx
c010b5e0:	73 13                	jae    c010b5f5 <add_timer+0xc1>
                next->expires -= timer->expires;
c010b5e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5e5:	8b 10                	mov    (%eax),%edx
c010b5e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5ea:	8b 00                	mov    (%eax),%eax
c010b5ec:	29 c2                	sub    %eax,%edx
c010b5ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5f1:	89 10                	mov    %edx,(%eax)
                break;
c010b5f3:	eb 29                	jmp    c010b61e <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010b5f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5f8:	8b 10                	mov    (%eax),%edx
c010b5fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5fd:	8b 00                	mov    (%eax),%eax
c010b5ff:	29 c2                	sub    %eax,%edx
c010b601:	8b 45 08             	mov    0x8(%ebp),%eax
c010b604:	89 10                	mov    %edx,(%eax)
c010b606:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b609:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b60c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b60f:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010b612:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010b615:	81 7d f4 54 1e 1b c0 	cmpl   $0xc01b1e54,-0xc(%ebp)
c010b61c:	75 ad                	jne    c010b5cb <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010b61e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b621:	8d 50 08             	lea    0x8(%eax),%edx
c010b624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b627:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b62a:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b62d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b630:	8b 00                	mov    (%eax),%eax
c010b632:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b635:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b638:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b63b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b63e:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b641:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b644:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b647:	89 10                	mov    %edx,(%eax)
c010b649:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b64c:	8b 10                	mov    (%eax),%edx
c010b64e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b651:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b654:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b657:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b65a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b65d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b660:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b663:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010b665:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b668:	89 04 24             	mov    %eax,(%esp)
c010b66b:	e8 7f fc ff ff       	call   c010b2ef <__intr_restore>
}
c010b670:	c9                   	leave  
c010b671:	c3                   	ret    

c010b672 <del_timer>:

void
del_timer(timer_t *timer) {
c010b672:	55                   	push   %ebp
c010b673:	89 e5                	mov    %esp,%ebp
c010b675:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b678:	e8 48 fc ff ff       	call   c010b2c5 <__intr_save>
c010b67d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010b680:	8b 45 08             	mov    0x8(%ebp),%eax
c010b683:	83 c0 08             	add    $0x8,%eax
c010b686:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b689:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b68c:	8b 40 04             	mov    0x4(%eax),%eax
c010b68f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010b692:	0f 94 c0             	sete   %al
c010b695:	0f b6 c0             	movzbl %al,%eax
c010b698:	85 c0                	test   %eax,%eax
c010b69a:	0f 85 89 00 00 00    	jne    c010b729 <del_timer+0xb7>
            if (timer->expires != 0) {
c010b6a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6a3:	8b 00                	mov    (%eax),%eax
c010b6a5:	85 c0                	test   %eax,%eax
c010b6a7:	74 35                	je     c010b6de <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010b6a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ac:	83 c0 08             	add    $0x8,%eax
c010b6af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b6b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6b5:	8b 40 04             	mov    0x4(%eax),%eax
c010b6b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010b6bb:	81 7d f0 54 1e 1b c0 	cmpl   $0xc01b1e54,-0x10(%ebp)
c010b6c2:	74 1a                	je     c010b6de <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010b6c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6c7:	83 e8 08             	sub    $0x8,%eax
c010b6ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010b6cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6d0:	8b 10                	mov    (%eax),%edx
c010b6d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d5:	8b 00                	mov    (%eax),%eax
c010b6d7:	01 c2                	add    %eax,%edx
c010b6d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6dc:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010b6de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6e1:	83 c0 08             	add    $0x8,%eax
c010b6e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b6e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b6ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b6ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b6f0:	8b 40 04             	mov    0x4(%eax),%eax
c010b6f3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b6f6:	8b 12                	mov    (%edx),%edx
c010b6f8:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010b6fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b6fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b701:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b704:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b707:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b70a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b70d:	89 10                	mov    %edx,(%eax)
c010b70f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b712:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b715:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b718:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b71b:	89 50 04             	mov    %edx,0x4(%eax)
c010b71e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b721:	8b 50 04             	mov    0x4(%eax),%edx
c010b724:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b727:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010b729:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b72c:	89 04 24             	mov    %eax,(%esp)
c010b72f:	e8 bb fb ff ff       	call   c010b2ef <__intr_restore>
}
c010b734:	c9                   	leave  
c010b735:	c3                   	ret    

c010b736 <run_timer_list>:

void
run_timer_list(void) {
c010b736:	55                   	push   %ebp
c010b737:	89 e5                	mov    %esp,%ebp
c010b739:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b73c:	e8 84 fb ff ff       	call   c010b2c5 <__intr_save>
c010b741:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b744:	c7 45 e4 54 1e 1b c0 	movl   $0xc01b1e54,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b74b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b74e:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010b751:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010b754:	81 7d f4 54 1e 1b c0 	cmpl   $0xc01b1e54,-0xc(%ebp)
c010b75b:	0f 84 f5 00 00 00    	je     c010b856 <run_timer_list+0x120>
            timer_t *timer = le2timer(le, timer_link);
c010b761:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b764:	83 e8 08             	sub    $0x8,%eax
c010b767:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010b76a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b76d:	8b 00                	mov    (%eax),%eax
c010b76f:	85 c0                	test   %eax,%eax
c010b771:	75 24                	jne    c010b797 <run_timer_list+0x61>
c010b773:	c7 44 24 0c 81 ec 10 	movl   $0xc010ec81,0xc(%esp)
c010b77a:	c0 
c010b77b:	c7 44 24 08 ec eb 10 	movl   $0xc010ebec,0x8(%esp)
c010b782:	c0 
c010b783:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010b78a:	00 
c010b78b:	c7 04 24 01 ec 10 c0 	movl   $0xc010ec01,(%esp)
c010b792:	e8 43 56 ff ff       	call   c0100dda <__panic>
            timer->expires --;
c010b797:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b79a:	8b 00                	mov    (%eax),%eax
c010b79c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b79f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7a2:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010b7a4:	e9 a0 00 00 00       	jmp    c010b849 <run_timer_list+0x113>
c010b7a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b7af:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b7b2:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010b7b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010b7b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7bb:	8b 40 04             	mov    0x4(%eax),%eax
c010b7be:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010b7c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7c4:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b7c7:	85 c0                	test   %eax,%eax
c010b7c9:	74 2e                	je     c010b7f9 <run_timer_list+0xc3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010b7cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7ce:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b7d1:	85 c0                	test   %eax,%eax
c010b7d3:	78 4a                	js     c010b81f <run_timer_list+0xe9>
c010b7d5:	c7 44 24 0c 98 ec 10 	movl   $0xc010ec98,0xc(%esp)
c010b7dc:	c0 
c010b7dd:	c7 44 24 08 ec eb 10 	movl   $0xc010ebec,0x8(%esp)
c010b7e4:	c0 
c010b7e5:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c010b7ec:	00 
c010b7ed:	c7 04 24 01 ec 10 c0 	movl   $0xc010ec01,(%esp)
c010b7f4:	e8 e1 55 ff ff       	call   c0100dda <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010b7f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7fc:	8b 40 04             	mov    0x4(%eax),%eax
c010b7ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b803:	c7 44 24 08 bc ec 10 	movl   $0xc010ecbc,0x8(%esp)
c010b80a:	c0 
c010b80b:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010b812:	00 
c010b813:	c7 04 24 01 ec 10 c0 	movl   $0xc010ec01,(%esp)
c010b81a:	e8 27 56 ff ff       	call   c0100e46 <__warn>
                }
                wakeup_proc(proc);
c010b81f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b822:	89 04 24             	mov    %eax,(%esp)
c010b825:	e8 e6 fb ff ff       	call   c010b410 <wakeup_proc>
                del_timer(timer);
c010b82a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b82d:	89 04 24             	mov    %eax,(%esp)
c010b830:	e8 3d fe ff ff       	call   c010b672 <del_timer>
                if (le == &timer_list) {
c010b835:	81 7d f4 54 1e 1b c0 	cmpl   $0xc01b1e54,-0xc(%ebp)
c010b83c:	75 02                	jne    c010b840 <run_timer_list+0x10a>
                    break;
c010b83e:	eb 16                	jmp    c010b856 <run_timer_list+0x120>
                }
                timer = le2timer(le, timer_link);
c010b840:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b843:	83 e8 08             	sub    $0x8,%eax
c010b846:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010b849:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b84c:	8b 00                	mov    (%eax),%eax
c010b84e:	85 c0                	test   %eax,%eax
c010b850:	0f 84 53 ff ff ff    	je     c010b7a9 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010b856:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b85b:	89 04 24             	mov    %eax,(%esp)
c010b85e:	e8 08 fb ff ff       	call   c010b36b <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010b863:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b866:	89 04 24             	mov    %eax,(%esp)
c010b869:	e8 81 fa ff ff       	call   c010b2ef <__intr_restore>
}
c010b86e:	c9                   	leave  
c010b86f:	c3                   	ret    

c010b870 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010b870:	55                   	push   %ebp
c010b871:	89 e5                	mov    %esp,%ebp
c010b873:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010b876:	8b 45 08             	mov    0x8(%ebp),%eax
c010b879:	8b 00                	mov    (%eax),%eax
c010b87b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010b87e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b881:	89 04 24             	mov    %eax,(%esp)
c010b884:	e8 ff e6 ff ff       	call   c0109f88 <do_exit>
}
c010b889:	c9                   	leave  
c010b88a:	c3                   	ret    

c010b88b <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010b88b:	55                   	push   %ebp
c010b88c:	89 e5                	mov    %esp,%ebp
c010b88e:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010b891:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b896:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b899:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010b89c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b89f:	8b 40 44             	mov    0x44(%eax),%eax
c010b8a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010b8a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8a8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b8ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8af:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8b3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010b8ba:	e8 a8 e5 ff ff       	call   c0109e67 <do_fork>
}
c010b8bf:	c9                   	leave  
c010b8c0:	c3                   	ret    

c010b8c1 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010b8c1:	55                   	push   %ebp
c010b8c2:	89 e5                	mov    %esp,%ebp
c010b8c4:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010b8c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8ca:	8b 00                	mov    (%eax),%eax
c010b8cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010b8cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8d2:	83 c0 04             	add    $0x4,%eax
c010b8d5:	8b 00                	mov    (%eax),%eax
c010b8d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010b8da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8e4:	89 04 24             	mov    %eax,(%esp)
c010b8e7:	e8 1a f0 ff ff       	call   c010a906 <do_wait>
}
c010b8ec:	c9                   	leave  
c010b8ed:	c3                   	ret    

c010b8ee <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010b8ee:	55                   	push   %ebp
c010b8ef:	89 e5                	mov    %esp,%ebp
c010b8f1:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010b8f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8f7:	8b 00                	mov    (%eax),%eax
c010b8f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010b8fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8ff:	8b 40 04             	mov    0x4(%eax),%eax
c010b902:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010b905:	8b 45 08             	mov    0x8(%ebp),%eax
c010b908:	83 c0 08             	add    $0x8,%eax
c010b90b:	8b 00                	mov    (%eax),%eax
c010b90d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010b910:	8b 45 08             	mov    0x8(%ebp),%eax
c010b913:	8b 40 0c             	mov    0xc(%eax),%eax
c010b916:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010b919:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b91c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b920:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b923:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b92a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b92e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b931:	89 04 24             	mov    %eax,(%esp)
c010b934:	e8 81 ee ff ff       	call   c010a7ba <do_execve>
}
c010b939:	c9                   	leave  
c010b93a:	c3                   	ret    

c010b93b <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010b93b:	55                   	push   %ebp
c010b93c:	89 e5                	mov    %esp,%ebp
c010b93e:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010b941:	e8 aa ef ff ff       	call   c010a8f0 <do_yield>
}
c010b946:	c9                   	leave  
c010b947:	c3                   	ret    

c010b948 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010b948:	55                   	push   %ebp
c010b949:	89 e5                	mov    %esp,%ebp
c010b94b:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010b94e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b951:	8b 00                	mov    (%eax),%eax
c010b953:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010b956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b959:	89 04 24             	mov    %eax,(%esp)
c010b95c:	e8 39 f1 ff ff       	call   c010aa9a <do_kill>
}
c010b961:	c9                   	leave  
c010b962:	c3                   	ret    

c010b963 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010b963:	55                   	push   %ebp
c010b964:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010b966:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b96b:	8b 40 04             	mov    0x4(%eax),%eax
}
c010b96e:	5d                   	pop    %ebp
c010b96f:	c3                   	ret    

c010b970 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010b970:	55                   	push   %ebp
c010b971:	89 e5                	mov    %esp,%ebp
c010b973:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010b976:	8b 45 08             	mov    0x8(%ebp),%eax
c010b979:	8b 00                	mov    (%eax),%eax
c010b97b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010b97e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b981:	89 04 24             	mov    %eax,(%esp)
c010b984:	e8 f5 49 ff ff       	call   c010037e <cputchar>
    return 0;
c010b989:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b98e:	c9                   	leave  
c010b98f:	c3                   	ret    

c010b990 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010b990:	55                   	push   %ebp
c010b991:	89 e5                	mov    %esp,%ebp
c010b993:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010b996:	e8 b0 b1 ff ff       	call   c0106b4b <print_pgdir>
    return 0;
c010b99b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b9a0:	c9                   	leave  
c010b9a1:	c3                   	ret    

c010b9a2 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010b9a2:	55                   	push   %ebp
c010b9a3:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010b9a5:	a1 78 1e 1b c0       	mov    0xc01b1e78,%eax
}
c010b9aa:	5d                   	pop    %ebp
c010b9ab:	c3                   	ret    

c010b9ac <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010b9ac:	55                   	push   %ebp
c010b9ad:	89 e5                	mov    %esp,%ebp
c010b9af:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010b9b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9b5:	8b 00                	mov    (%eax),%eax
c010b9b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010b9ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9bd:	89 04 24             	mov    %eax,(%esp)
c010b9c0:	e8 30 f5 ff ff       	call   c010aef5 <lab6_set_priority>
    return 0;
c010b9c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b9ca:	c9                   	leave  
c010b9cb:	c3                   	ret    

c010b9cc <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010b9cc:	55                   	push   %ebp
c010b9cd:	89 e5                	mov    %esp,%ebp
c010b9cf:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010b9d2:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010b9d7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b9da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010b9dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9e0:	8b 40 1c             	mov    0x1c(%eax),%eax
c010b9e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010b9e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b9ea:	78 60                	js     c010ba4c <syscall+0x80>
c010b9ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9ef:	3d ff 00 00 00       	cmp    $0xff,%eax
c010b9f4:	77 56                	ja     c010ba4c <syscall+0x80>
        if (syscalls[num] != NULL) {
c010b9f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9f9:	8b 04 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%eax
c010ba00:	85 c0                	test   %eax,%eax
c010ba02:	74 48                	je     c010ba4c <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ba04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba07:	8b 40 14             	mov    0x14(%eax),%eax
c010ba0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ba0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba10:	8b 40 18             	mov    0x18(%eax),%eax
c010ba13:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ba16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba19:	8b 40 10             	mov    0x10(%eax),%eax
c010ba1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ba1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba22:	8b 00                	mov    (%eax),%eax
c010ba24:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ba27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba2a:	8b 40 04             	mov    0x4(%eax),%eax
c010ba2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ba30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba33:	8b 04 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%eax
c010ba3a:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ba3d:	89 14 24             	mov    %edx,(%esp)
c010ba40:	ff d0                	call   *%eax
c010ba42:	89 c2                	mov    %eax,%edx
c010ba44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba47:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ba4a:	eb 46                	jmp    c010ba92 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ba4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba4f:	89 04 24             	mov    %eax,(%esp)
c010ba52:	e8 7f 69 ff ff       	call   c01023d6 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ba57:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010ba5c:	8d 50 48             	lea    0x48(%eax),%edx
c010ba5f:	a1 28 fe 1a c0       	mov    0xc01afe28,%eax
c010ba64:	8b 40 04             	mov    0x4(%eax),%eax
c010ba67:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ba6b:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ba6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba72:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ba76:	c7 44 24 08 dc ec 10 	movl   $0xc010ecdc,0x8(%esp)
c010ba7d:	c0 
c010ba7e:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010ba85:	00 
c010ba86:	c7 04 24 08 ed 10 c0 	movl   $0xc010ed08,(%esp)
c010ba8d:	e8 48 53 ff ff       	call   c0100dda <__panic>
            num, current->pid, current->name);
}
c010ba92:	c9                   	leave  
c010ba93:	c3                   	ret    

c010ba94 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010ba94:	55                   	push   %ebp
c010ba95:	89 e5                	mov    %esp,%ebp
c010ba97:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010ba9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba9d:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010baa3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010baa6:	b8 20 00 00 00       	mov    $0x20,%eax
c010baab:	2b 45 0c             	sub    0xc(%ebp),%eax
c010baae:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bab1:	89 c1                	mov    %eax,%ecx
c010bab3:	d3 ea                	shr    %cl,%edx
c010bab5:	89 d0                	mov    %edx,%eax
}
c010bab7:	c9                   	leave  
c010bab8:	c3                   	ret    

c010bab9 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010bab9:	55                   	push   %ebp
c010baba:	89 e5                	mov    %esp,%ebp
c010babc:	83 ec 58             	sub    $0x58,%esp
c010babf:	8b 45 10             	mov    0x10(%ebp),%eax
c010bac2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010bac5:	8b 45 14             	mov    0x14(%ebp),%eax
c010bac8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010bacb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bace:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010bad1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bad4:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010bad7:	8b 45 18             	mov    0x18(%ebp),%eax
c010bada:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010badd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bae0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bae3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bae6:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010baef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010baf3:	74 1c                	je     c010bb11 <printnum+0x58>
c010baf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baf8:	ba 00 00 00 00       	mov    $0x0,%edx
c010bafd:	f7 75 e4             	divl   -0x1c(%ebp)
c010bb00:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010bb03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb06:	ba 00 00 00 00       	mov    $0x0,%edx
c010bb0b:	f7 75 e4             	divl   -0x1c(%ebp)
c010bb0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bb11:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bb14:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bb17:	f7 75 e4             	divl   -0x1c(%ebp)
c010bb1a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bb1d:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010bb20:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bb23:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bb26:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bb29:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010bb2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bb2f:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010bb32:	8b 45 18             	mov    0x18(%ebp),%eax
c010bb35:	ba 00 00 00 00       	mov    $0x0,%edx
c010bb3a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010bb3d:	77 56                	ja     c010bb95 <printnum+0xdc>
c010bb3f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010bb42:	72 05                	jb     c010bb49 <printnum+0x90>
c010bb44:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010bb47:	77 4c                	ja     c010bb95 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010bb49:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010bb4c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bb4f:	8b 45 20             	mov    0x20(%ebp),%eax
c010bb52:	89 44 24 18          	mov    %eax,0x18(%esp)
c010bb56:	89 54 24 14          	mov    %edx,0x14(%esp)
c010bb5a:	8b 45 18             	mov    0x18(%ebp),%eax
c010bb5d:	89 44 24 10          	mov    %eax,0x10(%esp)
c010bb61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bb64:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb67:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bb6b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010bb6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb72:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb76:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb79:	89 04 24             	mov    %eax,(%esp)
c010bb7c:	e8 38 ff ff ff       	call   c010bab9 <printnum>
c010bb81:	eb 1c                	jmp    c010bb9f <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010bb83:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb86:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb8a:	8b 45 20             	mov    0x20(%ebp),%eax
c010bb8d:	89 04 24             	mov    %eax,(%esp)
c010bb90:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb93:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010bb95:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010bb99:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010bb9d:	7f e4                	jg     c010bb83 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010bb9f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bba2:	05 24 ee 10 c0       	add    $0xc010ee24,%eax
c010bba7:	0f b6 00             	movzbl (%eax),%eax
c010bbaa:	0f be c0             	movsbl %al,%eax
c010bbad:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bbb0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bbb4:	89 04 24             	mov    %eax,(%esp)
c010bbb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbba:	ff d0                	call   *%eax
}
c010bbbc:	c9                   	leave  
c010bbbd:	c3                   	ret    

c010bbbe <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010bbbe:	55                   	push   %ebp
c010bbbf:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010bbc1:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010bbc5:	7e 14                	jle    c010bbdb <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010bbc7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbca:	8b 00                	mov    (%eax),%eax
c010bbcc:	8d 48 08             	lea    0x8(%eax),%ecx
c010bbcf:	8b 55 08             	mov    0x8(%ebp),%edx
c010bbd2:	89 0a                	mov    %ecx,(%edx)
c010bbd4:	8b 50 04             	mov    0x4(%eax),%edx
c010bbd7:	8b 00                	mov    (%eax),%eax
c010bbd9:	eb 30                	jmp    c010bc0b <getuint+0x4d>
    }
    else if (lflag) {
c010bbdb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bbdf:	74 16                	je     c010bbf7 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010bbe1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbe4:	8b 00                	mov    (%eax),%eax
c010bbe6:	8d 48 04             	lea    0x4(%eax),%ecx
c010bbe9:	8b 55 08             	mov    0x8(%ebp),%edx
c010bbec:	89 0a                	mov    %ecx,(%edx)
c010bbee:	8b 00                	mov    (%eax),%eax
c010bbf0:	ba 00 00 00 00       	mov    $0x0,%edx
c010bbf5:	eb 14                	jmp    c010bc0b <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010bbf7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbfa:	8b 00                	mov    (%eax),%eax
c010bbfc:	8d 48 04             	lea    0x4(%eax),%ecx
c010bbff:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc02:	89 0a                	mov    %ecx,(%edx)
c010bc04:	8b 00                	mov    (%eax),%eax
c010bc06:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010bc0b:	5d                   	pop    %ebp
c010bc0c:	c3                   	ret    

c010bc0d <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010bc0d:	55                   	push   %ebp
c010bc0e:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010bc10:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010bc14:	7e 14                	jle    c010bc2a <getint+0x1d>
        return va_arg(*ap, long long);
c010bc16:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc19:	8b 00                	mov    (%eax),%eax
c010bc1b:	8d 48 08             	lea    0x8(%eax),%ecx
c010bc1e:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc21:	89 0a                	mov    %ecx,(%edx)
c010bc23:	8b 50 04             	mov    0x4(%eax),%edx
c010bc26:	8b 00                	mov    (%eax),%eax
c010bc28:	eb 28                	jmp    c010bc52 <getint+0x45>
    }
    else if (lflag) {
c010bc2a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bc2e:	74 12                	je     c010bc42 <getint+0x35>
        return va_arg(*ap, long);
c010bc30:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc33:	8b 00                	mov    (%eax),%eax
c010bc35:	8d 48 04             	lea    0x4(%eax),%ecx
c010bc38:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc3b:	89 0a                	mov    %ecx,(%edx)
c010bc3d:	8b 00                	mov    (%eax),%eax
c010bc3f:	99                   	cltd   
c010bc40:	eb 10                	jmp    c010bc52 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010bc42:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc45:	8b 00                	mov    (%eax),%eax
c010bc47:	8d 48 04             	lea    0x4(%eax),%ecx
c010bc4a:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc4d:	89 0a                	mov    %ecx,(%edx)
c010bc4f:	8b 00                	mov    (%eax),%eax
c010bc51:	99                   	cltd   
    }
}
c010bc52:	5d                   	pop    %ebp
c010bc53:	c3                   	ret    

c010bc54 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010bc54:	55                   	push   %ebp
c010bc55:	89 e5                	mov    %esp,%ebp
c010bc57:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010bc5a:	8d 45 14             	lea    0x14(%ebp),%eax
c010bc5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010bc60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc63:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bc67:	8b 45 10             	mov    0x10(%ebp),%eax
c010bc6a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc71:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc75:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc78:	89 04 24             	mov    %eax,(%esp)
c010bc7b:	e8 02 00 00 00       	call   c010bc82 <vprintfmt>
    va_end(ap);
}
c010bc80:	c9                   	leave  
c010bc81:	c3                   	ret    

c010bc82 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010bc82:	55                   	push   %ebp
c010bc83:	89 e5                	mov    %esp,%ebp
c010bc85:	56                   	push   %esi
c010bc86:	53                   	push   %ebx
c010bc87:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bc8a:	eb 18                	jmp    c010bca4 <vprintfmt+0x22>
            if (ch == '\0') {
c010bc8c:	85 db                	test   %ebx,%ebx
c010bc8e:	75 05                	jne    c010bc95 <vprintfmt+0x13>
                return;
c010bc90:	e9 d1 03 00 00       	jmp    c010c066 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010bc95:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc98:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc9c:	89 1c 24             	mov    %ebx,(%esp)
c010bc9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bca2:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bca4:	8b 45 10             	mov    0x10(%ebp),%eax
c010bca7:	8d 50 01             	lea    0x1(%eax),%edx
c010bcaa:	89 55 10             	mov    %edx,0x10(%ebp)
c010bcad:	0f b6 00             	movzbl (%eax),%eax
c010bcb0:	0f b6 d8             	movzbl %al,%ebx
c010bcb3:	83 fb 25             	cmp    $0x25,%ebx
c010bcb6:	75 d4                	jne    c010bc8c <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010bcb8:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010bcbc:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010bcc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bcc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010bcc9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010bcd0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bcd3:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010bcd6:	8b 45 10             	mov    0x10(%ebp),%eax
c010bcd9:	8d 50 01             	lea    0x1(%eax),%edx
c010bcdc:	89 55 10             	mov    %edx,0x10(%ebp)
c010bcdf:	0f b6 00             	movzbl (%eax),%eax
c010bce2:	0f b6 d8             	movzbl %al,%ebx
c010bce5:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010bce8:	83 f8 55             	cmp    $0x55,%eax
c010bceb:	0f 87 44 03 00 00    	ja     c010c035 <vprintfmt+0x3b3>
c010bcf1:	8b 04 85 48 ee 10 c0 	mov    -0x3fef11b8(,%eax,4),%eax
c010bcf8:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010bcfa:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010bcfe:	eb d6                	jmp    c010bcd6 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010bd00:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010bd04:	eb d0                	jmp    c010bcd6 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bd06:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010bd0d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bd10:	89 d0                	mov    %edx,%eax
c010bd12:	c1 e0 02             	shl    $0x2,%eax
c010bd15:	01 d0                	add    %edx,%eax
c010bd17:	01 c0                	add    %eax,%eax
c010bd19:	01 d8                	add    %ebx,%eax
c010bd1b:	83 e8 30             	sub    $0x30,%eax
c010bd1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010bd21:	8b 45 10             	mov    0x10(%ebp),%eax
c010bd24:	0f b6 00             	movzbl (%eax),%eax
c010bd27:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010bd2a:	83 fb 2f             	cmp    $0x2f,%ebx
c010bd2d:	7e 0b                	jle    c010bd3a <vprintfmt+0xb8>
c010bd2f:	83 fb 39             	cmp    $0x39,%ebx
c010bd32:	7f 06                	jg     c010bd3a <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bd34:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010bd38:	eb d3                	jmp    c010bd0d <vprintfmt+0x8b>
            goto process_precision;
c010bd3a:	eb 33                	jmp    c010bd6f <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010bd3c:	8b 45 14             	mov    0x14(%ebp),%eax
c010bd3f:	8d 50 04             	lea    0x4(%eax),%edx
c010bd42:	89 55 14             	mov    %edx,0x14(%ebp)
c010bd45:	8b 00                	mov    (%eax),%eax
c010bd47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010bd4a:	eb 23                	jmp    c010bd6f <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010bd4c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bd50:	79 0c                	jns    c010bd5e <vprintfmt+0xdc>
                width = 0;
c010bd52:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010bd59:	e9 78 ff ff ff       	jmp    c010bcd6 <vprintfmt+0x54>
c010bd5e:	e9 73 ff ff ff       	jmp    c010bcd6 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010bd63:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010bd6a:	e9 67 ff ff ff       	jmp    c010bcd6 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010bd6f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bd73:	79 12                	jns    c010bd87 <vprintfmt+0x105>
                width = precision, precision = -1;
c010bd75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd78:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bd7b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010bd82:	e9 4f ff ff ff       	jmp    c010bcd6 <vprintfmt+0x54>
c010bd87:	e9 4a ff ff ff       	jmp    c010bcd6 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010bd8c:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010bd90:	e9 41 ff ff ff       	jmp    c010bcd6 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010bd95:	8b 45 14             	mov    0x14(%ebp),%eax
c010bd98:	8d 50 04             	lea    0x4(%eax),%edx
c010bd9b:	89 55 14             	mov    %edx,0x14(%ebp)
c010bd9e:	8b 00                	mov    (%eax),%eax
c010bda0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bda3:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bda7:	89 04 24             	mov    %eax,(%esp)
c010bdaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdad:	ff d0                	call   *%eax
            break;
c010bdaf:	e9 ac 02 00 00       	jmp    c010c060 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010bdb4:	8b 45 14             	mov    0x14(%ebp),%eax
c010bdb7:	8d 50 04             	lea    0x4(%eax),%edx
c010bdba:	89 55 14             	mov    %edx,0x14(%ebp)
c010bdbd:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010bdbf:	85 db                	test   %ebx,%ebx
c010bdc1:	79 02                	jns    c010bdc5 <vprintfmt+0x143>
                err = -err;
c010bdc3:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010bdc5:	83 fb 18             	cmp    $0x18,%ebx
c010bdc8:	7f 0b                	jg     c010bdd5 <vprintfmt+0x153>
c010bdca:	8b 34 9d c0 ed 10 c0 	mov    -0x3fef1240(,%ebx,4),%esi
c010bdd1:	85 f6                	test   %esi,%esi
c010bdd3:	75 23                	jne    c010bdf8 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010bdd5:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010bdd9:	c7 44 24 08 35 ee 10 	movl   $0xc010ee35,0x8(%esp)
c010bde0:	c0 
c010bde1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bde4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bde8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdeb:	89 04 24             	mov    %eax,(%esp)
c010bdee:	e8 61 fe ff ff       	call   c010bc54 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010bdf3:	e9 68 02 00 00       	jmp    c010c060 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010bdf8:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bdfc:	c7 44 24 08 3e ee 10 	movl   $0xc010ee3e,0x8(%esp)
c010be03:	c0 
c010be04:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be07:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be0e:	89 04 24             	mov    %eax,(%esp)
c010be11:	e8 3e fe ff ff       	call   c010bc54 <printfmt>
            }
            break;
c010be16:	e9 45 02 00 00       	jmp    c010c060 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010be1b:	8b 45 14             	mov    0x14(%ebp),%eax
c010be1e:	8d 50 04             	lea    0x4(%eax),%edx
c010be21:	89 55 14             	mov    %edx,0x14(%ebp)
c010be24:	8b 30                	mov    (%eax),%esi
c010be26:	85 f6                	test   %esi,%esi
c010be28:	75 05                	jne    c010be2f <vprintfmt+0x1ad>
                p = "(null)";
c010be2a:	be 41 ee 10 c0       	mov    $0xc010ee41,%esi
            }
            if (width > 0 && padc != '-') {
c010be2f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010be33:	7e 3e                	jle    c010be73 <vprintfmt+0x1f1>
c010be35:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010be39:	74 38                	je     c010be73 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010be3b:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010be3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be41:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be45:	89 34 24             	mov    %esi,(%esp)
c010be48:	e8 ed 03 00 00       	call   c010c23a <strnlen>
c010be4d:	29 c3                	sub    %eax,%ebx
c010be4f:	89 d8                	mov    %ebx,%eax
c010be51:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010be54:	eb 17                	jmp    c010be6d <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010be56:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010be5a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010be5d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010be61:	89 04 24             	mov    %eax,(%esp)
c010be64:	8b 45 08             	mov    0x8(%ebp),%eax
c010be67:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010be69:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010be6d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010be71:	7f e3                	jg     c010be56 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010be73:	eb 38                	jmp    c010bead <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010be75:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010be79:	74 1f                	je     c010be9a <vprintfmt+0x218>
c010be7b:	83 fb 1f             	cmp    $0x1f,%ebx
c010be7e:	7e 05                	jle    c010be85 <vprintfmt+0x203>
c010be80:	83 fb 7e             	cmp    $0x7e,%ebx
c010be83:	7e 15                	jle    c010be9a <vprintfmt+0x218>
                    putch('?', putdat);
c010be85:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be88:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be8c:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010be93:	8b 45 08             	mov    0x8(%ebp),%eax
c010be96:	ff d0                	call   *%eax
c010be98:	eb 0f                	jmp    c010bea9 <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010be9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be9d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bea1:	89 1c 24             	mov    %ebx,(%esp)
c010bea4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea7:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010bea9:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010bead:	89 f0                	mov    %esi,%eax
c010beaf:	8d 70 01             	lea    0x1(%eax),%esi
c010beb2:	0f b6 00             	movzbl (%eax),%eax
c010beb5:	0f be d8             	movsbl %al,%ebx
c010beb8:	85 db                	test   %ebx,%ebx
c010beba:	74 10                	je     c010becc <vprintfmt+0x24a>
c010bebc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010bec0:	78 b3                	js     c010be75 <vprintfmt+0x1f3>
c010bec2:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010bec6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010beca:	79 a9                	jns    c010be75 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010becc:	eb 17                	jmp    c010bee5 <vprintfmt+0x263>
                putch(' ', putdat);
c010bece:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bed1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bed5:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010bedc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bedf:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010bee1:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010bee5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bee9:	7f e3                	jg     c010bece <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010beeb:	e9 70 01 00 00       	jmp    c010c060 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010bef0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bef3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bef7:	8d 45 14             	lea    0x14(%ebp),%eax
c010befa:	89 04 24             	mov    %eax,(%esp)
c010befd:	e8 0b fd ff ff       	call   c010bc0d <getint>
c010bf02:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf05:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010bf08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bf0e:	85 d2                	test   %edx,%edx
c010bf10:	79 26                	jns    c010bf38 <vprintfmt+0x2b6>
                putch('-', putdat);
c010bf12:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf15:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf19:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010bf20:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf23:	ff d0                	call   *%eax
                num = -(long long)num;
c010bf25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf28:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bf2b:	f7 d8                	neg    %eax
c010bf2d:	83 d2 00             	adc    $0x0,%edx
c010bf30:	f7 da                	neg    %edx
c010bf32:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf35:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010bf38:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010bf3f:	e9 a8 00 00 00       	jmp    c010bfec <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010bf44:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bf47:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf4b:	8d 45 14             	lea    0x14(%ebp),%eax
c010bf4e:	89 04 24             	mov    %eax,(%esp)
c010bf51:	e8 68 fc ff ff       	call   c010bbbe <getuint>
c010bf56:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf59:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010bf5c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010bf63:	e9 84 00 00 00       	jmp    c010bfec <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010bf68:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bf6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf6f:	8d 45 14             	lea    0x14(%ebp),%eax
c010bf72:	89 04 24             	mov    %eax,(%esp)
c010bf75:	e8 44 fc ff ff       	call   c010bbbe <getuint>
c010bf7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf7d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010bf80:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010bf87:	eb 63                	jmp    c010bfec <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010bf89:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf90:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010bf97:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf9a:	ff d0                	call   *%eax
            putch('x', putdat);
c010bf9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf9f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bfa3:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010bfaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfad:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010bfaf:	8b 45 14             	mov    0x14(%ebp),%eax
c010bfb2:	8d 50 04             	lea    0x4(%eax),%edx
c010bfb5:	89 55 14             	mov    %edx,0x14(%ebp)
c010bfb8:	8b 00                	mov    (%eax),%eax
c010bfba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bfbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010bfc4:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010bfcb:	eb 1f                	jmp    c010bfec <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010bfcd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bfd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bfd4:	8d 45 14             	lea    0x14(%ebp),%eax
c010bfd7:	89 04 24             	mov    %eax,(%esp)
c010bfda:	e8 df fb ff ff       	call   c010bbbe <getuint>
c010bfdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bfe2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010bfe5:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010bfec:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010bff0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bff3:	89 54 24 18          	mov    %edx,0x18(%esp)
c010bff7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bffa:	89 54 24 14          	mov    %edx,0x14(%esp)
c010bffe:	89 44 24 10          	mov    %eax,0x10(%esp)
c010c002:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c005:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c008:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c00c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010c010:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c013:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c017:	8b 45 08             	mov    0x8(%ebp),%eax
c010c01a:	89 04 24             	mov    %eax,(%esp)
c010c01d:	e8 97 fa ff ff       	call   c010bab9 <printnum>
            break;
c010c022:	eb 3c                	jmp    c010c060 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010c024:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c027:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c02b:	89 1c 24             	mov    %ebx,(%esp)
c010c02e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c031:	ff d0                	call   *%eax
            break;
c010c033:	eb 2b                	jmp    c010c060 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010c035:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c038:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c03c:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010c043:	8b 45 08             	mov    0x8(%ebp),%eax
c010c046:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010c048:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c04c:	eb 04                	jmp    c010c052 <vprintfmt+0x3d0>
c010c04e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c052:	8b 45 10             	mov    0x10(%ebp),%eax
c010c055:	83 e8 01             	sub    $0x1,%eax
c010c058:	0f b6 00             	movzbl (%eax),%eax
c010c05b:	3c 25                	cmp    $0x25,%al
c010c05d:	75 ef                	jne    c010c04e <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010c05f:	90                   	nop
        }
    }
c010c060:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c061:	e9 3e fc ff ff       	jmp    c010bca4 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010c066:	83 c4 40             	add    $0x40,%esp
c010c069:	5b                   	pop    %ebx
c010c06a:	5e                   	pop    %esi
c010c06b:	5d                   	pop    %ebp
c010c06c:	c3                   	ret    

c010c06d <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010c06d:	55                   	push   %ebp
c010c06e:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010c070:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c073:	8b 40 08             	mov    0x8(%eax),%eax
c010c076:	8d 50 01             	lea    0x1(%eax),%edx
c010c079:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c07c:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010c07f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c082:	8b 10                	mov    (%eax),%edx
c010c084:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c087:	8b 40 04             	mov    0x4(%eax),%eax
c010c08a:	39 c2                	cmp    %eax,%edx
c010c08c:	73 12                	jae    c010c0a0 <sprintputch+0x33>
        *b->buf ++ = ch;
c010c08e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c091:	8b 00                	mov    (%eax),%eax
c010c093:	8d 48 01             	lea    0x1(%eax),%ecx
c010c096:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c099:	89 0a                	mov    %ecx,(%edx)
c010c09b:	8b 55 08             	mov    0x8(%ebp),%edx
c010c09e:	88 10                	mov    %dl,(%eax)
    }
}
c010c0a0:	5d                   	pop    %ebp
c010c0a1:	c3                   	ret    

c010c0a2 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010c0a2:	55                   	push   %ebp
c010c0a3:	89 e5                	mov    %esp,%ebp
c010c0a5:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010c0a8:	8d 45 14             	lea    0x14(%ebp),%eax
c010c0ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010c0ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c0b5:	8b 45 10             	mov    0x10(%ebp),%eax
c010c0b8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c0bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c0c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0c6:	89 04 24             	mov    %eax,(%esp)
c010c0c9:	e8 08 00 00 00       	call   c010c0d6 <vsnprintf>
c010c0ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010c0d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c0d4:	c9                   	leave  
c010c0d5:	c3                   	ret    

c010c0d6 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010c0d6:	55                   	push   %ebp
c010c0d7:	89 e5                	mov    %esp,%ebp
c010c0d9:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010c0dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0df:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c0e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0e5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c0e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0eb:	01 d0                	add    %edx,%eax
c010c0ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c0f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010c0f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c0fb:	74 0a                	je     c010c107 <vsnprintf+0x31>
c010c0fd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c100:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c103:	39 c2                	cmp    %eax,%edx
c010c105:	76 07                	jbe    c010c10e <vsnprintf+0x38>
        return -E_INVAL;
c010c107:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010c10c:	eb 2a                	jmp    c010c138 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010c10e:	8b 45 14             	mov    0x14(%ebp),%eax
c010c111:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c115:	8b 45 10             	mov    0x10(%ebp),%eax
c010c118:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c11c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010c11f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c123:	c7 04 24 6d c0 10 c0 	movl   $0xc010c06d,(%esp)
c010c12a:	e8 53 fb ff ff       	call   c010bc82 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010c12f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c132:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010c135:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c138:	c9                   	leave  
c010c139:	c3                   	ret    

c010c13a <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010c13a:	55                   	push   %ebp
c010c13b:	89 e5                	mov    %esp,%ebp
c010c13d:	57                   	push   %edi
c010c13e:	56                   	push   %esi
c010c13f:	53                   	push   %ebx
c010c140:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010c143:	a1 a0 de 12 c0       	mov    0xc012dea0,%eax
c010c148:	8b 15 a4 de 12 c0    	mov    0xc012dea4,%edx
c010c14e:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010c154:	6b f0 05             	imul   $0x5,%eax,%esi
c010c157:	01 f7                	add    %esi,%edi
c010c159:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010c15e:	f7 e6                	mul    %esi
c010c160:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010c163:	89 f2                	mov    %esi,%edx
c010c165:	83 c0 0b             	add    $0xb,%eax
c010c168:	83 d2 00             	adc    $0x0,%edx
c010c16b:	89 c7                	mov    %eax,%edi
c010c16d:	83 e7 ff             	and    $0xffffffff,%edi
c010c170:	89 f9                	mov    %edi,%ecx
c010c172:	0f b7 da             	movzwl %dx,%ebx
c010c175:	89 0d a0 de 12 c0    	mov    %ecx,0xc012dea0
c010c17b:	89 1d a4 de 12 c0    	mov    %ebx,0xc012dea4
    unsigned long long result = (next >> 12);
c010c181:	a1 a0 de 12 c0       	mov    0xc012dea0,%eax
c010c186:	8b 15 a4 de 12 c0    	mov    0xc012dea4,%edx
c010c18c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010c190:	c1 ea 0c             	shr    $0xc,%edx
c010c193:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c196:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010c199:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010c1a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c1a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c1a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c1a9:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c1ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1af:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c1b2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c1b6:	74 1c                	je     c010c1d4 <rand+0x9a>
c010c1b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1bb:	ba 00 00 00 00       	mov    $0x0,%edx
c010c1c0:	f7 75 dc             	divl   -0x24(%ebp)
c010c1c3:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c1c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1c9:	ba 00 00 00 00       	mov    $0x0,%edx
c010c1ce:	f7 75 dc             	divl   -0x24(%ebp)
c010c1d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c1d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c1d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c1da:	f7 75 dc             	divl   -0x24(%ebp)
c010c1dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c1e0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c1e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c1e6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c1e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c1ec:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c1ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010c1f2:	83 c4 24             	add    $0x24,%esp
c010c1f5:	5b                   	pop    %ebx
c010c1f6:	5e                   	pop    %esi
c010c1f7:	5f                   	pop    %edi
c010c1f8:	5d                   	pop    %ebp
c010c1f9:	c3                   	ret    

c010c1fa <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010c1fa:	55                   	push   %ebp
c010c1fb:	89 e5                	mov    %esp,%ebp
    next = seed;
c010c1fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c200:	ba 00 00 00 00       	mov    $0x0,%edx
c010c205:	a3 a0 de 12 c0       	mov    %eax,0xc012dea0
c010c20a:	89 15 a4 de 12 c0    	mov    %edx,0xc012dea4
}
c010c210:	5d                   	pop    %ebp
c010c211:	c3                   	ret    

c010c212 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010c212:	55                   	push   %ebp
c010c213:	89 e5                	mov    %esp,%ebp
c010c215:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c218:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010c21f:	eb 04                	jmp    c010c225 <strlen+0x13>
        cnt ++;
c010c221:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010c225:	8b 45 08             	mov    0x8(%ebp),%eax
c010c228:	8d 50 01             	lea    0x1(%eax),%edx
c010c22b:	89 55 08             	mov    %edx,0x8(%ebp)
c010c22e:	0f b6 00             	movzbl (%eax),%eax
c010c231:	84 c0                	test   %al,%al
c010c233:	75 ec                	jne    c010c221 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010c235:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c238:	c9                   	leave  
c010c239:	c3                   	ret    

c010c23a <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010c23a:	55                   	push   %ebp
c010c23b:	89 e5                	mov    %esp,%ebp
c010c23d:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c240:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010c247:	eb 04                	jmp    c010c24d <strnlen+0x13>
        cnt ++;
c010c249:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010c24d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c250:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010c253:	73 10                	jae    c010c265 <strnlen+0x2b>
c010c255:	8b 45 08             	mov    0x8(%ebp),%eax
c010c258:	8d 50 01             	lea    0x1(%eax),%edx
c010c25b:	89 55 08             	mov    %edx,0x8(%ebp)
c010c25e:	0f b6 00             	movzbl (%eax),%eax
c010c261:	84 c0                	test   %al,%al
c010c263:	75 e4                	jne    c010c249 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010c265:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c268:	c9                   	leave  
c010c269:	c3                   	ret    

c010c26a <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010c26a:	55                   	push   %ebp
c010c26b:	89 e5                	mov    %esp,%ebp
c010c26d:	57                   	push   %edi
c010c26e:	56                   	push   %esi
c010c26f:	83 ec 20             	sub    $0x20,%esp
c010c272:	8b 45 08             	mov    0x8(%ebp),%eax
c010c275:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c278:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c27b:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010c27e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c281:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c284:	89 d1                	mov    %edx,%ecx
c010c286:	89 c2                	mov    %eax,%edx
c010c288:	89 ce                	mov    %ecx,%esi
c010c28a:	89 d7                	mov    %edx,%edi
c010c28c:	ac                   	lods   %ds:(%esi),%al
c010c28d:	aa                   	stos   %al,%es:(%edi)
c010c28e:	84 c0                	test   %al,%al
c010c290:	75 fa                	jne    c010c28c <strcpy+0x22>
c010c292:	89 fa                	mov    %edi,%edx
c010c294:	89 f1                	mov    %esi,%ecx
c010c296:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c299:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c29c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010c29f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010c2a2:	83 c4 20             	add    $0x20,%esp
c010c2a5:	5e                   	pop    %esi
c010c2a6:	5f                   	pop    %edi
c010c2a7:	5d                   	pop    %ebp
c010c2a8:	c3                   	ret    

c010c2a9 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010c2a9:	55                   	push   %ebp
c010c2aa:	89 e5                	mov    %esp,%ebp
c010c2ac:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010c2af:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010c2b5:	eb 21                	jmp    c010c2d8 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010c2b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2ba:	0f b6 10             	movzbl (%eax),%edx
c010c2bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c2c0:	88 10                	mov    %dl,(%eax)
c010c2c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c2c5:	0f b6 00             	movzbl (%eax),%eax
c010c2c8:	84 c0                	test   %al,%al
c010c2ca:	74 04                	je     c010c2d0 <strncpy+0x27>
            src ++;
c010c2cc:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010c2d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c2d4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010c2d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2dc:	75 d9                	jne    c010c2b7 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010c2de:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c2e1:	c9                   	leave  
c010c2e2:	c3                   	ret    

c010c2e3 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010c2e3:	55                   	push   %ebp
c010c2e4:	89 e5                	mov    %esp,%ebp
c010c2e6:	57                   	push   %edi
c010c2e7:	56                   	push   %esi
c010c2e8:	83 ec 20             	sub    $0x20,%esp
c010c2eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c2f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010c2f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c2fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2fd:	89 d1                	mov    %edx,%ecx
c010c2ff:	89 c2                	mov    %eax,%edx
c010c301:	89 ce                	mov    %ecx,%esi
c010c303:	89 d7                	mov    %edx,%edi
c010c305:	ac                   	lods   %ds:(%esi),%al
c010c306:	ae                   	scas   %es:(%edi),%al
c010c307:	75 08                	jne    c010c311 <strcmp+0x2e>
c010c309:	84 c0                	test   %al,%al
c010c30b:	75 f8                	jne    c010c305 <strcmp+0x22>
c010c30d:	31 c0                	xor    %eax,%eax
c010c30f:	eb 04                	jmp    c010c315 <strcmp+0x32>
c010c311:	19 c0                	sbb    %eax,%eax
c010c313:	0c 01                	or     $0x1,%al
c010c315:	89 fa                	mov    %edi,%edx
c010c317:	89 f1                	mov    %esi,%ecx
c010c319:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c31c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c31f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010c322:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c325:	83 c4 20             	add    $0x20,%esp
c010c328:	5e                   	pop    %esi
c010c329:	5f                   	pop    %edi
c010c32a:	5d                   	pop    %ebp
c010c32b:	c3                   	ret    

c010c32c <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c32c:	55                   	push   %ebp
c010c32d:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c32f:	eb 0c                	jmp    c010c33d <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010c331:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c335:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c339:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c33d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c341:	74 1a                	je     c010c35d <strncmp+0x31>
c010c343:	8b 45 08             	mov    0x8(%ebp),%eax
c010c346:	0f b6 00             	movzbl (%eax),%eax
c010c349:	84 c0                	test   %al,%al
c010c34b:	74 10                	je     c010c35d <strncmp+0x31>
c010c34d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c350:	0f b6 10             	movzbl (%eax),%edx
c010c353:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c356:	0f b6 00             	movzbl (%eax),%eax
c010c359:	38 c2                	cmp    %al,%dl
c010c35b:	74 d4                	je     c010c331 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c35d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c361:	74 18                	je     c010c37b <strncmp+0x4f>
c010c363:	8b 45 08             	mov    0x8(%ebp),%eax
c010c366:	0f b6 00             	movzbl (%eax),%eax
c010c369:	0f b6 d0             	movzbl %al,%edx
c010c36c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c36f:	0f b6 00             	movzbl (%eax),%eax
c010c372:	0f b6 c0             	movzbl %al,%eax
c010c375:	29 c2                	sub    %eax,%edx
c010c377:	89 d0                	mov    %edx,%eax
c010c379:	eb 05                	jmp    c010c380 <strncmp+0x54>
c010c37b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c380:	5d                   	pop    %ebp
c010c381:	c3                   	ret    

c010c382 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c382:	55                   	push   %ebp
c010c383:	89 e5                	mov    %esp,%ebp
c010c385:	83 ec 04             	sub    $0x4,%esp
c010c388:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c38b:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c38e:	eb 14                	jmp    c010c3a4 <strchr+0x22>
        if (*s == c) {
c010c390:	8b 45 08             	mov    0x8(%ebp),%eax
c010c393:	0f b6 00             	movzbl (%eax),%eax
c010c396:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c399:	75 05                	jne    c010c3a0 <strchr+0x1e>
            return (char *)s;
c010c39b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c39e:	eb 13                	jmp    c010c3b3 <strchr+0x31>
        }
        s ++;
c010c3a0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010c3a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3a7:	0f b6 00             	movzbl (%eax),%eax
c010c3aa:	84 c0                	test   %al,%al
c010c3ac:	75 e2                	jne    c010c390 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010c3ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c3b3:	c9                   	leave  
c010c3b4:	c3                   	ret    

c010c3b5 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c3b5:	55                   	push   %ebp
c010c3b6:	89 e5                	mov    %esp,%ebp
c010c3b8:	83 ec 04             	sub    $0x4,%esp
c010c3bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3be:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c3c1:	eb 11                	jmp    c010c3d4 <strfind+0x1f>
        if (*s == c) {
c010c3c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3c6:	0f b6 00             	movzbl (%eax),%eax
c010c3c9:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c3cc:	75 02                	jne    c010c3d0 <strfind+0x1b>
            break;
c010c3ce:	eb 0e                	jmp    c010c3de <strfind+0x29>
        }
        s ++;
c010c3d0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010c3d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3d7:	0f b6 00             	movzbl (%eax),%eax
c010c3da:	84 c0                	test   %al,%al
c010c3dc:	75 e5                	jne    c010c3c3 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010c3de:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c3e1:	c9                   	leave  
c010c3e2:	c3                   	ret    

c010c3e3 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c3e3:	55                   	push   %ebp
c010c3e4:	89 e5                	mov    %esp,%ebp
c010c3e6:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c3e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c3f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c3f7:	eb 04                	jmp    c010c3fd <strtol+0x1a>
        s ++;
c010c3f9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c3fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c400:	0f b6 00             	movzbl (%eax),%eax
c010c403:	3c 20                	cmp    $0x20,%al
c010c405:	74 f2                	je     c010c3f9 <strtol+0x16>
c010c407:	8b 45 08             	mov    0x8(%ebp),%eax
c010c40a:	0f b6 00             	movzbl (%eax),%eax
c010c40d:	3c 09                	cmp    $0x9,%al
c010c40f:	74 e8                	je     c010c3f9 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010c411:	8b 45 08             	mov    0x8(%ebp),%eax
c010c414:	0f b6 00             	movzbl (%eax),%eax
c010c417:	3c 2b                	cmp    $0x2b,%al
c010c419:	75 06                	jne    c010c421 <strtol+0x3e>
        s ++;
c010c41b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c41f:	eb 15                	jmp    c010c436 <strtol+0x53>
    }
    else if (*s == '-') {
c010c421:	8b 45 08             	mov    0x8(%ebp),%eax
c010c424:	0f b6 00             	movzbl (%eax),%eax
c010c427:	3c 2d                	cmp    $0x2d,%al
c010c429:	75 0b                	jne    c010c436 <strtol+0x53>
        s ++, neg = 1;
c010c42b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c42f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c436:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c43a:	74 06                	je     c010c442 <strtol+0x5f>
c010c43c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c440:	75 24                	jne    c010c466 <strtol+0x83>
c010c442:	8b 45 08             	mov    0x8(%ebp),%eax
c010c445:	0f b6 00             	movzbl (%eax),%eax
c010c448:	3c 30                	cmp    $0x30,%al
c010c44a:	75 1a                	jne    c010c466 <strtol+0x83>
c010c44c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c44f:	83 c0 01             	add    $0x1,%eax
c010c452:	0f b6 00             	movzbl (%eax),%eax
c010c455:	3c 78                	cmp    $0x78,%al
c010c457:	75 0d                	jne    c010c466 <strtol+0x83>
        s += 2, base = 16;
c010c459:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c45d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c464:	eb 2a                	jmp    c010c490 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010c466:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c46a:	75 17                	jne    c010c483 <strtol+0xa0>
c010c46c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c46f:	0f b6 00             	movzbl (%eax),%eax
c010c472:	3c 30                	cmp    $0x30,%al
c010c474:	75 0d                	jne    c010c483 <strtol+0xa0>
        s ++, base = 8;
c010c476:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c47a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c481:	eb 0d                	jmp    c010c490 <strtol+0xad>
    }
    else if (base == 0) {
c010c483:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c487:	75 07                	jne    c010c490 <strtol+0xad>
        base = 10;
c010c489:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c490:	8b 45 08             	mov    0x8(%ebp),%eax
c010c493:	0f b6 00             	movzbl (%eax),%eax
c010c496:	3c 2f                	cmp    $0x2f,%al
c010c498:	7e 1b                	jle    c010c4b5 <strtol+0xd2>
c010c49a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c49d:	0f b6 00             	movzbl (%eax),%eax
c010c4a0:	3c 39                	cmp    $0x39,%al
c010c4a2:	7f 11                	jg     c010c4b5 <strtol+0xd2>
            dig = *s - '0';
c010c4a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4a7:	0f b6 00             	movzbl (%eax),%eax
c010c4aa:	0f be c0             	movsbl %al,%eax
c010c4ad:	83 e8 30             	sub    $0x30,%eax
c010c4b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4b3:	eb 48                	jmp    c010c4fd <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c4b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4b8:	0f b6 00             	movzbl (%eax),%eax
c010c4bb:	3c 60                	cmp    $0x60,%al
c010c4bd:	7e 1b                	jle    c010c4da <strtol+0xf7>
c010c4bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4c2:	0f b6 00             	movzbl (%eax),%eax
c010c4c5:	3c 7a                	cmp    $0x7a,%al
c010c4c7:	7f 11                	jg     c010c4da <strtol+0xf7>
            dig = *s - 'a' + 10;
c010c4c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4cc:	0f b6 00             	movzbl (%eax),%eax
c010c4cf:	0f be c0             	movsbl %al,%eax
c010c4d2:	83 e8 57             	sub    $0x57,%eax
c010c4d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4d8:	eb 23                	jmp    c010c4fd <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c4da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4dd:	0f b6 00             	movzbl (%eax),%eax
c010c4e0:	3c 40                	cmp    $0x40,%al
c010c4e2:	7e 3d                	jle    c010c521 <strtol+0x13e>
c010c4e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e7:	0f b6 00             	movzbl (%eax),%eax
c010c4ea:	3c 5a                	cmp    $0x5a,%al
c010c4ec:	7f 33                	jg     c010c521 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010c4ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4f1:	0f b6 00             	movzbl (%eax),%eax
c010c4f4:	0f be c0             	movsbl %al,%eax
c010c4f7:	83 e8 37             	sub    $0x37,%eax
c010c4fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c4fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c500:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c503:	7c 02                	jl     c010c507 <strtol+0x124>
            break;
c010c505:	eb 1a                	jmp    c010c521 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010c507:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c50b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c50e:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c512:	89 c2                	mov    %eax,%edx
c010c514:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c517:	01 d0                	add    %edx,%eax
c010c519:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010c51c:	e9 6f ff ff ff       	jmp    c010c490 <strtol+0xad>

    if (endptr) {
c010c521:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c525:	74 08                	je     c010c52f <strtol+0x14c>
        *endptr = (char *) s;
c010c527:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c52a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c52d:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c52f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c533:	74 07                	je     c010c53c <strtol+0x159>
c010c535:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c538:	f7 d8                	neg    %eax
c010c53a:	eb 03                	jmp    c010c53f <strtol+0x15c>
c010c53c:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c53f:	c9                   	leave  
c010c540:	c3                   	ret    

c010c541 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c541:	55                   	push   %ebp
c010c542:	89 e5                	mov    %esp,%ebp
c010c544:	57                   	push   %edi
c010c545:	83 ec 24             	sub    $0x24,%esp
c010c548:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c54b:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c54e:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010c552:	8b 55 08             	mov    0x8(%ebp),%edx
c010c555:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c558:	88 45 f7             	mov    %al,-0x9(%ebp)
c010c55b:	8b 45 10             	mov    0x10(%ebp),%eax
c010c55e:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c561:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c564:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010c568:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c56b:	89 d7                	mov    %edx,%edi
c010c56d:	f3 aa                	rep stos %al,%es:(%edi)
c010c56f:	89 fa                	mov    %edi,%edx
c010c571:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c574:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c577:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c57a:	83 c4 24             	add    $0x24,%esp
c010c57d:	5f                   	pop    %edi
c010c57e:	5d                   	pop    %ebp
c010c57f:	c3                   	ret    

c010c580 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c580:	55                   	push   %ebp
c010c581:	89 e5                	mov    %esp,%ebp
c010c583:	57                   	push   %edi
c010c584:	56                   	push   %esi
c010c585:	53                   	push   %ebx
c010c586:	83 ec 30             	sub    $0x30,%esp
c010c589:	8b 45 08             	mov    0x8(%ebp),%eax
c010c58c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c58f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c592:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c595:	8b 45 10             	mov    0x10(%ebp),%eax
c010c598:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c59b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c59e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c5a1:	73 42                	jae    c010c5e5 <memmove+0x65>
c010c5a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c5a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c5af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c5b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c5b8:	c1 e8 02             	shr    $0x2,%eax
c010c5bb:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c5bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c5c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c5c3:	89 d7                	mov    %edx,%edi
c010c5c5:	89 c6                	mov    %eax,%esi
c010c5c7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c5c9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c5cc:	83 e1 03             	and    $0x3,%ecx
c010c5cf:	74 02                	je     c010c5d3 <memmove+0x53>
c010c5d1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c5d3:	89 f0                	mov    %esi,%eax
c010c5d5:	89 fa                	mov    %edi,%edx
c010c5d7:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c5da:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c5dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c5e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5e3:	eb 36                	jmp    c010c61b <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c5e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5e8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c5eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5ee:	01 c2                	add    %eax,%edx
c010c5f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5f3:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010c5f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5f9:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010c5fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5ff:	89 c1                	mov    %eax,%ecx
c010c601:	89 d8                	mov    %ebx,%eax
c010c603:	89 d6                	mov    %edx,%esi
c010c605:	89 c7                	mov    %eax,%edi
c010c607:	fd                   	std    
c010c608:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c60a:	fc                   	cld    
c010c60b:	89 f8                	mov    %edi,%eax
c010c60d:	89 f2                	mov    %esi,%edx
c010c60f:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c612:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010c615:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010c618:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c61b:	83 c4 30             	add    $0x30,%esp
c010c61e:	5b                   	pop    %ebx
c010c61f:	5e                   	pop    %esi
c010c620:	5f                   	pop    %edi
c010c621:	5d                   	pop    %ebp
c010c622:	c3                   	ret    

c010c623 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c623:	55                   	push   %ebp
c010c624:	89 e5                	mov    %esp,%ebp
c010c626:	57                   	push   %edi
c010c627:	56                   	push   %esi
c010c628:	83 ec 20             	sub    $0x20,%esp
c010c62b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c62e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c631:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c634:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c637:	8b 45 10             	mov    0x10(%ebp),%eax
c010c63a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c63d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c640:	c1 e8 02             	shr    $0x2,%eax
c010c643:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c645:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c648:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c64b:	89 d7                	mov    %edx,%edi
c010c64d:	89 c6                	mov    %eax,%esi
c010c64f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c651:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c654:	83 e1 03             	and    $0x3,%ecx
c010c657:	74 02                	je     c010c65b <memcpy+0x38>
c010c659:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c65b:	89 f0                	mov    %esi,%eax
c010c65d:	89 fa                	mov    %edi,%edx
c010c65f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c662:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c665:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c668:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c66b:	83 c4 20             	add    $0x20,%esp
c010c66e:	5e                   	pop    %esi
c010c66f:	5f                   	pop    %edi
c010c670:	5d                   	pop    %ebp
c010c671:	c3                   	ret    

c010c672 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c672:	55                   	push   %ebp
c010c673:	89 e5                	mov    %esp,%ebp
c010c675:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c678:	8b 45 08             	mov    0x8(%ebp),%eax
c010c67b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c67e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c681:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c684:	eb 30                	jmp    c010c6b6 <memcmp+0x44>
        if (*s1 != *s2) {
c010c686:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c689:	0f b6 10             	movzbl (%eax),%edx
c010c68c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c68f:	0f b6 00             	movzbl (%eax),%eax
c010c692:	38 c2                	cmp    %al,%dl
c010c694:	74 18                	je     c010c6ae <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c696:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c699:	0f b6 00             	movzbl (%eax),%eax
c010c69c:	0f b6 d0             	movzbl %al,%edx
c010c69f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c6a2:	0f b6 00             	movzbl (%eax),%eax
c010c6a5:	0f b6 c0             	movzbl %al,%eax
c010c6a8:	29 c2                	sub    %eax,%edx
c010c6aa:	89 d0                	mov    %edx,%eax
c010c6ac:	eb 1a                	jmp    c010c6c8 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010c6ae:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c6b2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010c6b6:	8b 45 10             	mov    0x10(%ebp),%eax
c010c6b9:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c6bc:	89 55 10             	mov    %edx,0x10(%ebp)
c010c6bf:	85 c0                	test   %eax,%eax
c010c6c1:	75 c3                	jne    c010c686 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010c6c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c6c8:	c9                   	leave  
c010c6c9:	c3                   	ret    
